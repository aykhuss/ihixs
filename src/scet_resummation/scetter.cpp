#include "scetter.h"


void SCETTER::InitiatePDF(const string& pdfset)
{
    LHAPDF::setVerbosity(0);

    pdf= LHAPDF::mkPDF(pdfset);
    return;
}

double SCETTER::GetAlpha(double Q)
{
    alphaS=pdf->alphasQ2(Q*Q);
    return alphaS;
}

double SCETTER::GetValue(double x, double Q, int flavour)
{
    if(x>1||x<0)
        cout<<"Asking for x not in the allowed range! "<<x<<endl;
    return pdf->xfxQ2(flavour, x, Q*Q);
}

double SCETTER::GetDerivative(double x, double Q, int flavour)
{
    double h=x*1e-6;
    if(h+x>1.0)
        h=(1.0-x)/2.0;
    double up=this->GetValue(x+h,Q,flavour);
    double down=this->GetValue(x-h,Q,flavour);
    return (up-down)/2.0/h;
}

double SCETTER::GetDDerivative(double x, double Q, int flavour)
{
    double h=x*1e-6;
    if(h+x>1.0)
        h=(1.0-x)/2.0;
    double up=this->GetDerivative(x+h,Q,flavour);
    double down=this->GetDerivative(x-h,Q,flavour);
    return (up-down)/2.0/h;
}

double SCETTER::GetDDDerivative(double x, double Q, int flavour)
{
    double h=x*1e-6;
    if(h+x>1.0)
        h=(1.0-x)/2.0;
    double up=this->GetDDerivative(x+h,Q,flavour);
    double down=this->GetDDerivative(x-h,Q,flavour);
    return (up-down)/2.0/h;
}


double SCETTER::Zeta(int i)
{
    if(i==3)
        return 1.20205690315959428539973816151;
    if(i==5)
        return 1.03692775514336992633136548646;
    return 0;
}

vector<double> SCETTER::Multiply(vector<double> a,vector<double>b)
{
    vector<double> res;
    res.push_back(a[0]*b[0]);
    res.push_back(a[0]*b[1]+a[1]*b[0]);
    res.push_back(a[0]*b[2]+a[1]*b[1]+a[2]*b[0]);
    res.push_back(a[0]*b[3]+a[1]*b[2]+a[2]*b[1]+a[3]*b[0]);
    return res;
}


complex<double> SCETTER::alpha_res_complex(double Lambda_QCD,double scale,int order)
{
    complex<double> rrr(-scale*scale/Lambda_QCD/Lambda_QCD,-0.0000000001);
    complex<double> L=log(rrr);
    //cout<<L<<endl;
    complex<double> res=Pi/(L*beta[0]);
    if(order==0)
        return res;
    res+=-((Pi*beta[1]*log(L))/(pow(L,2)*pow(beta[0],3)));
    if(order==1)
        return res;
    res+=-((Pi*beta[1])/(pow(L,3)*pow(beta[0],4))) +    (Pi*beta[2])/(pow(L,3)*pow(beta[0],4))-(Pi*beta[1]*log(L))/(pow(L,3)*pow(beta[0],4))+(Pi*beta[1]*pow(log(L),2))/(pow(L,3)*pow(beta[0],4));
    if(order==2)
        return res;
    res+=-(Pi*pow(beta[1],3))/(2.*pow(L,4)*pow(beta[0],7)) +    (Pi*beta[3])/(2.*pow(L,4)*pow(beta[0],5)) +    (2.0*Pi*pow(beta[1],3)*log(L))/(pow(L,4)*pow(beta[0],7))- (3.0*Pi*beta[1]*beta[2]*log(L))/(pow(L,4)*pow(beta[0],6)) +    (5.0*Pi*pow(beta[1],3)*pow(log(L),2))/(2.*pow(L,4)*pow(beta[0],7)) -    (Pi*pow(beta[1],3)*pow(log(L),3))/(pow(L,4)*pow(beta[0],7));
    
    return res;
}

double SCETTER::alpha_res_real(double Lambda_QCD,double scale,int order)
{
    double L=log(scale*scale/Lambda_QCD/Lambda_QCD);
    
    double res=Pi/(L*beta[0]);
    if(order==0)
        return res;
    res+=-((Pi*beta[1]*log(L))/(pow(L,2)*pow(beta[0],3)));
    if(order==1)
        return res;
    res+=-((Pi*beta[1])/(pow(L,3)*pow(beta[0],4))) +    (Pi*beta[2])/(pow(L,3)*pow(beta[0],4))-(Pi*beta[1]*log(L))/(pow(L,3)*pow(beta[0],4))+(Pi*beta[1]*pow(log(L),2))/(pow(L,3)*pow(beta[0],4));
    if(order==2)
        return res;
    res+=-(Pi*pow(beta[1],3))/(2.*pow(L,4)*pow(beta[0],7)) +    (Pi*beta[3])/(2.*pow(L,4)*pow(beta[0],5)) +    (2.0*Pi*pow(beta[1],3)*log(L))/(pow(L,4)*pow(beta[0],7))- (3.0*Pi*beta[1]*beta[2]*log(L))/(pow(L,4)*pow(beta[0],6)) +    (5.0*Pi*pow(beta[1],3)*pow(log(L),2))/(2.*pow(L,4)*pow(beta[0],7)) -    (Pi*pow(beta[1],3)*pow(log(L),3))/(pow(L,4)*pow(beta[0],7));
    
    return res;
}

void SCETTER::SetLambdaQCD(double a0, double mu0,int order)
{
    double min=0.0001;
    double max=100.0;
    double diff=10;
    int c=0;
    while(abs(diff)>0.00000004)
    {
        if(c==400000)
            return ;
        c++;
        diff=a0-alpha_res_real((max-min)/2.0+min,mu0,order);
        if(diff<0)
            max=(max-min)/2.0+min;
        else
            min=(max-min)/2.0+min;
        //cout<<diff<<"  max "<<max <<" min "<<min<<endl;
    }
    Lambda_QCD=(max-min)/2.0+min;
    cout<<"Lambda QCD is at "<<Lambda_QCD<<endl;
}

void SCETTER::SetAlphaOrder(int order, double alpha0, double mu0)
{
    alpha_order=order;
    SetLambdaQCD(alpha0,mu0,order);
}


complex<double> SCETTER::alpha(double mu1,int order,bool pisq)
{
    if(pisq)
        return alpha_res_complex(Lambda_QCD,mu1,order);
    
    return alpha_res_real(Lambda_QCD,mu1,order);
}

vector<complex<double> > SCETTER::Ag(double mu0,double mu1,vector<double> gamma,bool pisq)
{
    complex<double> a0=alpha(mu0,alpha_order,pisq);
    complex<double> r=alpha(mu1,alpha_order,false)/a0;
    vector <complex<double> > res;
    res.push_back(gamma[0]*log(r)/beta[0]);
    res.push_back(a0/Pi*((r-1.0)/beta[0]/beta[0]*(beta[0]*gamma[1]-beta[1]*gamma[0])));
    res.push_back(a0/Pi*a0/Pi*(((-1.0 + pow(r,2))*(pow(beta[1],2)*gamma[0] - beta[0]*beta[1]*gamma[1] + beta[0]*(-(beta[2]*gamma[0]) + beta[0]*gamma[2])))/(2.*pow(beta[0],3))));
    res.push_back(a0/Pi*a0/Pi*a0/Pi*(-((-1.0 + pow(r,3))*(pow(beta[1],3)*gamma[0] - beta[0]*pow(beta[1],2)*gamma[1] + beta[0]*beta[1]*(-2.0*beta[2]*gamma[0] + beta[0]*gamma[2]) + pow(beta[0],2)*(beta[3]*gamma[0] + beta[2]*gamma[1] - beta[0]*gamma[3])))/(3.*pow(beta[0],4))));
    
    return res;
}

vector<complex<double> > SCETTER::Sg(double mu0,double mu1,vector<double> gamma,bool pisq)
{
    complex<double> a0=alpha(mu0,alpha_order,pisq);
    complex<double> r=alpha(mu1,alpha_order,false)/a0;
    
    vector <complex<double> > res;
    res.push_back(Pi/a0*(((-1.0 + r)*gamma[0])/(r*pow(beta[0],2)) - (gamma[0]*log(r))/pow(beta[0],2)));
    res.push_back(-(((-1.0 + r)*(-(beta[1]*gamma[0]) + beta[0]*gamma[1]))/pow(beta[0],3)) + ((-(beta[1]*gamma[0]) + beta[0]*gamma[1])*log(r))/pow(beta[0],3) +(beta[1]*gamma[0]*pow(log(r),2))/(2.*pow(beta[0],3)));
    res.push_back(a0/Pi*(-((-1.0 + r)*(-(pow(beta[1],2)*gamma[0]) + r*pow(beta[1],2)*gamma[0] - beta[0]*beta[2]*gamma[0] - r*beta[0]*beta[2]*gamma[0] + 3.0*beta[0]*beta[1]*gamma[1] - r*beta[0]*beta[1]*gamma[1] - pow(beta[0],2)*gamma[2] + r*pow(beta[0],2)*gamma[2]))/(2.*pow(beta[0],4)) +((pow(beta[1],2)*gamma[0] - r*pow(beta[1],2)*gamma[0] - beta[0]*beta[2]*gamma[0] + r*beta[0]*beta[1]*gamma[1])*log(r))/pow(beta[0],4)));
    res.push_back(a0/Pi*a0/Pi*(-((-1.0 + r)*(8*pow(beta[1],3)*gamma[0] - 4.0*r*pow(beta[1],3)*gamma[0] - 4.0*pow(r,2)*pow(beta[1],3)*gamma[0] - 7.0*beta[0]*beta[1]*beta[2]*gamma[0] + 5.0*r*beta[0]*beta[1]*beta[2]*gamma[0] + 8.0*pow(r,2)*beta[0]*beta[1]*beta[2]*gamma[0] - pow(beta[0],2)*beta[3]*gamma[0] - r*pow(beta[0],2)*beta[3]*gamma[0] - 4.0*pow(r,2)*pow(beta[0],2)*beta[3]*gamma[0] - 11.0*beta[0]*pow(beta[1],2)*gamma[1] + r*beta[0]*pow(beta[1],2)*gamma[1] + 4.0*pow(r,2)*beta[0]*pow(beta[1],2)*gamma[1] + 8.0*pow(beta[0],2)*beta[2]*gamma[1] - 4.0*r*pow(beta[0],2)*beta[2]*gamma[1] - 4.0*pow(r,2)*pow(beta[0],2)*beta[2]*gamma[1] + 5.0*pow(beta[0],2)*beta[1]*gamma[2] + 5.0*r*pow(beta[0],2)*beta[1]*gamma[2] - 4.0*pow(r,2)*pow(beta[0],2)*beta[1]*gamma[2] - 2.0*pow(beta[0],3)*gamma[3] - 2.0*r*pow(beta[0],3)*gamma[3] + 4.0*pow(r,2)*pow(beta[0],3)*gamma[3]))/(12.*pow(beta[0],5)) + ((-(pow(beta[1],3)*gamma[0]) + pow(r,2)*pow(beta[1],3)*gamma[0] + 2*beta[0]*beta[1]*beta[2]*gamma[0] - pow(r,2)*beta[0]*beta[1]*beta[2]*gamma[0] - pow(beta[0],2)*beta[3]*gamma[0] - pow(r,2)*beta[0]*pow(beta[1],2)*gamma[1] + pow(r,2)*pow(beta[0],2)*beta[1]*gamma[2])*log(r))/(2.*pow(beta[0],5))));
    
    return res;
}

vector<double> SCETTER::Hard(double mH,double mu1,bool pisq)
{
    complex<double> L;
    if(pisq)
        L=log(mu1*mu1/mH/mH);
    else
        L=log(-complex<double>(mu1*mu1/mH/mH,-0.0000000001));
    
    complex<double> aH=alpha(mu1,alpha_order,pisq)/Pi;
    
    //FormFactor
    vector<complex<double> > H;
    H.push_back(1.0);
    H.push_back(aH*(1.2337005501361698274 - 0.75*pow(L,2)));
    H.push_back(aH*aH*(-1.5022772559719215725 + 1.7759439026876390204*L - 2.2205579207312059628*pow(L,2) - 0.47916666666666666667*pow(L,3) + 0.28125*pow(L,4)));
    H.push_back(aH*aH*aH*(-63.523779467117570468 - 13.805165841431980412*L + 0.83019532498191757188*pow(L,2) - 4.1823559787875777311*pow(L,3) +
                          0.85923877193371781928*pow(L,4) + 0.359375*pow(L,5) - 0.0703125*pow(L,6)));
    //Hard Function
    vector<double> HFunc;
    HFunc.push_back(1.0);
    HFunc.push_back(real(H[0]*conj(H[1])+conj(H[0])*H[1]));
    HFunc.push_back(real(H[0]*conj(H[2])+conj(H[1])*H[1]+conj(H[0])*H[2]));
    HFunc.push_back(real(H[0]*conj(H[3])+conj(H[2])*H[1]+conj(H[1])*H[2]+conj(H[0])*H[3]));
    
    return HFunc;
}

vector<double> SCETTER::U(double mh,double muf,double mus,double muh,double mut,double mt,bool pisq)
{
    //complex<double> aH=alpha(muh,alpha_order,pisq)/Pi;
    double aS=real(alpha(mus,alpha_order,false)/Pi);
    double aT=real(alpha(mut,alpha_order,false)/Pi);
    //double aHr=real(alpha(muh,alpha_order,false)/Pi);
    double alphamH=real(alpha(mh,alpha_order,false)/Pi);
    
    double rr1=aS*aS*aS*aS/aT/aT/aT/aT;
    vector<double> betaratio;
    betaratio.push_back(rr1);
    betaratio.push_back(rr1*(aS-aT)*2*beta[1]/beta[0]);
    betaratio.push_back(rr1*(aS-aT)/beta[0]/beta[0]*(aS*beta[1]*beta[1]-3.0*aT*beta[1]*beta[1]+2*aS*beta[0]*beta[2]+2*aT*beta[0]*beta[2]));
    betaratio.push_back(2*rr1*(aS-aT)/beta[0]/beta[0]/beta[0]*(aS*aS*beta[0]*(beta[1]*beta[2]+beta[0]*beta[3])-aS*aT*(beta[1]*beta[1]*beta[1]+beta[0]*beta[1]*beta[2]-beta[0]*beta[0]*beta[3])+aT*aT*(2*beta[1]*beta[1]*beta[1]-3*beta[0]*beta[1]*beta[2]+beta[0]*beta[0]*beta[3])));
    
    double rrr2=aT*aT*aT*aT/aS/aS/alphamH/alphamH;
    
    complex<double> ratio(mh*mh/muh/muh,-0.00000000001);
    complex<double> L=log(ratio);
    
    vector<complex<double> > ACusp=Ag(muh,mus,gammaC,false);
    vector<complex<double> > ASoft=Ag(muh,mus,gammaS,false);
    vector<complex<double> > AGlue=Ag(mus,muf,gammag,false);
    vector<complex<double> > SCusp=Sg(muh,mus,gammaC,false);
    
    vector<complex<double> > ACuspIPi=Ag(muh,muh,gammaC,true);
    vector<complex<double> > ASoftIPi=Ag(muh,muh,gammaS,true);
    vector<complex<double> > SCuspIPi=Sg(muh,muh,gammaC,true);
    
    double exp0=real(3.0*SCusp[0]+3.0*SCusp[1]-3.0*ACusp[0]*L-ASoft[0]+2.0*AGlue[0]);
    double exp1=real(3.0*SCusp[2]-3.0*ACusp[1]*L-ASoft[1]+2.0*AGlue[1]);
    double exp2=real(3.0*SCusp[3]-3.0*ACusp[2]*L-ASoft[2]+2.0*AGlue[2]);
    double exp3=0.0;
    
    double exp0IPi=real(3.0*SCuspIPi[0]+3.0*SCuspIPi[1]-3.0*ACuspIPi[0]*L-ASoftIPi[0]);
    double exp1IPi=real(3.0*SCuspIPi[2]-3.0*ACuspIPi[1]*L-ASoftIPi[1]);
    double exp2IPi=real(3.0*SCuspIPi[3]-3.0*ACuspIPi[2]*L-ASoftIPi[2]);
    double exp3IPi=0.0;
    
    if(pisq)
    {
        exp0+=exp0IPi;
        exp1+=exp1IPi;
        exp2+=exp2IPi;
        exp3+=exp3IPi;
    }
    
    vector<double> UVec;
    UVec.push_back(rrr2*exp(exp0));
    UVec.push_back(rrr2*exp(exp0)*exp1);
    UVec.push_back(rrr2*exp(exp0)*(exp1*exp1/2.0+exp2));
    UVec.push_back(rrr2*exp(exp0)*(exp1*exp1*exp1/6.0+exp1*exp2+exp3));
    
    return Multiply(UVec,betaratio);
    
    
}

vector<double> SCETTER::WilsonCoeff(double mt,double mut)
{
    vector<double> coef;
    double L=-2*log(mt/mut);
    double nf=5;
    double z3=Zeta(3);
    double aT=real(alpha(mut,alpha_order,false)/Pi);
    
    coef.push_back(1);
    coef.push_back(2.75*aT);
    coef.push_back((2777./288. - nf * 67./96.+ L * (19./16.+nf/3.))*aT*aT);
    coef.push_back(((-16567986
                     + 2088288*L
                     + 812592*pow(L,2)
                     + 704676*nf
                     + 419328*L*nf
                     + 178848*pow(L,2)*nf
                     - 54920*pow(nf,2)
                     + 11088*L*pow(nf,2)
                     - 13824*pow(L,2)*pow(nf,2)
                     + 24244461*z3
                     - 1994022*nf*z3)/248832.)*aT*aT*aT);
    return Multiply(coef,coef);
}

vector<double> SCETTER::GetLD(vector<double> DD,double L1,double L1p,double L1pp,double L1ppp,double x,double tau,double Lt,int mode)
{
    vector<double> Alllogs,Delta,SubtrD1,SubtrD2,SubtrDD1,SubtrDD2,SubtrDD3;
    double egamexp=exp(-2*EulerGamma*x);
    double eg=EulerGamma;
    double gam0=boost::math::tgamma<double>(1+2*x);
    double gam1=boost::math::polygamma<double>(0,1+2*x);
    double gam2=boost::math::polygamma<double>(1,1+2*x);
    double gam3=boost::math::polygamma<double>(2,1+2*x);
    double gam4=boost::math::polygamma<double>(3,1+2*x);
    double gam5=boost::math::polygamma<double>(4,1+2*x);
    double gam6=boost::math::polygamma<double>(5,1+2*x);
    
    
//#include "Subtraction.h"

    // Subtraction.h contents from here
    Delta.push_back((egamexp*pow(1 - tau,2*x))/gam0);
    Delta.push_back((-2*egamexp*(eg + gam1 - Lt)*pow(1 - tau,2*x))/gam0);
    Delta.push_back((4*egamexp*(pow(eg,2) + pow(gam1,2) - gam2 + 2*eg*(gam1 - Lt) - 2*gam1*Lt + pow(Lt,2))*pow(1 - tau,2*x))/gam0);
    Delta.push_back((-8*egamexp*(pow(eg,3) + pow(gam1,3) - 3*gam1*gam2 + gam3 + 3*pow(eg,2)*(gam1 - Lt) - 3*pow(gam1,2)*Lt + 3*gam2*Lt + 3*gam1*pow(Lt,2) - pow(Lt,3) + 3*eg*(pow(gam1,2) - gam2 - 2*gam1*Lt + pow(Lt,2)))*pow(1 - tau,2*x))/gam0);
    Delta.push_back((16*egamexp*(pow(eg,4) + pow(gam1,4) + 3*pow(gam2,2) - gam4 + 4*pow(eg,3)*(gam1 - Lt) - 4*pow(gam1,3)*Lt - 4*gam3*Lt - 6*gam2*pow(Lt,2) + pow(Lt,4) - 6*pow(gam1,2)*(gam2 - pow(Lt,2)) + 6*pow(eg,2)*(pow(gam1,2) - gam2 - 2*gam1*Lt + pow(Lt,2)) + 4*gam1*(gam3 + 3*gam2*Lt - pow(Lt,3)) + 4*eg*(pow(gam1,3) - 3*gam1*gam2 + gam3 - 3*pow(gam1,2)*Lt + 3*gam2*Lt + 3*gam1*pow(Lt,2) - pow(Lt,3)))*pow(1 - tau,2*x))/gam0);
    Delta.push_back((-32*egamexp*(pow(eg,5) + pow(gam1,5) - 10*gam2*gam3 + gam5 + 5*pow(eg,4)*(gam1 - Lt) - 5*pow(gam1,4)*Lt - 15*pow(gam2,2)*Lt + 5*gam4*Lt + 10*gam3*pow(Lt,2) + 10*gam2*pow(Lt,3) - pow(Lt,5) - 10*pow(gam1,3)*(gam2 - pow(Lt,2)) + 10*pow(eg,3)*(pow(gam1,2) - gam2 - 2*gam1*Lt + pow(Lt,2)) + 10*pow(gam1,2)*(gam3 + 3*gam2*Lt - pow(Lt,3)) + 10*pow(eg,2)*(pow(gam1,3) - 3*gam1*gam2 + gam3 - 3*pow(gam1,2)*Lt + 3*gam2*Lt + 3*gam1*pow(Lt,2) - pow(Lt,3)) + 5*gam1*(3*pow(gam2,2) - gam4 - 4*gam3*Lt - 6*gam2*pow(Lt,2) + pow(Lt,4)) + 5*eg*(pow(gam1,4) + 3*pow(gam2,2) - gam4 - 4*pow(gam1,3)*Lt - 4*gam3*Lt - 6*gam2*pow(Lt,2) + pow(Lt,4) - 6*pow(gam1,2)*(gam2 - pow(Lt,2)) + 4*gam1*(gam3 + 3*gam2*Lt - pow(Lt,3))))*pow(1 - tau,2*x))/gam0);
    Delta.push_back((64*egamexp*(pow(eg,6) + pow(gam1,6) - 15*pow(gam2,3) + 10*pow(gam3,2) + 15*gam2*gam4 - gam6 + 6*pow(eg,5)*(gam1 - Lt) - 6*pow(gam1,5)*Lt + 60*gam2*gam3*Lt - 6*gam5*Lt + 45*pow(gam2,2)*pow(Lt,2) - 15*gam4*pow(Lt,2) - 20*gam3*pow(Lt,3) - 15*gam2*pow(Lt,4) + pow(Lt,6) - 15*pow(gam1,4)*(gam2 - pow(Lt,2)) + 15*pow(eg,4)*(pow(gam1,2) - gam2 - 2*gam1*Lt + pow(Lt,2)) + 20*pow(gam1,3)*(gam3 + 3*gam2*Lt - pow(Lt,3)) + 20*pow(eg,3)*(pow(gam1,3) - 3*gam1*gam2 + gam3 - 3*pow(gam1,2)*Lt + 3*gam2*Lt + 3*gam1*pow(Lt,2) - pow(Lt,3)) + 15*pow(gam1,2)*(3*pow(gam2,2) - gam4 - 4*gam3*Lt - 6*gam2*pow(Lt,2) + pow(Lt,4)) + 6*gam1*(gam5 - 15*pow(gam2,2)*Lt + 5*gam4*Lt + 10*gam3*pow(Lt,2) - pow(Lt,5) - 10*gam2*(gam3 - pow(Lt,3))) + 15*pow(eg,2)*(pow(gam1,4) + 3*pow(gam2,2) - gam4 - 4*pow(gam1,3)*Lt - 4*gam3*Lt - 6*gam2*pow(Lt,2) + pow(Lt,4) - 6*pow(gam1,2)*(gam2 - pow(Lt,2)) + 4*gam1*(gam3 + 3*gam2*Lt - pow(Lt,3))) + 6*eg*(pow(gam1,5) - 10*gam2*gam3 + gam5 - 5*pow(gam1,4)*Lt - 15*pow(gam2,2)*Lt + 5*gam4*Lt + 10*gam3*pow(Lt,2) + 10*gam2*pow(Lt,3) - pow(Lt,5) - 10*pow(gam1,3)*(gam2 - pow(Lt,2)) + 10*pow(gam1,2)*(gam3 + 3*gam2*Lt - pow(Lt,3)) + 5*gam1*(3*pow(gam2,2) - gam4 - 4*gam3*Lt - 6*gam2*pow(Lt,2) + pow(Lt,4))))*pow(1 - tau,2*x))/gam0);
    
    SubtrD1.push_back((2*egamexp*pow(1 - tau,1 + 2*x)*x)/(gam0 + 2*gam0*x));
    SubtrD1.push_back((-2*egamexp*pow(1 - tau,1 + 2*x)*(-1 + 2*eg*x + 4*eg*pow(x,2) + 2*gam1*x*(1 + 2*x) - 2*Lt*x*(1 + 2*x)))/(gam0*pow(1 + 2*x,2)));
    SubtrD1.push_back((8*egamexp*pow(1 - tau,1 + 2*x)*(-1 + Lt - gam2*x + 2*Lt*x + pow(Lt,2)*x - 4*gam2*pow(x,2) + 4*pow(Lt,2)*pow(x,2) - 4*gam2*pow(x,3) + 4*pow(Lt,2)*pow(x,3) + x*pow(eg + 2*eg*x,2) + x*pow(gam1 + 2*gam1*x,2) + eg*(1 + 2*x)*(-1 + 2*gam1*x*(1 + 2*x) - 2*Lt*x*(1 + 2*x)) - gam1*(1 + 2*x)*(1 + 2*Lt*x*(1 + 2*x))))/(gam0*pow(1 + 2*x,3)));
    SubtrD1.push_back((-8*egamexp*pow(1 - tau,1 + 2*x)*(-6 + 3*gam2 + 6*Lt - 3*pow(Lt,2) + 12*gam2*x + 2*gam3*x + 12*Lt*x + 6*gam2*Lt*x - 12*pow(Lt,2)*x - 2*pow(Lt,3)*x + 12*gam2*pow(x,2) + 12*gam3*pow(x,2) + 36*gam2*Lt*pow(x,2) - 12*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 24*gam3*pow(x,3) + 72*gam2*Lt*pow(x,3) - 24*pow(Lt,3)*pow(x,3) + 16*gam3*pow(x,4) + 48*gam2*Lt*pow(x,4) - 16*pow(Lt,3)*pow(x,4) + 2*x*pow(eg + 2*eg*x,3) + 2*x*pow(gam1 + 2*gam1*x,3) + 3*pow(eg + 2*eg*x,2)*(-1 + 2*gam1*x*(1 + 2*x) - 2*Lt*x*(1 + 2*x)) - 3*pow(gam1 + 2*gam1*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 6*gam1*(1 + 2*x)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 6*eg*(1 + 2*x)*(-1 + Lt - gam2*x + 2*Lt*x - 4*gam2*pow(x,2) - 4*gam2*pow(x,3) + x*pow(gam1 + 2*gam1*x,2) + x*pow(Lt + 2*Lt*x,2) - gam1*(1 + 2*x)*(1 + 2*Lt*x*(1 + 2*x)))))/(gam0*pow(1 + 2*x,4)));
    SubtrD1.push_back((32*egamexp*pow(1 - tau,1 + 2*x)*(-12 + 6*gam2 - 2*gam3 + 12*Lt - 6*gam2*Lt - 6*pow(Lt,2) + 2*pow(Lt,3) + 24*gam2*x + 3*pow(gam2,2)*x - 12*gam3*x - gam4*x + 24*Lt*x - 36*gam2*Lt*x - 4*gam3*Lt*x - 24*pow(Lt,2)*x - 6*gam2*pow(Lt,2)*x + 12*pow(Lt,3)*x + pow(Lt,4)*x + 24*gam2*pow(x,2) + 24*pow(gam2,2)*pow(x,2) - 24*gam3*pow(x,2) - 8*gam4*pow(x,2) - 72*gam2*Lt*pow(x,2) - 32*gam3*Lt*pow(x,2) - 24*pow(Lt,2)*pow(x,2) - 48*gam2*pow(Lt,2)*pow(x,2) + 24*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) + 72*pow(gam2,2)*pow(x,3) - 16*gam3*pow(x,3) - 24*gam4*pow(x,3) - 48*gam2*Lt*pow(x,3) - 96*gam3*Lt*pow(x,3) - 144*gam2*pow(Lt,2)*pow(x,3) + 16*pow(Lt,3)*pow(x,3) + 24*pow(Lt,4)*pow(x,3) + 96*pow(gam2,2)*pow(x,4) - 32*gam4*pow(x,4) - 128*gam3*Lt*pow(x,4) - 192*gam2*pow(Lt,2)*pow(x,4) + 32*pow(Lt,4)*pow(x,4) + 48*pow(gam2,2)*pow(x,5) - 16*gam4*pow(x,5) - 64*gam3*Lt*pow(x,5) - 96*gam2*pow(Lt,2)*pow(x,5) + 16*pow(Lt,4)*pow(x,5) + x*pow(eg + 2*eg*x,4) + x*pow(gam1 + 2*gam1*x,4) + 2*pow(eg + 2*eg*x,3)*(-1 + 2*gam1*x*(1 + 2*x) - 2*Lt*x*(1 + 2*x)) - 2*pow(gam1 + 2*gam1*x,3)*(1 + 2*Lt*x*(1 + 2*x)) + 6*pow(gam1 + 2*gam1*x,2)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 6*pow(eg + 2*eg*x,2)*(-1 + Lt - gam2*x + 2*Lt*x - 4*gam2*pow(x,2) - 4*gam2*pow(x,3) + x*pow(gam1 + 2*gam1*x,2) + x*pow(Lt + 2*Lt*x,2) - gam1*(1 + 2*x)*(1 + 2*Lt*x*(1 + 2*x))) + 2*gam1*(1 + 2*x)*(6*Lt*(1 + 2*x) - 3*pow(Lt + 2*Lt*x,2) - 2*x*pow(Lt + 2*Lt*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 2*(-3 + gam3*x*pow(1 + 2*x,3))) + 2*eg*(1 + 2*x)*(-6 + 6*Lt - 3*pow(Lt,2) + 2*gam3*x + 12*Lt*x - 12*pow(Lt,2)*x - 2*pow(Lt,3)*x + 12*gam3*pow(x,2) - 12*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 24*gam3*pow(x,3) - 24*pow(Lt,3)*pow(x,3) + 16*gam3*pow(x,4) - 16*pow(Lt,3)*pow(x,4) + 2*x*pow(gam1 + 2*gam1*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) - 3*pow(gam1 + 2*gam1*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 6*gam1*(1 + 2*x)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)))))/(gam0*pow(1 + 2*x,5)));
    SubtrD1.push_back((-32*egamexp*pow(1 - tau,1 + 2*x)*(-120 + 60*gam2 - 15*pow(gam2,2) - 20*gam3 + 5*gam4 + 120*Lt - 60*gam2*Lt + 20*gam3*Lt - 60*pow(Lt,2) + 30*gam2*pow(Lt,2) + 20*pow(Lt,3) - 5*pow(Lt,4) + 240*gam2*x - 120*pow(gam2,2)*x - 120*gam3*x - 20*gam2*gam3*x + 40*gam4*x + 2*gam5*x + 240*Lt*x - 360*gam2*Lt*x - 30*pow(gam2,2)*Lt*x + 160*gam3*Lt*x + 10*gam4*Lt*x - 240*pow(Lt,2)*x + 240*gam2*pow(Lt,2)*x + 20*gam3*pow(Lt,2)*x + 120*pow(Lt,3)*x + 20*gam2*pow(Lt,3)*x - 40*pow(Lt,4)*x - 2*pow(Lt,5)*x + 240*gam2*pow(x,2) - 360*pow(gam2,2)*pow(x,2) - 240*gam3*pow(x,2) - 200*gam2*gam3*pow(x,2) + 120*gam4*pow(x,2) + 20*gam5*pow(x,2) - 720*gam2*Lt*pow(x,2) - 300*pow(gam2,2)*Lt*pow(x,2) + 480*gam3*Lt*pow(x,2) + 100*gam4*Lt*pow(x,2) - 240*pow(Lt,2)*pow(x,2) + 720*gam2*pow(Lt,2)*pow(x,2) + 200*gam3*pow(Lt,2)*pow(x,2) + 240*pow(Lt,3)*pow(x,2) + 200*gam2*pow(Lt,3)*pow(x,2) - 120*pow(Lt,4)*pow(x,2) - 20*pow(Lt,5)*pow(x,2) - 480*pow(gam2,2)*pow(x,3) - 160*gam3*pow(x,3) - 800*gam2*gam3*pow(x,3) + 160*gam4*pow(x,3) + 80*gam5*pow(x,3) - 480*gam2*Lt*pow(x,3) - 1200*pow(gam2,2)*Lt*pow(x,3) + 640*gam3*Lt*pow(x,3) + 400*gam4*Lt*pow(x,3) + 960*gam2*pow(Lt,2)*pow(x,3) + 800*gam3*pow(Lt,2)*pow(x,3) + 160*pow(Lt,3)*pow(x,3) + 800*gam2*pow(Lt,3)*pow(x,3) - 160*pow(Lt,4)*pow(x,3) - 80*pow(Lt,5)*pow(x,3) - 240*pow(gam2,2)*pow(x,4) - 1600*gam2*gam3*pow(x,4) + 80*gam4*pow(x,4) + 160*gam5*pow(x,4) - 2400*pow(gam2,2)*Lt*pow(x,4) + 320*gam3*Lt*pow(x,4) + 800*gam4*Lt*pow(x,4) + 480*gam2*pow(Lt,2)*pow(x,4) + 1600*gam3*pow(Lt,2)*pow(x,4) + 1600*gam2*pow(Lt,3)*pow(x,4) - 80*pow(Lt,4)*pow(x,4) - 160*pow(Lt,5)*pow(x,4) - 1600*gam2*gam3*pow(x,5) + 160*gam5*pow(x,5) - 2400*pow(gam2,2)*Lt*pow(x,5) + 800*gam4*Lt*pow(x,5) + 1600*gam3*pow(Lt,2)*pow(x,5) + 1600*gam2*pow(Lt,3)*pow(x,5) - 160*pow(Lt,5)*pow(x,5) - 640*gam2*gam3*pow(x,6) + 64*gam5*pow(x,6) - 960*pow(gam2,2)*Lt*pow(x,6) + 320*gam4*Lt*pow(x,6) + 640*gam3*pow(Lt,2)*pow(x,6) + 640*gam2*pow(Lt,3)*pow(x,6) - 64*pow(Lt,5)*pow(x,6) + 2*x*pow(eg + 2*eg*x,5) + 2*x*pow(gam1 + 2*gam1*x,5) + 5*pow(eg + 2*eg*x,4)*(-1 + 2*gam1*x*(1 + 2*x) - 2*Lt*x*(1 + 2*x)) - 5*pow(gam1 + 2*gam1*x,4)*(1 + 2*Lt*x*(1 + 2*x)) + 20*pow(gam1 + 2*gam1*x,3)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 20*pow(eg + 2*eg*x,3)*(-1 + Lt - gam2*x + 2*Lt*x - 4*gam2*pow(x,2) - 4*gam2*pow(x,3) + x*pow(gam1 + 2*gam1*x,2) + x*pow(Lt + 2*Lt*x,2) - gam1*(1 + 2*x)*(1 + 2*Lt*x*(1 + 2*x))) + 10*pow(gam1 + 2*gam1*x,2)*(6*Lt*(1 + 2*x) - 3*pow(Lt + 2*Lt*x,2) - 2*x*pow(Lt + 2*Lt*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 2*(-3 + gam3*x*pow(1 + 2*x,3))) + 10*gam1*(1 + 2*x)*(-12 + 12*Lt - 6*pow(Lt,2) + 2*pow(Lt,3) - gam4*x + 24*Lt*x - 24*pow(Lt,2)*x + 12*pow(Lt,3)*x + pow(Lt,4)*x - 8*gam4*pow(x,2) - 24*pow(Lt,2)*pow(x,2) + 24*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 24*gam4*pow(x,3) + 16*pow(Lt,3)*pow(x,3) + 24*pow(Lt,4)*pow(x,3) - 32*gam4*pow(x,4) + 32*pow(Lt,4)*pow(x,4) - 16*gam4*pow(x,5) + 16*pow(Lt,4)*pow(x,5) + 3*pow(gam2,2)*x*pow(1 + 2*x,4) - 2*gam3*pow(1 + 2*x,3)*(1 + 2*Lt*x*(1 + 2*x)) - 6*gam2*pow(1 + 2*x,2)*(-1 + Lt + 2*Lt*x + x*pow(Lt + 2*Lt*x,2))) + 10*pow(eg + 2*eg*x,2)*(-6 + 6*Lt - 3*pow(Lt,2) + 2*gam3*x + 12*Lt*x - 12*pow(Lt,2)*x - 2*pow(Lt,3)*x + 12*gam3*pow(x,2) - 12*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 24*gam3*pow(x,3) - 24*pow(Lt,3)*pow(x,3) + 16*gam3*pow(x,4) - 16*pow(Lt,3)*pow(x,4) + 2*x*pow(gam1 + 2*gam1*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) - 3*pow(gam1 + 2*gam1*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 6*gam1*(1 + 2*x)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2))) + 10*eg*(1 + 2*x)*(-12 - 2*gam3 + 12*Lt - 6*pow(Lt,2) + 2*pow(Lt,3) - 12*gam3*x - gam4*x + 24*Lt*x - 4*gam3*Lt*x - 24*pow(Lt,2)*x + 12*pow(Lt,3)*x + pow(Lt,4)*x - 24*gam3*pow(x,2) - 8*gam4*pow(x,2) - 32*gam3*Lt*pow(x,2) - 24*pow(Lt,2)*pow(x,2) + 24*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 16*gam3*pow(x,3) - 24*gam4*pow(x,3) - 96*gam3*Lt*pow(x,3) + 16*pow(Lt,3)*pow(x,3) + 24*pow(Lt,4)*pow(x,3) - 32*gam4*pow(x,4) - 128*gam3*Lt*pow(x,4) + 32*pow(Lt,4)*pow(x,4) - 16*gam4*pow(x,5) - 64*gam3*Lt*pow(x,5) + 16*pow(Lt,4)*pow(x,5) + 3*pow(gam2,2)*x*pow(1 + 2*x,4) + x*pow(gam1 + 2*gam1*x,4) - 2*pow(gam1 + 2*gam1*x,3)*(1 + 2*Lt*x*(1 + 2*x)) - 6*gam2*pow(1 + 2*x,2)*(-1 + Lt + 2*Lt*x + x*pow(Lt + 2*Lt*x,2)) + 6*pow(gam1 + 2*gam1*x,2)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 2*gam1*(1 + 2*x)*(6*Lt*(1 + 2*x) - 3*pow(Lt + 2*Lt*x,2) - 2*x*pow(Lt + 2*Lt*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 2*(-3 + gam3*x*pow(1 + 2*x,3))))))/(gam0*pow(1 + 2*x,6)));
    SubtrD1.push_back((128*egamexp*pow(1 - tau,1 + 2*x)*(-360 + 180*gam2 - 45*pow(gam2,2) - 60*gam3 + 30*gam2*gam3 + 15*gam4 - 3*gam5 + 360*Lt - 180*gam2*Lt + 45*pow(gam2,2)*Lt + 60*gam3*Lt - 15*gam4*Lt - 180*pow(Lt,2) + 90*gam2*pow(Lt,2) - 30*gam3*pow(Lt,2) + 60*pow(Lt,3) - 30*gam2*pow(Lt,3) - 15*pow(Lt,4) + 3*pow(Lt,5) + 720*gam2*x - 360*pow(gam2,2)*x - 15*pow(gam2,3)*x - 360*gam3*x + 300*gam2*gam3*x + 10*pow(gam3,2)*x + 120*gam4*x + 15*gam2*gam4*x - 30*gam5*x - gam6*x + 720*Lt*x - 1080*gam2*Lt*x + 450*pow(gam2,2)*Lt*x + 480*gam3*Lt*x + 60*gam2*gam3*Lt*x - 150*gam4*Lt*x - 6*gam5*Lt*x - 720*pow(Lt,2)*x + 720*gam2*pow(Lt,2)*x + 45*pow(gam2,2)*pow(Lt,2)*x - 300*gam3*pow(Lt,2)*x - 15*gam4*pow(Lt,2)*x + 360*pow(Lt,3)*x - 300*gam2*pow(Lt,3)*x - 20*gam3*pow(Lt,3)*x - 120*pow(Lt,4)*x - 15*gam2*pow(Lt,4)*x + 30*pow(Lt,5)*x + pow(Lt,6)*x + 720*gam2*pow(x,2) - 1080*pow(gam2,2)*pow(x,2) - 180*pow(gam2,3)*pow(x,2) - 720*gam3*pow(x,2) + 1200*gam2*gam3*pow(x,2) + 120*pow(gam3,2)*pow(x,2) + 360*gam4*pow(x,2) + 180*gam2*gam4*pow(x,2) - 120*gam5*pow(x,2) - 12*gam6*pow(x,2) - 2160*gam2*Lt*pow(x,2) + 1800*pow(gam2,2)*Lt*pow(x,2) + 1440*gam3*Lt*pow(x,2) + 720*gam2*gam3*Lt*pow(x,2) - 600*gam4*Lt*pow(x,2) - 72*gam5*Lt*pow(x,2) - 720*pow(Lt,2)*pow(x,2) + 2160*gam2*pow(Lt,2)*pow(x,2) + 540*pow(gam2,2)*pow(Lt,2)*pow(x,2) - 1200*gam3*pow(Lt,2)*pow(x,2) - 180*gam4*pow(Lt,2)*pow(x,2) + 720*pow(Lt,3)*pow(x,2) - 1200*gam2*pow(Lt,3)*pow(x,2) - 240*gam3*pow(Lt,3)*pow(x,2) - 360*pow(Lt,4)*pow(x,2) - 180*gam2*pow(Lt,4)*pow(x,2) + 120*pow(Lt,5)*pow(x,2) + 12*pow(Lt,6)*pow(x,2) - 1440*pow(gam2,2)*pow(x,3) - 900*pow(gam2,3)*pow(x,3) - 480*gam3*pow(x,3) + 2400*gam2*gam3*pow(x,3) + 600*pow(gam3,2)*pow(x,3) + 480*gam4*pow(x,3) + 900*gam2*gam4*pow(x,3) - 240*gam5*pow(x,3) - 60*gam6*pow(x,3) - 1440*gam2*Lt*pow(x,3) + 3600*pow(gam2,2)*Lt*pow(x,3) + 1920*gam3*Lt*pow(x,3) + 3600*gam2*gam3*Lt*pow(x,3) - 1200*gam4*Lt*pow(x,3) - 360*gam5*Lt*pow(x,3) + 2880*gam2*pow(Lt,2)*pow(x,3) + 2700*pow(gam2,2)*pow(Lt,2)*pow(x,3) - 2400*gam3*pow(Lt,2)*pow(x,3) - 900*gam4*pow(Lt,2)*pow(x,3) + 480*pow(Lt,3)*pow(x,3) - 2400*gam2*pow(Lt,3)*pow(x,3) - 1200*gam3*pow(Lt,3)*pow(x,3) - 480*pow(Lt,4)*pow(x,3) - 900*gam2*pow(Lt,4)*pow(x,3) + 240*pow(Lt,5)*pow(x,3) + 60*pow(Lt,6)*pow(x,3) - 720*pow(gam2,2)*pow(x,4) - 2400*pow(gam2,3)*pow(x,4) + 2400*gam2*gam3*pow(x,4) + 1600*pow(gam3,2)*pow(x,4) + 240*gam4*pow(x,4) + 2400*gam2*gam4*pow(x,4) - 240*gam5*pow(x,4) - 160*gam6*pow(x,4) + 3600*pow(gam2,2)*Lt*pow(x,4) + 960*gam3*Lt*pow(x,4) + 9600*gam2*gam3*Lt*pow(x,4) - 1200*gam4*Lt*pow(x,4) - 960*gam5*Lt*pow(x,4) + 1440*gam2*pow(Lt,2)*pow(x,4) + 7200*pow(gam2,2)*pow(Lt,2)*pow(x,4) - 2400*gam3*pow(Lt,2)*pow(x,4) - 2400*gam4*pow(Lt,2)*pow(x,4) - 2400*gam2*pow(Lt,3)*pow(x,4) - 3200*gam3*pow(Lt,3)*pow(x,4) - 240*pow(Lt,4)*pow(x,4) - 2400*gam2*pow(Lt,4)*pow(x,4) + 240*pow(Lt,5)*pow(x,4) + 160*pow(Lt,6)*pow(x,4) - 3600*pow(gam2,3)*pow(x,5) + 960*gam2*gam3*pow(x,5) + 2400*pow(gam3,2)*pow(x,5) + 3600*gam2*gam4*pow(x,5) - 96*gam5*pow(x,5) - 240*gam6*pow(x,5) + 1440*pow(gam2,2)*Lt*pow(x,5) + 14400*gam2*gam3*Lt*pow(x,5) - 480*gam4*Lt*pow(x,5) - 1440*gam5*Lt*pow(x,5) + 10800*pow(gam2,2)*pow(Lt,2)*pow(x,5) - 960*gam3*pow(Lt,2)*pow(x,5) - 3600*gam4*pow(Lt,2)*pow(x,5) - 960*gam2*pow(Lt,3)*pow(x,5) - 4800*gam3*pow(Lt,3)*pow(x,5) - 3600*gam2*pow(Lt,4)*pow(x,5) + 96*pow(Lt,5)*pow(x,5) + 240*pow(Lt,6)*pow(x,5) - 2880*pow(gam2,3)*pow(x,6) + 1920*pow(gam3,2)*pow(x,6) + 2880*gam2*gam4*pow(x,6) - 192*gam6*pow(x,6) + 11520*gam2*gam3*Lt*pow(x,6) - 1152*gam5*Lt*pow(x,6) + 8640*pow(gam2,2)*pow(Lt,2)*pow(x,6) - 2880*gam4*pow(Lt,2)*pow(x,6) - 3840*gam3*pow(Lt,3)*pow(x,6) - 2880*gam2*pow(Lt,4)*pow(x,6) + 192*pow(Lt,6)*pow(x,6) - 960*pow(gam2,3)*pow(x,7) + 640*pow(gam3,2)*pow(x,7) + 960*gam2*gam4*pow(x,7) - 64*gam6*pow(x,7) + 3840*gam2*gam3*Lt*pow(x,7) - 384*gam5*Lt*pow(x,7) + 2880*pow(gam2,2)*pow(Lt,2)*pow(x,7) - 960*gam4*pow(Lt,2)*pow(x,7) - 1280*gam3*pow(Lt,3)*pow(x,7) - 960*gam2*pow(Lt,4)*pow(x,7) + 64*pow(Lt,6)*pow(x,7) + x*pow(eg + 2*eg*x,6) + x*pow(gam1 + 2*gam1*x,6) + 3*pow(eg + 2*eg*x,5)*(-1 + 2*gam1*x*(1 + 2*x) - 2*Lt*x*(1 + 2*x)) - 3*pow(gam1 + 2*gam1*x,5)*(1 + 2*Lt*x*(1 + 2*x)) + 15*pow(gam1 + 2*gam1*x,4)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 15*pow(eg + 2*eg*x,4)*(-1 + Lt - gam2*x + 2*Lt*x - 4*gam2*pow(x,2) - 4*gam2*pow(x,3) + x*pow(gam1 + 2*gam1*x,2) + x*pow(Lt + 2*Lt*x,2) - gam1*(1 + 2*x)*(1 + 2*Lt*x*(1 + 2*x))) + 10*pow(gam1 + 2*gam1*x,3)*(6*Lt*(1 + 2*x) - 3*pow(Lt + 2*Lt*x,2) - 2*x*pow(Lt + 2*Lt*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 2*(-3 + gam3*x*pow(1 + 2*x,3))) + 15*pow(gam1 + 2*gam1*x,2)*(-12 + 12*Lt - 6*pow(Lt,2) + 2*pow(Lt,3) - gam4*x + 24*Lt*x - 24*pow(Lt,2)*x + 12*pow(Lt,3)*x + pow(Lt,4)*x - 8*gam4*pow(x,2) - 24*pow(Lt,2)*pow(x,2) + 24*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 24*gam4*pow(x,3) + 16*pow(Lt,3)*pow(x,3) + 24*pow(Lt,4)*pow(x,3) - 32*gam4*pow(x,4) + 32*pow(Lt,4)*pow(x,4) - 16*gam4*pow(x,5) + 16*pow(Lt,4)*pow(x,5) + 3*pow(gam2,2)*x*pow(1 + 2*x,4) - 2*gam3*pow(1 + 2*x,3)*(1 + 2*Lt*x*(1 + 2*x)) - 6*gam2*pow(1 + 2*x,2)*(-1 + Lt + 2*Lt*x + x*pow(Lt + 2*Lt*x,2))) + 10*pow(eg + 2*eg*x,3)*(-6 + 6*Lt - 3*pow(Lt,2) + 2*gam3*x + 12*Lt*x - 12*pow(Lt,2)*x - 2*pow(Lt,3)*x + 12*gam3*pow(x,2) - 12*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 24*gam3*pow(x,3) - 24*pow(Lt,3)*pow(x,3) + 16*gam3*pow(x,4) - 16*pow(Lt,3)*pow(x,4) + 2*x*pow(gam1 + 2*gam1*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) - 3*pow(gam1 + 2*gam1*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 6*gam1*(1 + 2*x)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2))) - 3*gam1*(1 + 2*x)*(120 - 5*gam4 - 120*Lt + 60*pow(Lt,2) - 20*pow(Lt,3) + 5*pow(Lt,4) - 40*gam4*x - 2*gam5*x - 240*Lt*x - 10*gam4*Lt*x + 240*pow(Lt,2)*x - 120*pow(Lt,3)*x + 40*pow(Lt,4)*x + 2*pow(Lt,5)*x - 120*gam4*pow(x,2) - 20*gam5*pow(x,2) - 100*gam4*Lt*pow(x,2) + 240*pow(Lt,2)*pow(x,2) - 240*pow(Lt,3)*pow(x,2) + 120*pow(Lt,4)*pow(x,2) + 20*pow(Lt,5)*pow(x,2) - 160*gam4*pow(x,3) - 80*gam5*pow(x,3) - 400*gam4*Lt*pow(x,3) - 160*pow(Lt,3)*pow(x,3) + 160*pow(Lt,4)*pow(x,3) + 80*pow(Lt,5)*pow(x,3) - 80*gam4*pow(x,4) - 160*gam5*pow(x,4) - 800*gam4*Lt*pow(x,4) + 80*pow(Lt,4)*pow(x,4) + 160*pow(Lt,5)*pow(x,4) - 160*gam5*pow(x,5) - 800*gam4*Lt*pow(x,5) + 160*pow(Lt,5)*pow(x,5) - 64*gam5*pow(x,6) - 320*gam4*Lt*pow(x,6) + 64*pow(Lt,5)*pow(x,6) + 15*pow(gam2,2)*pow(1 + 2*x,4)*(1 + 2*Lt*x*(1 + 2*x)) - 20*gam3*pow(1 + 2*x,3)*(-1 + Lt + 2*Lt*x + x*pow(Lt + 2*Lt*x,2)) - 10*gam2*pow(1 + 2*x,2)*(-6*Lt*(1 + 2*x) + 3*pow(Lt + 2*Lt*x,2) + 2*x*pow(Lt + 2*Lt*x,3) - 2*(-3 + gam3*x*pow(1 + 2*x,3)))) + 15*pow(eg + 2*eg*x,2)*(-12 - 2*gam3 + 12*Lt - 6*pow(Lt,2) + 2*pow(Lt,3) - 12*gam3*x - gam4*x + 24*Lt*x - 4*gam3*Lt*x - 24*pow(Lt,2)*x + 12*pow(Lt,3)*x + pow(Lt,4)*x - 24*gam3*pow(x,2) - 8*gam4*pow(x,2) - 32*gam3*Lt*pow(x,2) - 24*pow(Lt,2)*pow(x,2) + 24*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 16*gam3*pow(x,3) - 24*gam4*pow(x,3) - 96*gam3*Lt*pow(x,3) + 16*pow(Lt,3)*pow(x,3) + 24*pow(Lt,4)*pow(x,3) - 32*gam4*pow(x,4) - 128*gam3*Lt*pow(x,4) + 32*pow(Lt,4)*pow(x,4) - 16*gam4*pow(x,5) - 64*gam3*Lt*pow(x,5) + 16*pow(Lt,4)*pow(x,5) + 3*pow(gam2,2)*x*pow(1 + 2*x,4) + x*pow(gam1 + 2*gam1*x,4) - 2*pow(gam1 + 2*gam1*x,3)*(1 + 2*Lt*x*(1 + 2*x)) - 6*gam2*pow(1 + 2*x,2)*(-1 + Lt + 2*Lt*x + x*pow(Lt + 2*Lt*x,2)) + 6*pow(gam1 + 2*gam1*x,2)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 2*gam1*(1 + 2*x)*(6*Lt*(1 + 2*x) - 3*pow(Lt + 2*Lt*x,2) - 2*x*pow(Lt + 2*Lt*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 2*(-3 + gam3*x*pow(1 + 2*x,3)))) + 3*eg*(1 + 2*x)*(-120 - 20*gam3 + 5*gam4 + 120*Lt + 20*gam3*Lt - 60*pow(Lt,2) + 20*pow(Lt,3) - 5*pow(Lt,4) - 120*gam3*x + 40*gam4*x + 2*gam5*x + 240*Lt*x + 160*gam3*Lt*x + 10*gam4*Lt*x - 240*pow(Lt,2)*x + 20*gam3*pow(Lt,2)*x + 120*pow(Lt,3)*x - 40*pow(Lt,4)*x - 2*pow(Lt,5)*x - 240*gam3*pow(x,2) + 120*gam4*pow(x,2) + 20*gam5*pow(x,2) + 480*gam3*Lt*pow(x,2) + 100*gam4*Lt*pow(x,2) - 240*pow(Lt,2)*pow(x,2) + 200*gam3*pow(Lt,2)*pow(x,2) + 240*pow(Lt,3)*pow(x,2) - 120*pow(Lt,4)*pow(x,2) - 20*pow(Lt,5)*pow(x,2) - 160*gam3*pow(x,3) + 160*gam4*pow(x,3) + 80*gam5*pow(x,3) + 640*gam3*Lt*pow(x,3) + 400*gam4*Lt*pow(x,3) + 800*gam3*pow(Lt,2)*pow(x,3) + 160*pow(Lt,3)*pow(x,3) - 160*pow(Lt,4)*pow(x,3) - 80*pow(Lt,5)*pow(x,3) + 80*gam4*pow(x,4) + 160*gam5*pow(x,4) + 320*gam3*Lt*pow(x,4) + 800*gam4*Lt*pow(x,4) + 1600*gam3*pow(Lt,2)*pow(x,4) - 80*pow(Lt,4)*pow(x,4) - 160*pow(Lt,5)*pow(x,4) + 160*gam5*pow(x,5) + 800*gam4*Lt*pow(x,5) + 1600*gam3*pow(Lt,2)*pow(x,5) - 160*pow(Lt,5)*pow(x,5) + 64*gam5*pow(x,6) + 320*gam4*Lt*pow(x,6) + 640*gam3*pow(Lt,2)*pow(x,6) - 64*pow(Lt,5)*pow(x,6) + 2*x*pow(gam1 + 2*gam1*x,5) - 15*pow(gam2,2)*pow(1 + 2*x,4)*(1 + 2*Lt*x*(1 + 2*x)) - 5*pow(gam1 + 2*gam1*x,4)*(1 + 2*Lt*x*(1 + 2*x)) + 20*pow(gam1 + 2*gam1*x,3)*(-1 + Lt + 2*Lt*x - gam2*x*pow(1 + 2*x,2) + x*pow(Lt + 2*Lt*x,2)) + 10*gam2*pow(1 + 2*x,2)*(-6*Lt*(1 + 2*x) + 3*pow(Lt + 2*Lt*x,2) + 2*x*pow(Lt + 2*Lt*x,3) - 2*(-3 + gam3*x*pow(1 + 2*x,3))) + 10*pow(gam1 + 2*gam1*x,2)*(6*Lt*(1 + 2*x) - 3*pow(Lt + 2*Lt*x,2) - 2*x*pow(Lt + 2*Lt*x,3) + 3*gam2*pow(1 + 2*x,2)*(1 + 2*Lt*x*(1 + 2*x)) + 2*(-3 + gam3*x*pow(1 + 2*x,3))) + 10*gam1*(1 + 2*x)*(-12 + 12*Lt - 6*pow(Lt,2) + 2*pow(Lt,3) - gam4*x + 24*Lt*x - 24*pow(Lt,2)*x + 12*pow(Lt,3)*x + pow(Lt,4)*x - 8*gam4*pow(x,2) - 24*pow(Lt,2)*pow(x,2) + 24*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 24*gam4*pow(x,3) + 16*pow(Lt,3)*pow(x,3) + 24*pow(Lt,4)*pow(x,3) - 32*gam4*pow(x,4) + 32*pow(Lt,4)*pow(x,4) - 16*gam4*pow(x,5) + 16*pow(Lt,4)*pow(x,5) + 3*pow(gam2,2)*x*pow(1 + 2*x,4) - 2*gam3*pow(1 + 2*x,3)*(1 + 2*Lt*x*(1 + 2*x)) - 6*gam2*pow(1 + 2*x,2)*(-1 + Lt + 2*Lt*x + x*pow(Lt + 2*Lt*x,2))))))/(gam0*pow(1 + 2*x,7)));
    
    
    SubtrD2.push_back((egamexp*pow(1 - tau,1 + 2*x)*x*(-1 + 2*x))/(gam0 + 2*gam0*x));
    SubtrD2.push_back((egamexp*pow(1 - tau,2*x)*(-1 + tau)*(1 - 2*(2 + eg + gam1 - Lt)*x - 4*pow(x,2) + 8*(eg + gam1 - Lt)*pow(x,3)))/(gam0*pow(1 + 2*x,2)));
    SubtrD2.push_back((4*egamexp*pow(1 - tau,1 + 2*x)*(2 - Lt + gam2*x + 2*Lt*x - pow(Lt,2)*x + 2*gam2*pow(x,2) + 12*Lt*pow(x,2) - 2*pow(Lt,2)*pow(x,2) - 4*gam2*pow(x,3) + 8*Lt*pow(x,3) + 4*pow(Lt,2)*pow(x,3) - 8*gam2*pow(x,4) + 8*pow(Lt,2)*pow(x,4) + x*(-1 + 2*x)*pow(eg + 2*eg*x,2) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,2) + eg*(1 + 2*x)*(1 - 2*(2 + gam1 - Lt)*x - 4*pow(x,2) + 8*(gam1 - Lt)*pow(x,3)) - gam1*(1 + 2*x)*(-1 + 4*x - 2*Lt*x + 4*pow(x,2) + 8*Lt*pow(x,3))))/(gam0*pow(1 + 2*x,3)));
    SubtrD2.push_back((-4*egamexp*pow(1 - tau,1 + 2*x)*(12 - 3*gam2 - 12*Lt + 3*pow(Lt,2) - 2*gam3*x - 24*Lt*x - 6*gam2*Lt*x + 2*pow(Lt,3)*x + 48*gam2*pow(x,2) - 8*gam3*pow(x,2) - 24*gam2*Lt*pow(x,2) - 48*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) + 96*gam2*pow(x,3) - 96*pow(Lt,2)*pow(x,3) + 48*gam2*pow(x,4) + 32*gam3*pow(x,4) + 96*gam2*Lt*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 32*pow(Lt,3)*pow(x,4) + 32*gam3*pow(x,5) + 96*gam2*Lt*pow(x,5) - 32*pow(Lt,3)*pow(x,5) + 2*x*(-1 + 2*x)*pow(eg + 2*eg*x,3) + 2*x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,3) + 3*pow(eg + 2*eg*x,2)*(1 - 2*(2 + gam1 - Lt)*x - 4*pow(x,2) + 8*(gam1 - Lt)*pow(x,3)) - 3*pow(gam1 + 2*gam1*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 6*gam1*(1 + 2*x)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 6*eg*(1 + 2*x)*(2 + gam2*x + 2*gam2*pow(x,2) - 4*gam2*pow(x,3) - 8*gam2*pow(x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)) - gam1*(1 + 2*x)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)))))/(gam0*pow(1 + 2*x,4)));
    SubtrD2.push_back((16*egamexp*pow(1 - tau,1 + 2*x)*(24 - 12*gam2 + 2*gam3 - 24*Lt + 6*gam2*Lt + 12*pow(Lt,2) - 2*pow(Lt,3) - 48*gam2*x - 3*pow(gam2,2)*x + 4*gam3*x + gam4*x - 48*Lt*x + 12*gam2*Lt*x + 4*gam3*Lt*x + 48*pow(Lt,2)*x + 6*gam2*pow(Lt,2)*x - 4*pow(Lt,3)*x - pow(Lt,4)*x - 48*gam2*pow(x,2) - 18*pow(gam2,2)*pow(x,2) - 32*gam3*pow(x,2) + 6*gam4*pow(x,2) - 96*gam2*Lt*pow(x,2) + 24*gam3*Lt*pow(x,2) + 48*pow(Lt,2)*pow(x,2) + 36*gam2*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) - 24*pow(gam2,2)*pow(x,3) - 128*gam3*pow(x,3) + 8*gam4*pow(x,3) - 384*gam2*Lt*pow(x,3) + 32*gam3*Lt*pow(x,3) + 48*gam2*pow(Lt,2)*pow(x,3) + 128*pow(Lt,3)*pow(x,3) - 8*pow(Lt,4)*pow(x,3) + 48*pow(gam2,2)*pow(x,4) - 160*gam3*pow(x,4) - 16*gam4*pow(x,4) - 480*gam2*Lt*pow(x,4) - 64*gam3*Lt*pow(x,4) - 96*gam2*pow(Lt,2)*pow(x,4) + 160*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) + 144*pow(gam2,2)*pow(x,5) - 64*gam3*pow(x,5) - 48*gam4*pow(x,5) - 192*gam2*Lt*pow(x,5) - 192*gam3*Lt*pow(x,5) - 288*gam2*pow(Lt,2)*pow(x,5) + 64*pow(Lt,3)*pow(x,5) + 48*pow(Lt,4)*pow(x,5) + 96*pow(gam2,2)*pow(x,6) - 32*gam4*pow(x,6) - 128*gam3*Lt*pow(x,6) - 192*gam2*pow(Lt,2)*pow(x,6) + 32*pow(Lt,4)*pow(x,6) + x*(-1 + 2*x)*pow(eg + 2*eg*x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,4) + 2*pow(eg + 2*eg*x,3)*(1 - 2*(2 + gam1 - Lt)*x - 4*pow(x,2) + 8*(gam1 - Lt)*pow(x,3)) - 2*pow(gam1 + 2*gam1*x,3)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 6*pow(gam1 + 2*gam1*x,2)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 6*pow(eg + 2*eg*x,2)*(2 + gam2*x + 2*gam2*pow(x,2) - 4*gam2*pow(x,3) - 8*gam2*pow(x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)) - gam1*(1 + 2*x)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 2*gam1*(1 + 2*x)*(12 - 2*gam3*x - 8*gam3*pow(x,2) + 32*gam3*pow(x,4) + 32*gam3*pow(x,5) - 12*Lt*(1 + 2*x) - 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) - 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2)) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 2*eg*(1 + 2*x)*(12 - 12*Lt + 3*pow(Lt,2) - 2*gam3*x - 24*Lt*x + 2*pow(Lt,3)*x - 8*gam3*pow(x,2) - 48*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) - 96*pow(Lt,2)*pow(x,3) + 32*gam3*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 32*pow(Lt,3)*pow(x,4) + 32*gam3*pow(x,5) - 32*pow(Lt,3)*pow(x,5) + 2*x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,3) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 3*pow(gam1 + 2*gam1*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 6*gam1*(1 + 2*x)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))))))/(gam0*pow(1 + 2*x,5)));
    SubtrD2.push_back((-16*egamexp*pow(1 - tau,1 + 2*x)*(240 - 120*gam2 + 15*pow(gam2,2) + 40*gam3 - 5*gam4 - 240*Lt + 120*gam2*Lt - 20*gam3*Lt + 120*pow(Lt,2) - 30*gam2*pow(Lt,2) - 40*pow(Lt,3) + 5*pow(Lt,4) - 480*gam2*x + 60*pow(gam2,2)*x + 240*gam3*x + 20*gam2*gam3*x - 20*gam4*x - 2*gam5*x - 480*Lt*x + 720*gam2*Lt*x + 30*pow(gam2,2)*Lt*x - 80*gam3*Lt*x - 10*gam4*Lt*x + 480*pow(Lt,2)*x - 120*gam2*pow(Lt,2)*x - 20*gam3*pow(Lt,2)*x - 240*pow(Lt,3)*x - 20*gam2*pow(Lt,3)*x + 20*pow(Lt,4)*x + 2*pow(Lt,5)*x - 480*gam2*pow(x,2) - 180*pow(gam2,2)*pow(x,2) + 480*gam3*pow(x,2) + 160*gam2*gam3*pow(x,2) + 60*gam4*pow(x,2) - 16*gam5*pow(x,2) + 1440*gam2*Lt*pow(x,2) + 240*pow(gam2,2)*Lt*pow(x,2) + 240*gam3*Lt*pow(x,2) - 80*gam4*Lt*pow(x,2) + 480*pow(Lt,2)*pow(x,2) + 360*gam2*pow(Lt,2)*pow(x,2) - 160*gam3*pow(Lt,2)*pow(x,2) - 480*pow(Lt,3)*pow(x,2) - 160*gam2*pow(Lt,3)*pow(x,2) - 60*pow(Lt,4)*pow(x,2) + 16*pow(Lt,5)*pow(x,2) - 1440*pow(gam2,2)*pow(x,3) + 320*gam3*pow(x,3) + 400*gam2*gam3*pow(x,3) + 480*gam4*pow(x,3) - 40*gam5*pow(x,3) + 960*gam2*Lt*pow(x,3) + 600*pow(gam2,2)*Lt*pow(x,3) + 1920*gam3*Lt*pow(x,3) - 200*gam4*Lt*pow(x,3) + 2880*gam2*pow(Lt,2)*pow(x,3) - 400*gam3*pow(Lt,2)*pow(x,3) - 320*pow(Lt,3)*pow(x,3) - 400*gam2*pow(Lt,3)*pow(x,3) - 480*pow(Lt,4)*pow(x,3) + 40*pow(Lt,5)*pow(x,3) - 3120*pow(gam2,2)*pow(x,4) + 1040*gam4*pow(x,4) + 4160*gam3*Lt*pow(x,4) + 6240*gam2*pow(Lt,2)*pow(x,4) - 1040*pow(Lt,4)*pow(x,4) - 2880*pow(gam2,2)*pow(x,5) - 1600*gam2*gam3*pow(x,5) + 960*gam4*pow(x,5) + 160*gam5*pow(x,5) - 2400*pow(gam2,2)*Lt*pow(x,5) + 3840*gam3*Lt*pow(x,5) + 800*gam4*Lt*pow(x,5) + 5760*gam2*pow(Lt,2)*pow(x,5) + 1600*gam3*pow(Lt,2)*pow(x,5) + 1600*gam2*pow(Lt,3)*pow(x,5) - 960*pow(Lt,4)*pow(x,5) - 160*pow(Lt,5)*pow(x,5) - 960*pow(gam2,2)*pow(x,6) - 2560*gam2*gam3*pow(x,6) + 320*gam4*pow(x,6) + 256*gam5*pow(x,6) - 3840*pow(gam2,2)*Lt*pow(x,6) + 1280*gam3*Lt*pow(x,6) + 1280*gam4*Lt*pow(x,6) + 1920*gam2*pow(Lt,2)*pow(x,6) + 2560*gam3*pow(Lt,2)*pow(x,6) + 2560*gam2*pow(Lt,3)*pow(x,6) - 320*pow(Lt,4)*pow(x,6) - 256*pow(Lt,5)*pow(x,6) - 1280*gam2*gam3*pow(x,7) + 128*gam5*pow(x,7) - 1920*pow(gam2,2)*Lt*pow(x,7) + 640*gam4*Lt*pow(x,7) + 1280*gam3*pow(Lt,2)*pow(x,7) + 1280*gam2*pow(Lt,3)*pow(x,7) - 128*pow(Lt,5)*pow(x,7) + 2*x*(-1 + 2*x)*pow(eg + 2*eg*x,5) + 2*x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,5) + 5*pow(eg + 2*eg*x,4)*(1 - 2*(2 + gam1 - Lt)*x - 4*pow(x,2) + 8*(gam1 - Lt)*pow(x,3)) - 5*pow(gam1 + 2*gam1*x,4)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 20*pow(gam1 + 2*gam1*x,3)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 20*pow(eg + 2*eg*x,3)*(2 + gam2*x + 2*gam2*pow(x,2) - 4*gam2*pow(x,3) - 8*gam2*pow(x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)) - gam1*(1 + 2*x)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 10*pow(gam1 + 2*gam1*x,2)*(12 - 2*gam3*x - 8*gam3*pow(x,2) + 32*gam3*pow(x,4) + 32*gam3*pow(x,5) - 12*Lt*(1 + 2*x) - 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) - 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2)) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 10*gam1*(1 + 2*x)*(24 - 24*Lt + 12*pow(Lt,2) - 2*pow(Lt,3) + gam4*x - 48*Lt*x + 48*pow(Lt,2)*x - 4*pow(Lt,3)*x - pow(Lt,4)*x + 6*gam4*pow(x,2) + 48*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) + 8*gam4*pow(x,3) + 128*pow(Lt,3)*pow(x,3) - 8*pow(Lt,4)*pow(x,3) - 16*gam4*pow(x,4) + 160*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 48*gam4*pow(x,5) + 64*pow(Lt,3)*pow(x,5) + 48*pow(Lt,4)*pow(x,5) - 32*gam4*pow(x,6) + 32*pow(Lt,4)*pow(x,6) + 3*pow(gam2,2)*x*(-1 + 2*x)*pow(1 + 2*x,4) - 2*gam3*pow(1 + 2*x,3)*(-1 + 4*x - 2*Lt*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 6*gam2*pow(1 + 2*x,2)*(2 + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)))) + 10*pow(eg + 2*eg*x,2)*(12 - 12*Lt + 3*pow(Lt,2) - 2*gam3*x - 24*Lt*x + 2*pow(Lt,3)*x - 8*gam3*pow(x,2) - 48*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) - 96*pow(Lt,2)*pow(x,3) + 32*gam3*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 32*pow(Lt,3)*pow(x,4) + 32*gam3*pow(x,5) - 32*pow(Lt,3)*pow(x,5) + 2*x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,3) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 3*pow(gam1 + 2*gam1*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 6*gam1*(1 + 2*x)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)))) + 10*eg*(1 + 2*x)*(24 + 2*gam3 - 24*Lt + 12*pow(Lt,2) - 2*pow(Lt,3) + 4*gam3*x + gam4*x - 48*Lt*x + 4*gam3*Lt*x + 48*pow(Lt,2)*x - 4*pow(Lt,3)*x - pow(Lt,4)*x - 32*gam3*pow(x,2) + 6*gam4*pow(x,2) + 24*gam3*Lt*pow(x,2) + 48*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) - 128*gam3*pow(x,3) + 8*gam4*pow(x,3) + 32*gam3*Lt*pow(x,3) + 128*pow(Lt,3)*pow(x,3) - 8*pow(Lt,4)*pow(x,3) - 160*gam3*pow(x,4) - 16*gam4*pow(x,4) - 64*gam3*Lt*pow(x,4) + 160*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 64*gam3*pow(x,5) - 48*gam4*pow(x,5) - 192*gam3*Lt*pow(x,5) + 64*pow(Lt,3)*pow(x,5) + 48*pow(Lt,4)*pow(x,5) - 32*gam4*pow(x,6) - 128*gam3*Lt*pow(x,6) + 32*pow(Lt,4)*pow(x,6) + 3*pow(gam2,2)*x*(-1 + 2*x)*pow(1 + 2*x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,4) - 2*pow(gam1 + 2*gam1*x,3)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 6*gam2*pow(1 + 2*x,2)*(2 + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 6*pow(gam1 + 2*gam1*x,2)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 2*gam1*(1 + 2*x)*(12 - 2*gam3*x - 8*gam3*pow(x,2) + 32*gam3*pow(x,4) + 32*gam3*pow(x,5) - 12*Lt*(1 + 2*x) - 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) - 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2)) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))))))/(gam0*pow(1 + 2*x,6)));
    SubtrD2.push_back((64*egamexp*pow(1 - tau,1 + 2*x)*(720 - 360*gam2 + 90*pow(gam2,2) + 120*gam3 - 30*gam2*gam3 - 30*gam4 + 3*gam5 - 720*Lt + 360*gam2*Lt - 45*pow(gam2,2)*Lt - 120*gam3*Lt + 15*gam4*Lt + 360*pow(Lt,2) - 180*gam2*pow(Lt,2) + 30*gam3*pow(Lt,2) - 120*pow(Lt,3) + 30*gam2*pow(Lt,3) + 30*pow(Lt,4) - 3*pow(Lt,5) - 1440*gam2*x + 720*pow(gam2,2)*x + 15*pow(gam2,3)*x + 720*gam3*x - 180*gam2*gam3*x - 10*pow(gam3,2)*x - 240*gam4*x - 15*gam2*gam4*x + 18*gam5*x + gam6*x - 1440*Lt*x + 2160*gam2*Lt*x - 270*pow(gam2,2)*Lt*x - 960*gam3*Lt*x - 60*gam2*gam3*Lt*x + 90*gam4*Lt*x + 6*gam5*Lt*x + 1440*pow(Lt,2)*x - 1440*gam2*pow(Lt,2)*x - 45*pow(gam2,2)*pow(Lt,2)*x + 180*gam3*pow(Lt,2)*x + 15*gam4*pow(Lt,2)*x - 720*pow(Lt,3)*x + 180*gam2*pow(Lt,3)*x + 20*gam3*pow(Lt,3)*x + 240*pow(Lt,4)*x + 15*gam2*pow(Lt,4)*x - 18*pow(Lt,5)*x - pow(Lt,6)*x - 1440*gam2*pow(x,2) + 2160*pow(gam2,2)*pow(x,2) + 150*pow(gam2,3)*pow(x,2) + 1440*gam3*pow(x,2) + 120*gam2*gam3*pow(x,2) - 100*pow(gam3,2)*pow(x,2) - 720*gam4*pow(x,2) - 150*gam2*gam4*pow(x,2) - 12*gam5*pow(x,2) + 10*gam6*pow(x,2) + 4320*gam2*Lt*pow(x,2) + 180*pow(gam2,2)*Lt*pow(x,2) - 2880*gam3*Lt*pow(x,2) - 600*gam2*gam3*Lt*pow(x,2) - 60*gam4*Lt*pow(x,2) + 60*gam5*Lt*pow(x,2) + 1440*pow(Lt,2)*pow(x,2) - 4320*gam2*pow(Lt,2)*pow(x,2) - 450*pow(gam2,2)*pow(Lt,2)*pow(x,2) - 120*gam3*pow(Lt,2)*pow(x,2) + 150*gam4*pow(Lt,2)*pow(x,2) - 1440*pow(Lt,3)*pow(x,2) - 120*gam2*pow(Lt,3)*pow(x,2) + 200*gam3*pow(Lt,3)*pow(x,2) + 720*pow(Lt,4)*pow(x,2) + 150*gam2*pow(Lt,4)*pow(x,2) + 12*pow(Lt,5)*pow(x,2) - 10*pow(Lt,6)*pow(x,2) + 2880*pow(gam2,2)*pow(x,3) + 540*pow(gam2,3)*pow(x,3) + 960*gam3*pow(x,3) + 3600*gam2*gam3*pow(x,3) - 360*pow(gam3,2)*pow(x,3) - 960*gam4*pow(x,3) - 540*gam2*gam4*pow(x,3) - 360*gam5*pow(x,3) + 36*gam6*pow(x,3) + 2880*gam2*Lt*pow(x,3) + 5400*pow(gam2,2)*Lt*pow(x,3) - 3840*gam3*Lt*pow(x,3) - 2160*gam2*gam3*Lt*pow(x,3) - 1800*gam4*Lt*pow(x,3) + 216*gam5*Lt*pow(x,3) - 5760*gam2*pow(Lt,2)*pow(x,3) - 1620*pow(gam2,2)*pow(Lt,2)*pow(x,3) - 3600*gam3*pow(Lt,2)*pow(x,3) + 540*gam4*pow(Lt,2)*pow(x,3) - 960*pow(Lt,3)*pow(x,3) - 3600*gam2*pow(Lt,3)*pow(x,3) + 720*gam3*pow(Lt,3)*pow(x,3) + 960*pow(Lt,4)*pow(x,3) + 540*gam2*pow(Lt,4)*pow(x,3) + 360*pow(Lt,5)*pow(x,3) - 36*pow(Lt,6)*pow(x,3) + 1440*pow(gam2,2)*pow(x,4) + 600*pow(gam2,3)*pow(x,4) + 12000*gam2*gam3*pow(x,4) - 400*pow(gam3,2)*pow(x,4) - 480*gam4*pow(x,4) - 600*gam2*gam4*pow(x,4) - 1200*gam5*pow(x,4) + 40*gam6*pow(x,4) + 18000*pow(gam2,2)*Lt*pow(x,4) - 1920*gam3*Lt*pow(x,4) - 2400*gam2*gam3*Lt*pow(x,4) - 6000*gam4*Lt*pow(x,4) + 240*gam5*Lt*pow(x,4) - 2880*gam2*pow(Lt,2)*pow(x,4) - 1800*pow(gam2,2)*pow(Lt,2)*pow(x,4) - 12000*gam3*pow(Lt,2)*pow(x,4) + 600*gam4*pow(Lt,2)*pow(x,4) - 12000*gam2*pow(Lt,3)*pow(x,4) + 800*gam3*pow(Lt,3)*pow(x,4) + 480*pow(Lt,4)*pow(x,4) + 600*gam2*pow(Lt,4)*pow(x,4) + 1200*pow(Lt,5)*pow(x,4) - 40*pow(Lt,6)*pow(x,4) - 1200*pow(gam2,3)*pow(x,5) + 18240*gam2*gam3*pow(x,5) + 800*pow(gam3,2)*pow(x,5) + 1200*gam2*gam4*pow(x,5) - 1824*gam5*pow(x,5) - 80*gam6*pow(x,5) + 27360*pow(gam2,2)*Lt*pow(x,5) + 4800*gam2*gam3*Lt*pow(x,5) - 9120*gam4*Lt*pow(x,5) - 480*gam5*Lt*pow(x,5) + 3600*pow(gam2,2)*pow(Lt,2)*pow(x,5) - 18240*gam3*pow(Lt,2)*pow(x,5) - 1200*gam4*pow(Lt,2)*pow(x,5) - 18240*gam2*pow(Lt,3)*pow(x,5) - 1600*gam3*pow(Lt,3)*pow(x,5) - 1200*gam2*pow(Lt,4)*pow(x,5) + 1824*pow(Lt,5)*pow(x,5) + 80*pow(Lt,6)*pow(x,5) - 4320*pow(gam2,3)*pow(x,6) + 13440*gam2*gam3*pow(x,6) + 2880*pow(gam3,2)*pow(x,6) + 4320*gam2*gam4*pow(x,6) - 1344*gam5*pow(x,6) - 288*gam6*pow(x,6) + 20160*pow(gam2,2)*Lt*pow(x,6) + 17280*gam2*gam3*Lt*pow(x,6) - 6720*gam4*Lt*pow(x,6) - 1728*gam5*Lt*pow(x,6) + 12960*pow(gam2,2)*pow(Lt,2)*pow(x,6) - 13440*gam3*pow(Lt,2)*pow(x,6) - 4320*gam4*pow(Lt,2)*pow(x,6) - 13440*gam2*pow(Lt,3)*pow(x,6) - 5760*gam3*pow(Lt,3)*pow(x,6) - 4320*gam2*pow(Lt,4)*pow(x,6) + 1344*pow(Lt,5)*pow(x,6) + 288*pow(Lt,6)*pow(x,6) - 4800*pow(gam2,3)*pow(x,7) + 3840*gam2*gam3*pow(x,7) + 3200*pow(gam3,2)*pow(x,7) + 4800*gam2*gam4*pow(x,7) - 384*gam5*pow(x,7) - 320*gam6*pow(x,7) + 5760*pow(gam2,2)*Lt*pow(x,7) + 19200*gam2*gam3*Lt*pow(x,7) - 1920*gam4*Lt*pow(x,7) - 1920*gam5*Lt*pow(x,7) + 14400*pow(gam2,2)*pow(Lt,2)*pow(x,7) - 3840*gam3*pow(Lt,2)*pow(x,7) - 4800*gam4*pow(Lt,2)*pow(x,7) - 3840*gam2*pow(Lt,3)*pow(x,7) - 6400*gam3*pow(Lt,3)*pow(x,7) - 4800*gam2*pow(Lt,4)*pow(x,7) + 384*pow(Lt,5)*pow(x,7) + 320*pow(Lt,6)*pow(x,7) - 1920*pow(gam2,3)*pow(x,8) + 1280*pow(gam3,2)*pow(x,8) + 1920*gam2*gam4*pow(x,8) - 128*gam6*pow(x,8) + 7680*gam2*gam3*Lt*pow(x,8) - 768*gam5*Lt*pow(x,8) + 5760*pow(gam2,2)*pow(Lt,2)*pow(x,8) - 1920*gam4*pow(Lt,2)*pow(x,8) - 2560*gam3*pow(Lt,3)*pow(x,8) - 1920*gam2*pow(Lt,4)*pow(x,8) + 128*pow(Lt,6)*pow(x,8) + x*(-1 + 2*x)*pow(eg + 2*eg*x,6) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,6) + 3*pow(eg + 2*eg*x,5)*(1 - 2*(2 + gam1 - Lt)*x - 4*pow(x,2) + 8*(gam1 - Lt)*pow(x,3)) - 3*pow(gam1 + 2*gam1*x,5)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 15*pow(gam1 + 2*gam1*x,4)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 15*pow(eg + 2*eg*x,4)*(2 + gam2*x + 2*gam2*pow(x,2) - 4*gam2*pow(x,3) - 8*gam2*pow(x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)) - gam1*(1 + 2*x)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 10*pow(gam1 + 2*gam1*x,3)*(12 - 2*gam3*x - 8*gam3*pow(x,2) + 32*gam3*pow(x,4) + 32*gam3*pow(x,5) - 12*Lt*(1 + 2*x) - 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) - 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2)) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 15*pow(gam1 + 2*gam1*x,2)*(24 - 24*Lt + 12*pow(Lt,2) - 2*pow(Lt,3) + gam4*x - 48*Lt*x + 48*pow(Lt,2)*x - 4*pow(Lt,3)*x - pow(Lt,4)*x + 6*gam4*pow(x,2) + 48*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) + 8*gam4*pow(x,3) + 128*pow(Lt,3)*pow(x,3) - 8*pow(Lt,4)*pow(x,3) - 16*gam4*pow(x,4) + 160*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 48*gam4*pow(x,5) + 64*pow(Lt,3)*pow(x,5) + 48*pow(Lt,4)*pow(x,5) - 32*gam4*pow(x,6) + 32*pow(Lt,4)*pow(x,6) + 3*pow(gam2,2)*x*(-1 + 2*x)*pow(1 + 2*x,4) - 2*gam3*pow(1 + 2*x,3)*(-1 + 4*x - 2*Lt*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 6*gam2*pow(1 + 2*x,2)*(2 + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)))) - 3*gam1*(1 + 2*x)*(-240 + 5*gam4 + 240*Lt - 120*pow(Lt,2) + 40*pow(Lt,3) - 5*pow(Lt,4) + 20*gam4*x + 2*gam5*x + 480*Lt*x + 10*gam4*Lt*x - 480*pow(Lt,2)*x + 240*pow(Lt,3)*x - 20*pow(Lt,4)*x - 2*pow(Lt,5)*x - 60*gam4*pow(x,2) + 16*gam5*pow(x,2) + 80*gam4*Lt*pow(x,2) - 480*pow(Lt,2)*pow(x,2) + 480*pow(Lt,3)*pow(x,2) + 60*pow(Lt,4)*pow(x,2) - 16*pow(Lt,5)*pow(x,2) - 480*gam4*pow(x,3) + 40*gam5*pow(x,3) + 200*gam4*Lt*pow(x,3) + 320*pow(Lt,3)*pow(x,3) + 480*pow(Lt,4)*pow(x,3) - 40*pow(Lt,5)*pow(x,3) - 1040*gam4*pow(x,4) + 1040*pow(Lt,4)*pow(x,4) - 960*gam4*pow(x,5) - 160*gam5*pow(x,5) - 800*gam4*Lt*pow(x,5) + 960*pow(Lt,4)*pow(x,5) + 160*pow(Lt,5)*pow(x,5) - 320*gam4*pow(x,6) - 256*gam5*pow(x,6) - 1280*gam4*Lt*pow(x,6) + 320*pow(Lt,4)*pow(x,6) + 256*pow(Lt,5)*pow(x,6) - 128*gam5*pow(x,7) - 640*gam4*Lt*pow(x,7) + 128*pow(Lt,5)*pow(x,7) + 15*pow(gam2,2)*pow(1 + 2*x,4)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 10*gam2*pow(1 + 2*x,2)*(-12 + 12*Lt*(1 + 2*x) - 2*gam3*x*(-1 + 2*x)*pow(1 + 2*x,3) + 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) + 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2))) - 20*gam3*pow(1 + 2*x,3)*(2 + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)))) + 10*pow(eg + 2*eg*x,3)*(12 - 12*Lt + 3*pow(Lt,2) - 2*gam3*x - 24*Lt*x + 2*pow(Lt,3)*x - 8*gam3*pow(x,2) - 48*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) - 96*pow(Lt,2)*pow(x,3) + 32*gam3*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 32*pow(Lt,3)*pow(x,4) + 32*gam3*pow(x,5) - 32*pow(Lt,3)*pow(x,5) + 2*x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,3) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 3*pow(gam1 + 2*gam1*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 6*gam1*(1 + 2*x)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)))) + 15*pow(eg + 2*eg*x,2)*(24 + 2*gam3 - 24*Lt + 12*pow(Lt,2) - 2*pow(Lt,3) + 4*gam3*x + gam4*x - 48*Lt*x + 4*gam3*Lt*x + 48*pow(Lt,2)*x - 4*pow(Lt,3)*x - pow(Lt,4)*x - 32*gam3*pow(x,2) + 6*gam4*pow(x,2) + 24*gam3*Lt*pow(x,2) + 48*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) - 128*gam3*pow(x,3) + 8*gam4*pow(x,3) + 32*gam3*Lt*pow(x,3) + 128*pow(Lt,3)*pow(x,3) - 8*pow(Lt,4)*pow(x,3) - 160*gam3*pow(x,4) - 16*gam4*pow(x,4) - 64*gam3*Lt*pow(x,4) + 160*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 64*gam3*pow(x,5) - 48*gam4*pow(x,5) - 192*gam3*Lt*pow(x,5) + 64*pow(Lt,3)*pow(x,5) + 48*pow(Lt,4)*pow(x,5) - 32*gam4*pow(x,6) - 128*gam3*Lt*pow(x,6) + 32*pow(Lt,4)*pow(x,6) + 3*pow(gam2,2)*x*(-1 + 2*x)*pow(1 + 2*x,4) + x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,4) - 2*pow(gam1 + 2*gam1*x,3)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 6*gam2*pow(1 + 2*x,2)*(2 + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 6*pow(gam1 + 2*gam1*x,2)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 2*gam1*(1 + 2*x)*(12 - 2*gam3*x - 8*gam3*pow(x,2) + 32*gam3*pow(x,4) + 32*gam3*pow(x,5) - 12*Lt*(1 + 2*x) - 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) - 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2)) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)))) + 3*eg*(1 + 2*x)*(240 + 40*gam3 - 5*gam4 - 240*Lt - 20*gam3*Lt + 120*pow(Lt,2) - 40*pow(Lt,3) + 5*pow(Lt,4) + 240*gam3*x - 20*gam4*x - 2*gam5*x - 480*Lt*x - 80*gam3*Lt*x - 10*gam4*Lt*x + 480*pow(Lt,2)*x - 20*gam3*pow(Lt,2)*x - 240*pow(Lt,3)*x + 20*pow(Lt,4)*x + 2*pow(Lt,5)*x + 480*gam3*pow(x,2) + 60*gam4*pow(x,2) - 16*gam5*pow(x,2) + 240*gam3*Lt*pow(x,2) - 80*gam4*Lt*pow(x,2) + 480*pow(Lt,2)*pow(x,2) - 160*gam3*pow(Lt,2)*pow(x,2) - 480*pow(Lt,3)*pow(x,2) - 60*pow(Lt,4)*pow(x,2) + 16*pow(Lt,5)*pow(x,2) + 320*gam3*pow(x,3) + 480*gam4*pow(x,3) - 40*gam5*pow(x,3) + 1920*gam3*Lt*pow(x,3) - 200*gam4*Lt*pow(x,3) - 400*gam3*pow(Lt,2)*pow(x,3) - 320*pow(Lt,3)*pow(x,3) - 480*pow(Lt,4)*pow(x,3) + 40*pow(Lt,5)*pow(x,3) + 1040*gam4*pow(x,4) + 4160*gam3*Lt*pow(x,4) - 1040*pow(Lt,4)*pow(x,4) + 960*gam4*pow(x,5) + 160*gam5*pow(x,5) + 3840*gam3*Lt*pow(x,5) + 800*gam4*Lt*pow(x,5) + 1600*gam3*pow(Lt,2)*pow(x,5) - 960*pow(Lt,4)*pow(x,5) - 160*pow(Lt,5)*pow(x,5) + 320*gam4*pow(x,6) + 256*gam5*pow(x,6) + 1280*gam3*Lt*pow(x,6) + 1280*gam4*Lt*pow(x,6) + 2560*gam3*pow(Lt,2)*pow(x,6) - 320*pow(Lt,4)*pow(x,6) - 256*pow(Lt,5)*pow(x,6) + 128*gam5*pow(x,7) + 640*gam4*Lt*pow(x,7) + 1280*gam3*pow(Lt,2)*pow(x,7) - 128*pow(Lt,5)*pow(x,7) + 2*x*(-1 + 2*x)*pow(gam1 + 2*gam1*x,5) - 15*pow(gam2,2)*pow(1 + 2*x,4)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 5*pow(gam1 + 2*gam1*x,4)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3)) + 10*gam2*pow(1 + 2*x,2)*(-12 + 12*Lt*(1 + 2*x) - 2*gam3*x*(-1 + 2*x)*pow(1 + 2*x,3) + 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) + 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2))) + 20*pow(gam1 + 2*gam1*x,3)*(2 - gam2*x*(-1 + 2*x)*pow(1 + 2*x,2) + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3))) + 10*pow(gam1 + 2*gam1*x,2)*(12 - 2*gam3*x - 8*gam3*pow(x,2) + 32*gam3*pow(x,4) + 32*gam3*pow(x,5) - 12*Lt*(1 + 2*x) - 2*x*(-1 + 2*x)*pow(Lt + 2*Lt*x,3) - 3*pow(Lt + 2*Lt*x,2)*(-1 + 4*x + 4*pow(x,2)) + 3*gam2*pow(1 + 2*x,2)*(-1 - 2*(-2 + Lt)*x + 4*pow(x,2) + 8*Lt*pow(x,3))) + 10*gam1*(1 + 2*x)*(24 - 24*Lt + 12*pow(Lt,2) - 2*pow(Lt,3) + gam4*x - 48*Lt*x + 48*pow(Lt,2)*x - 4*pow(Lt,3)*x - pow(Lt,4)*x + 6*gam4*pow(x,2) + 48*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) + 8*gam4*pow(x,3) + 128*pow(Lt,3)*pow(x,3) - 8*pow(Lt,4)*pow(x,3) - 16*gam4*pow(x,4) + 160*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 48*gam4*pow(x,5) + 64*pow(Lt,3)*pow(x,5) + 48*pow(Lt,4)*pow(x,5) - 32*gam4*pow(x,6) + 32*pow(Lt,4)*pow(x,6) + 3*pow(gam2,2)*x*(-1 + 2*x)*pow(1 + 2*x,4) - 2*gam3*pow(1 + 2*x,3)*(-1 + 4*x - 2*Lt*x + 4*pow(x,2) + 8*Lt*pow(x,3)) - 6*gam2*pow(1 + 2*x,2)*(2 + x*(-1 + 2*x)*pow(Lt + 2*Lt*x,2) + Lt*(-1 + 2*x + 12*pow(x,2) + 8*pow(x,3)))))))/(gam0*pow(1 + 2*x,7)));
    
    
    SubtrDD1.push_back((egamexp*pow(1 - tau,2*(1 + x))*x)/(gam0*(1 + x)));
    SubtrDD1.push_back((egamexp*pow(1 - tau,2*(1 + x))*(1 + 2*Lt*x + 2*Lt*pow(x,2) - 2*eg*x*(1 + x) - 2*gam1*x*(1 + x)))/(gam0*pow(1 + x,2)));
    SubtrDD1.push_back((2*egamexp*pow(1 - tau,2*(1 + x))*(-1 + 2*Lt - 2*gam2*x + 2*Lt*x + 2*pow(Lt,2)*x - 4*gam2*pow(x,2) + 4*pow(Lt,2)*pow(x,2) - 2*gam2*pow(x,3) + 2*pow(Lt,2)*pow(x,3) + 2*pow(eg,2)*x*pow(1 + x,2) + 2*pow(gam1,2)*x*pow(1 + x,2) + 2*eg*(1 + x)*(-1 + 2*gam1*x*(1 + x) - 2*Lt*x*(1 + x)) - 2*gam1*(1 + x)*(1 + 2*Lt*x*(1 + x))))/(gam0*pow(1 + x,3)));
    SubtrDD1.push_back((-2*egamexp*pow(1 - tau,2*(1 + x))*(-3 + 6*gam2 + 6*Lt - 6*pow(Lt,2) + 12*gam2*x + 4*gam3*x + 6*Lt*x + 12*gam2*Lt*x - 12*pow(Lt,2)*x - 4*pow(Lt,3)*x + 6*gam2*pow(x,2) + 12*gam3*pow(x,2) + 36*gam2*Lt*pow(x,2) - 6*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) + 36*gam2*Lt*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 4*gam3*pow(x,4) + 12*gam2*Lt*pow(x,4) - 4*pow(Lt,3)*pow(x,4) + 4*pow(eg,3)*x*pow(1 + x,3) + 4*pow(gam1,3)*x*pow(1 + x,3) + 6*pow(eg,2)*pow(1 + x,2)*(-1 + 2*gam1*x*(1 + x) - 2*Lt*x*(1 + x)) - 6*pow(gam1,2)*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*gam1*(1 + x)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 6*eg*(1 + x)*(-1 - 2*gam2*x - 4*gam2*pow(x,2) - 2*gam2*pow(x,3) + 2*Lt*(1 + x) + 2*pow(gam1,2)*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2) - 2*gam1*(1 + x)*(1 + 2*Lt*x*(1 + x)))))/(gam0*pow(1 + x,4)));
    SubtrDD1.push_back((8*egamexp*pow(1 - tau,2*(1 + x))*(-3 + 6*gam2 - 4*gam3 + 6*Lt - 12*gam2*Lt - 6*pow(Lt,2) + 4*pow(Lt,3) + 12*gam2*x + 6*pow(gam2,2)*x - 12*gam3*x - 2*gam4*x + 6*Lt*x - 36*gam2*Lt*x - 8*gam3*Lt*x - 12*pow(Lt,2)*x - 12*gam2*pow(Lt,2)*x + 12*pow(Lt,3)*x + 2*pow(Lt,4)*x + 6*gam2*pow(x,2) + 24*pow(gam2,2)*pow(x,2) - 12*gam3*pow(x,2) - 8*gam4*pow(x,2) - 36*gam2*Lt*pow(x,2) - 32*gam3*Lt*pow(x,2) - 6*pow(Lt,2)*pow(x,2) - 48*gam2*pow(Lt,2)*pow(x,2) + 12*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) + 36*pow(gam2,2)*pow(x,3) - 4*gam3*pow(x,3) - 12*gam4*pow(x,3) - 12*gam2*Lt*pow(x,3) - 48*gam3*Lt*pow(x,3) - 72*gam2*pow(Lt,2)*pow(x,3) + 4*pow(Lt,3)*pow(x,3) + 12*pow(Lt,4)*pow(x,3) + 24*pow(gam2,2)*pow(x,4) - 8*gam4*pow(x,4) - 32*gam3*Lt*pow(x,4) - 48*gam2*pow(Lt,2)*pow(x,4) + 8*pow(Lt,4)*pow(x,4) + 6*pow(gam2,2)*pow(x,5) - 2*gam4*pow(x,5) - 8*gam3*Lt*pow(x,5) - 12*gam2*pow(Lt,2)*pow(x,5) + 2*pow(Lt,4)*pow(x,5) + 2*pow(eg,4)*x*pow(1 + x,4) + 2*pow(gam1,4)*x*pow(1 + x,4) + 4*pow(eg,3)*pow(1 + x,3)*(-1 + 2*gam1*x*(1 + x) - 2*Lt*x*(1 + x)) - 4*pow(gam1,3)*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) + 6*pow(gam1,2)*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 6*pow(eg,2)*pow(1 + x,2)*(-1 - 2*gam2*x - 4*gam2*pow(x,2) - 2*gam2*pow(x,3) + 2*Lt*(1 + x) + 2*pow(gam1,2)*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2) - 2*gam1*(1 + x)*(1 + 2*Lt*x*(1 + x))) + 2*gam1*(1 + x)*(-3 + 4*gam3*x + 12*gam3*pow(x,2) + 12*gam3*pow(x,3) + 4*gam3*pow(x,4) + 6*Lt*(1 + x) - 6*pow(Lt,2)*pow(1 + x,2) - 4*pow(Lt,3)*x*pow(1 + x,3) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x))) + 2*eg*(1 + x)*(-3 + 6*Lt - 6*pow(Lt,2) + 4*gam3*x + 6*Lt*x - 12*pow(Lt,2)*x - 4*pow(Lt,3)*x + 12*gam3*pow(x,2) - 6*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 4*gam3*pow(x,4) - 4*pow(Lt,3)*pow(x,4) + 4*pow(gam1,3)*x*pow(1 + x,3) - 6*pow(gam1,2)*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*gam1*(1 + x)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)))))/(gam0*pow(1 + x,5)));
    SubtrDD1.push_back((-8*egamexp*pow(1 - tau,2*(1 + x))*(-15 + 30*gam2 - 30*pow(gam2,2) - 20*gam3 + 10*gam4 + 30*Lt - 60*gam2*Lt + 40*gam3*Lt - 30*pow(Lt,2) + 60*gam2*pow(Lt,2) + 20*pow(Lt,3) - 10*pow(Lt,4) + 60*gam2*x - 120*pow(gam2,2)*x - 60*gam3*x - 40*gam2*gam3*x + 40*gam4*x + 4*gam5*x + 30*Lt*x - 180*gam2*Lt*x - 60*pow(gam2,2)*Lt*x + 160*gam3*Lt*x + 20*gam4*Lt*x - 60*pow(Lt,2)*x + 240*gam2*pow(Lt,2)*x + 40*gam3*pow(Lt,2)*x + 60*pow(Lt,3)*x + 40*gam2*pow(Lt,3)*x - 40*pow(Lt,4)*x - 4*pow(Lt,5)*x + 30*gam2*pow(x,2) - 180*pow(gam2,2)*pow(x,2) - 60*gam3*pow(x,2) - 200*gam2*gam3*pow(x,2) + 60*gam4*pow(x,2) + 20*gam5*pow(x,2) - 180*gam2*Lt*pow(x,2) - 300*pow(gam2,2)*Lt*pow(x,2) + 240*gam3*Lt*pow(x,2) + 100*gam4*Lt*pow(x,2) - 30*pow(Lt,2)*pow(x,2) + 360*gam2*pow(Lt,2)*pow(x,2) + 200*gam3*pow(Lt,2)*pow(x,2) + 60*pow(Lt,3)*pow(x,2) + 200*gam2*pow(Lt,3)*pow(x,2) - 60*pow(Lt,4)*pow(x,2) - 20*pow(Lt,5)*pow(x,2) - 120*pow(gam2,2)*pow(x,3) - 20*gam3*pow(x,3) - 400*gam2*gam3*pow(x,3) + 40*gam4*pow(x,3) + 40*gam5*pow(x,3) - 60*gam2*Lt*pow(x,3) - 600*pow(gam2,2)*Lt*pow(x,3) + 160*gam3*Lt*pow(x,3) + 200*gam4*Lt*pow(x,3) + 240*gam2*pow(Lt,2)*pow(x,3) + 400*gam3*pow(Lt,2)*pow(x,3) + 20*pow(Lt,3)*pow(x,3) + 400*gam2*pow(Lt,3)*pow(x,3) - 40*pow(Lt,4)*pow(x,3) - 40*pow(Lt,5)*pow(x,3) - 30*pow(gam2,2)*pow(x,4) - 400*gam2*gam3*pow(x,4) + 10*gam4*pow(x,4) + 40*gam5*pow(x,4) - 600*pow(gam2,2)*Lt*pow(x,4) + 40*gam3*Lt*pow(x,4) + 200*gam4*Lt*pow(x,4) + 60*gam2*pow(Lt,2)*pow(x,4) + 400*gam3*pow(Lt,2)*pow(x,4) + 400*gam2*pow(Lt,3)*pow(x,4) - 10*pow(Lt,4)*pow(x,4) - 40*pow(Lt,5)*pow(x,4) - 200*gam2*gam3*pow(x,5) + 20*gam5*pow(x,5) - 300*pow(gam2,2)*Lt*pow(x,5) + 100*gam4*Lt*pow(x,5) + 200*gam3*pow(Lt,2)*pow(x,5) + 200*gam2*pow(Lt,3)*pow(x,5) - 20*pow(Lt,5)*pow(x,5) - 40*gam2*gam3*pow(x,6) + 4*gam5*pow(x,6) - 60*pow(gam2,2)*Lt*pow(x,6) + 20*gam4*Lt*pow(x,6) + 40*gam3*pow(Lt,2)*pow(x,6) + 40*gam2*pow(Lt,3)*pow(x,6) - 4*pow(Lt,5)*pow(x,6) + 4*pow(eg,5)*x*pow(1 + x,5) + 4*pow(gam1,5)*x*pow(1 + x,5) + 10*pow(eg,4)*pow(1 + x,4)*(-1 + 2*gam1*x*(1 + x) - 2*Lt*x*(1 + x)) - 10*pow(gam1,4)*pow(1 + x,4)*(1 + 2*Lt*x*(1 + x)) + 20*pow(gam1,3)*pow(1 + x,3)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 20*pow(eg,3)*pow(1 + x,3)*(-1 - 2*gam2*x - 4*gam2*pow(x,2) - 2*gam2*pow(x,3) + 2*Lt*(1 + x) + 2*pow(gam1,2)*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2) - 2*gam1*(1 + x)*(1 + 2*Lt*x*(1 + x))) + 10*pow(gam1,2)*pow(1 + x,2)*(-3 + 4*gam3*x + 12*gam3*pow(x,2) + 12*gam3*pow(x,3) + 4*gam3*pow(x,4) + 6*Lt*(1 + x) - 6*pow(Lt,2)*pow(1 + x,2) - 4*pow(Lt,3)*x*pow(1 + x,3) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x))) + 10*gam1*(1 + x)*(-3 + 6*Lt - 6*pow(Lt,2) + 4*pow(Lt,3) - 2*gam4*x + 6*Lt*x - 12*pow(Lt,2)*x + 12*pow(Lt,3)*x + 2*pow(Lt,4)*x - 8*gam4*pow(x,2) - 6*pow(Lt,2)*pow(x,2) + 12*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 12*gam4*pow(x,3) + 4*pow(Lt,3)*pow(x,3) + 12*pow(Lt,4)*pow(x,3) - 8*gam4*pow(x,4) + 8*pow(Lt,4)*pow(x,4) - 2*gam4*pow(x,5) + 2*pow(Lt,4)*pow(x,5) + 6*pow(gam2,2)*x*pow(1 + x,4) - 4*gam3*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) - 6*gam2*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) + 2*pow(Lt,2)*x*pow(1 + x,2))) + 10*pow(eg,2)*pow(1 + x,2)*(-3 + 6*Lt - 6*pow(Lt,2) + 4*gam3*x + 6*Lt*x - 12*pow(Lt,2)*x - 4*pow(Lt,3)*x + 12*gam3*pow(x,2) - 6*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 4*gam3*pow(x,4) - 4*pow(Lt,3)*pow(x,4) + 4*pow(gam1,3)*x*pow(1 + x,3) - 6*pow(gam1,2)*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*gam1*(1 + x)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2))) + 10*eg*(1 + x)*(-3 - 4*gam3 + 6*Lt - 6*pow(Lt,2) + 4*pow(Lt,3) - 12*gam3*x - 2*gam4*x + 6*Lt*x - 8*gam3*Lt*x - 12*pow(Lt,2)*x + 12*pow(Lt,3)*x + 2*pow(Lt,4)*x - 12*gam3*pow(x,2) - 8*gam4*pow(x,2) - 32*gam3*Lt*pow(x,2) - 6*pow(Lt,2)*pow(x,2) + 12*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 4*gam3*pow(x,3) - 12*gam4*pow(x,3) - 48*gam3*Lt*pow(x,3) + 4*pow(Lt,3)*pow(x,3) + 12*pow(Lt,4)*pow(x,3) - 8*gam4*pow(x,4) - 32*gam3*Lt*pow(x,4) + 8*pow(Lt,4)*pow(x,4) - 2*gam4*pow(x,5) - 8*gam3*Lt*pow(x,5) + 2*pow(Lt,4)*pow(x,5) + 2*pow(gam1,4)*x*pow(1 + x,4) + 6*pow(gam2,2)*x*pow(1 + x,4) - 4*pow(gam1,3)*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) - 6*gam2*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 6*pow(gam1,2)*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 2*gam1*(1 + x)*(-3 + 4*gam3*x + 12*gam3*pow(x,2) + 12*gam3*pow(x,3) + 4*gam3*pow(x,4) + 6*Lt*(1 + x) - 6*pow(Lt,2)*pow(1 + x,2) - 4*pow(Lt,3)*x*pow(1 + x,3) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x))))))/(gam0*pow(1 + x,6)));
    SubtrDD1.push_back((16*egamexp*pow(1 - tau,2*(1 + x))*(-45 - 90*eg - 90*pow(eg,2) - 60*pow(eg,3) - 30*pow(eg,4) - 12*pow(eg,5) - 60*gam3 - 120*eg*gam3 - 120*pow(eg,2)*gam3 + 30*gam4 + 60*eg*gam4 - 12*gam5 + 90*Lt + 180*eg*Lt + 180*pow(eg,2)*Lt + 120*pow(eg,3)*Lt + 60*pow(eg,4)*Lt + 120*gam3*Lt + 240*eg*gam3*Lt - 60*gam4*Lt - 90*pow(Lt,2) - 180*eg*pow(Lt,2) - 180*pow(eg,2)*pow(Lt,2) - 120*pow(eg,3)*pow(Lt,2) - 120*gam3*pow(Lt,2) + 60*pow(Lt,3) + 120*eg*pow(Lt,3) + 120*pow(eg,2)*pow(Lt,3) - 30*pow(Lt,4) - 60*eg*pow(Lt,4) + 12*pow(Lt,5) - 90*eg*x - 180*pow(eg,2)*x - 180*pow(eg,3)*x - 120*pow(eg,4)*x - 60*pow(eg,5)*x + 4*pow(eg,6)*x - 180*gam3*x - 480*eg*gam3*x - 600*pow(eg,2)*gam3*x + 80*pow(eg,3)*gam3*x + 40*pow(gam3,2)*x + 120*gam4*x + 300*eg*gam4*x - 60*pow(eg,2)*gam4*x - 60*gam5*x + 24*eg*gam5*x - 4*gam6*x + 90*Lt*x + 360*eg*Lt*x + 540*pow(eg,2)*Lt*x + 480*pow(eg,3)*Lt*x + 300*pow(eg,4)*Lt*x - 24*pow(eg,5)*Lt*x + 480*gam3*Lt*x + 1200*eg*gam3*Lt*x - 240*pow(eg,2)*gam3*Lt*x - 300*gam4*Lt*x + 120*eg*gam4*Lt*x - 24*gam5*Lt*x - 180*pow(Lt,2)*x - 540*eg*pow(Lt,2)*x - 720*pow(eg,2)*pow(Lt,2)*x - 600*pow(eg,3)*pow(Lt,2)*x + 60*pow(eg,4)*pow(Lt,2)*x - 600*gam3*pow(Lt,2)*x + 240*eg*gam3*pow(Lt,2)*x - 60*gam4*pow(Lt,2)*x + 180*pow(Lt,3)*x + 480*eg*pow(Lt,3)*x + 600*pow(eg,2)*pow(Lt,3)*x - 80*pow(eg,3)*pow(Lt,3)*x - 80*gam3*pow(Lt,3)*x - 120*pow(Lt,4)*x - 300*eg*pow(Lt,4)*x + 60*pow(eg,2)*pow(Lt,4)*x + 60*pow(Lt,5)*x - 24*eg*pow(Lt,5)*x + 4*pow(Lt,6)*x - 90*pow(eg,2)*pow(x,2) - 180*pow(eg,3)*pow(x,2) - 180*pow(eg,4)*pow(x,2) - 120*pow(eg,5)*pow(x,2) + 24*pow(eg,6)*pow(x,2) - 180*gam3*pow(x,2) - 720*eg*gam3*pow(x,2) - 1200*pow(eg,2)*gam3*pow(x,2) + 480*pow(eg,3)*gam3*pow(x,2) + 240*pow(gam3,2)*pow(x,2) + 180*gam4*pow(x,2) + 600*eg*gam4*pow(x,2) - 360*pow(eg,2)*gam4*pow(x,2) - 120*gam5*pow(x,2) + 144*eg*gam5*pow(x,2) - 24*gam6*pow(x,2) + 180*eg*Lt*pow(x,2) + 540*pow(eg,2)*Lt*pow(x,2) + 720*pow(eg,3)*Lt*pow(x,2) + 600*pow(eg,4)*Lt*pow(x,2) - 144*pow(eg,5)*Lt*pow(x,2) + 720*gam3*Lt*pow(x,2) + 2400*eg*gam3*Lt*pow(x,2) - 1440*pow(eg,2)*gam3*Lt*pow(x,2) - 600*gam4*Lt*pow(x,2) + 720*eg*gam4*Lt*pow(x,2) - 144*gam5*Lt*pow(x,2) - 90*pow(Lt,2)*pow(x,2) - 540*eg*pow(Lt,2)*pow(x,2) - 1080*pow(eg,2)*pow(Lt,2)*pow(x,2) - 1200*pow(eg,3)*pow(Lt,2)*pow(x,2) + 360*pow(eg,4)*pow(Lt,2)*pow(x,2) - 1200*gam3*pow(Lt,2)*pow(x,2) + 1440*eg*gam3*pow(Lt,2)*pow(x,2) - 360*gam4*pow(Lt,2)*pow(x,2) + 180*pow(Lt,3)*pow(x,2) + 720*eg*pow(Lt,3)*pow(x,2) + 1200*pow(eg,2)*pow(Lt,3)*pow(x,2) - 480*pow(eg,3)*pow(Lt,3)*pow(x,2) - 480*gam3*pow(Lt,3)*pow(x,2) - 180*pow(Lt,4)*pow(x,2) - 600*eg*pow(Lt,4)*pow(x,2) + 360*pow(eg,2)*pow(Lt,4)*pow(x,2) + 120*pow(Lt,5)*pow(x,2) - 144*eg*pow(Lt,5)*pow(x,2) + 24*pow(Lt,6)*pow(x,2) - 60*pow(eg,3)*pow(x,3) - 120*pow(eg,4)*pow(x,3) - 120*pow(eg,5)*pow(x,3) + 60*pow(eg,6)*pow(x,3) - 60*gam3*pow(x,3) - 480*eg*gam3*pow(x,3) - 1200*pow(eg,2)*gam3*pow(x,3) + 1200*pow(eg,3)*gam3*pow(x,3) + 600*pow(gam3,2)*pow(x,3) + 120*gam4*pow(x,3) + 600*eg*gam4*pow(x,3) - 900*pow(eg,2)*gam4*pow(x,3) - 120*gam5*pow(x,3) + 360*eg*gam5*pow(x,3) - 60*gam6*pow(x,3) + 180*pow(eg,2)*Lt*pow(x,3) + 480*pow(eg,3)*Lt*pow(x,3) + 600*pow(eg,4)*Lt*pow(x,3) - 360*pow(eg,5)*Lt*pow(x,3) + 480*gam3*Lt*pow(x,3) + 2400*eg*gam3*Lt*pow(x,3) - 3600*pow(eg,2)*gam3*Lt*pow(x,3) - 600*gam4*Lt*pow(x,3) + 1800*eg*gam4*Lt*pow(x,3) - 360*gam5*Lt*pow(x,3) - 180*eg*pow(Lt,2)*pow(x,3) - 720*pow(eg,2)*pow(Lt,2)*pow(x,3) - 1200*pow(eg,3)*pow(Lt,2)*pow(x,3) + 900*pow(eg,4)*pow(Lt,2)*pow(x,3) - 1200*gam3*pow(Lt,2)*pow(x,3) + 3600*eg*gam3*pow(Lt,2)*pow(x,3) - 900*gam4*pow(Lt,2)*pow(x,3) + 60*pow(Lt,3)*pow(x,3) + 480*eg*pow(Lt,3)*pow(x,3) + 1200*pow(eg,2)*pow(Lt,3)*pow(x,3) - 1200*pow(eg,3)*pow(Lt,3)*pow(x,3) - 1200*gam3*pow(Lt,3)*pow(x,3) - 120*pow(Lt,4)*pow(x,3) - 600*eg*pow(Lt,4)*pow(x,3) + 900*pow(eg,2)*pow(Lt,4)*pow(x,3) + 120*pow(Lt,5)*pow(x,3) - 360*eg*pow(Lt,5)*pow(x,3) + 60*pow(Lt,6)*pow(x,3) - 30*pow(eg,4)*pow(x,4) - 60*pow(eg,5)*pow(x,4) + 80*pow(eg,6)*pow(x,4) - 120*eg*gam3*pow(x,4) - 600*pow(eg,2)*gam3*pow(x,4) + 1600*pow(eg,3)*gam3*pow(x,4) + 800*pow(gam3,2)*pow(x,4) + 30*gam4*pow(x,4) + 300*eg*gam4*pow(x,4) - 1200*pow(eg,2)*gam4*pow(x,4) - 60*gam5*pow(x,4) + 480*eg*gam5*pow(x,4) - 80*gam6*pow(x,4) + 120*pow(eg,3)*Lt*pow(x,4) + 300*pow(eg,4)*Lt*pow(x,4) - 480*pow(eg,5)*Lt*pow(x,4) + 120*gam3*Lt*pow(x,4) + 1200*eg*gam3*Lt*pow(x,4) - 4800*pow(eg,2)*gam3*Lt*pow(x,4) - 300*gam4*Lt*pow(x,4) + 2400*eg*gam4*Lt*pow(x,4) - 480*gam5*Lt*pow(x,4) - 180*pow(eg,2)*pow(Lt,2)*pow(x,4) - 600*pow(eg,3)*pow(Lt,2)*pow(x,4) + 1200*pow(eg,4)*pow(Lt,2)*pow(x,4) - 600*gam3*pow(Lt,2)*pow(x,4) + 4800*eg*gam3*pow(Lt,2)*pow(x,4) - 1200*gam4*pow(Lt,2)*pow(x,4) + 120*eg*pow(Lt,3)*pow(x,4) + 600*pow(eg,2)*pow(Lt,3)*pow(x,4) - 1600*pow(eg,3)*pow(Lt,3)*pow(x,4) - 1600*gam3*pow(Lt,3)*pow(x,4) - 30*pow(Lt,4)*pow(x,4) - 300*eg*pow(Lt,4)*pow(x,4) + 1200*pow(eg,2)*pow(Lt,4)*pow(x,4) + 60*pow(Lt,5)*pow(x,4) - 480*eg*pow(Lt,5)*pow(x,4) + 80*pow(Lt,6)*pow(x,4) - 12*pow(eg,5)*pow(x,5) + 60*pow(eg,6)*pow(x,5) - 120*pow(eg,2)*gam3*pow(x,5) + 1200*pow(eg,3)*gam3*pow(x,5) + 600*pow(gam3,2)*pow(x,5) + 60*eg*gam4*pow(x,5) - 900*pow(eg,2)*gam4*pow(x,5) - 12*gam5*pow(x,5) + 360*eg*gam5*pow(x,5) - 60*gam6*pow(x,5) + 60*pow(eg,4)*Lt*pow(x,5) - 360*pow(eg,5)*Lt*pow(x,5) + 240*eg*gam3*Lt*pow(x,5) - 3600*pow(eg,2)*gam3*Lt*pow(x,5) - 60*gam4*Lt*pow(x,5) + 1800*eg*gam4*Lt*pow(x,5) - 360*gam5*Lt*pow(x,5) - 120*pow(eg,3)*pow(Lt,2)*pow(x,5) + 900*pow(eg,4)*pow(Lt,2)*pow(x,5) - 120*gam3*pow(Lt,2)*pow(x,5) + 3600*eg*gam3*pow(Lt,2)*pow(x,5) - 900*gam4*pow(Lt,2)*pow(x,5) + 120*pow(eg,2)*pow(Lt,3)*pow(x,5) - 1200*pow(eg,3)*pow(Lt,3)*pow(x,5) - 1200*gam3*pow(Lt,3)*pow(x,5) - 60*eg*pow(Lt,4)*pow(x,5) + 900*pow(eg,2)*pow(Lt,4)*pow(x,5) + 12*pow(Lt,5)*pow(x,5) - 360*eg*pow(Lt,5)*pow(x,5) + 60*pow(Lt,6)*pow(x,5) + 24*pow(eg,6)*pow(x,6) + 480*pow(eg,3)*gam3*pow(x,6) + 240*pow(gam3,2)*pow(x,6) - 360*pow(eg,2)*gam4*pow(x,6) + 144*eg*gam5*pow(x,6) - 24*gam6*pow(x,6) - 144*pow(eg,5)*Lt*pow(x,6) - 1440*pow(eg,2)*gam3*Lt*pow(x,6) + 720*eg*gam4*Lt*pow(x,6) - 144*gam5*Lt*pow(x,6) + 360*pow(eg,4)*pow(Lt,2)*pow(x,6) + 1440*eg*gam3*pow(Lt,2)*pow(x,6) - 360*gam4*pow(Lt,2)*pow(x,6) - 480*pow(eg,3)*pow(Lt,3)*pow(x,6) - 480*gam3*pow(Lt,3)*pow(x,6) + 360*pow(eg,2)*pow(Lt,4)*pow(x,6) - 144*eg*pow(Lt,5)*pow(x,6) + 24*pow(Lt,6)*pow(x,6) + 4*pow(eg,6)*pow(x,7) + 80*pow(eg,3)*gam3*pow(x,7) + 40*pow(gam3,2)*pow(x,7) - 60*pow(eg,2)*gam4*pow(x,7) + 24*eg*gam5*pow(x,7) - 4*gam6*pow(x,7) - 24*pow(eg,5)*Lt*pow(x,7) - 240*pow(eg,2)*gam3*Lt*pow(x,7) + 120*eg*gam4*Lt*pow(x,7) - 24*gam5*Lt*pow(x,7) + 60*pow(eg,4)*pow(Lt,2)*pow(x,7) + 240*eg*gam3*pow(Lt,2)*pow(x,7) - 60*gam4*pow(Lt,2)*pow(x,7) - 80*pow(eg,3)*pow(Lt,3)*pow(x,7) - 80*gam3*pow(Lt,3)*pow(x,7) + 60*pow(eg,2)*pow(Lt,4)*pow(x,7) - 24*eg*pow(Lt,5)*pow(x,7) + 4*pow(Lt,6)*pow(x,7) + 4*pow(gam1,6)*x*pow(1 + x,6) - 60*pow(gam2,3)*x*pow(1 + x,6) + 12*pow(gam1,5)*pow(1 + x,5)*(-1 + 2*eg*x*(1 + x) - 2*Lt*x*(1 + x)) + 90*pow(gam2,2)*pow(1 + x,4)*(-1 + 2*Lt*(1 + x) + 2*pow(eg,2)*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2) - 2*eg*(1 + x)*(1 + 2*Lt*x*(1 + x))) + 30*pow(gam1,4)*pow(1 + x,4)*(-1 - 2*gam2*x - 4*gam2*pow(x,2) - 2*gam2*pow(x,3) + 2*Lt*(1 + x) + 2*pow(eg,2)*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2) - 2*eg*(1 + x)*(1 + 2*Lt*x*(1 + x))) + 20*pow(gam1,3)*pow(1 + x,3)*(-3 + 6*Lt - 6*pow(Lt,2) + 4*gam3*x + 6*Lt*x - 12*pow(Lt,2)*x - 4*pow(Lt,3)*x + 12*gam3*pow(x,2) - 6*pow(Lt,2)*pow(x,2) - 12*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 4*gam3*pow(x,4) - 4*pow(Lt,3)*pow(x,4) + 4*pow(eg,3)*x*pow(1 + x,3) - 6*pow(eg,2)*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)) + 6*eg*(1 + x)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2))) - 30*gam2*pow(1 + x,2)*(-3 + 6*Lt - 6*pow(Lt,2) + 4*pow(Lt,3) - 2*gam4*x + 6*Lt*x - 12*pow(Lt,2)*x + 12*pow(Lt,3)*x + 2*pow(Lt,4)*x - 8*gam4*pow(x,2) - 6*pow(Lt,2)*pow(x,2) + 12*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 12*gam4*pow(x,3) + 4*pow(Lt,3)*pow(x,3) + 12*pow(Lt,4)*pow(x,3) - 8*gam4*pow(x,4) + 8*pow(Lt,4)*pow(x,4) - 2*gam4*pow(x,5) + 2*pow(Lt,4)*pow(x,5) + 2*pow(eg,4)*x*pow(1 + x,4) - 4*pow(eg,3)*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) - 4*gam3*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) + 6*pow(eg,2)*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) + 2*pow(Lt,2)*x*pow(1 + x,2)) - 2*eg*(1 + x)*(3 - 6*Lt*(1 + x) + 6*pow(Lt,2)*pow(1 + x,2) - 4*gam3*x*pow(1 + x,3) + 4*pow(Lt,3)*x*pow(1 + x,3))) + 30*pow(gam1,2)*pow(1 + x,2)*(-3 - 4*gam3 + 6*Lt - 6*pow(Lt,2) + 4*pow(Lt,3) - 12*gam3*x - 2*gam4*x + 6*Lt*x - 8*gam3*Lt*x - 12*pow(Lt,2)*x + 12*pow(Lt,3)*x + 2*pow(Lt,4)*x - 12*gam3*pow(x,2) - 8*gam4*pow(x,2) - 32*gam3*Lt*pow(x,2) - 6*pow(Lt,2)*pow(x,2) + 12*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 4*gam3*pow(x,3) - 12*gam4*pow(x,3) - 48*gam3*Lt*pow(x,3) + 4*pow(Lt,3)*pow(x,3) + 12*pow(Lt,4)*pow(x,3) - 8*gam4*pow(x,4) - 32*gam3*Lt*pow(x,4) + 8*pow(Lt,4)*pow(x,4) - 2*gam4*pow(x,5) - 8*gam3*Lt*pow(x,5) + 2*pow(Lt,4)*pow(x,5) + 2*pow(eg,4)*x*pow(1 + x,4) + 6*pow(gam2,2)*x*pow(1 + x,4) - 4*pow(eg,3)*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) - 6*gam2*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 6*pow(eg,2)*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 2*eg*(1 + x)*(-3 + 4*gam3*x + 12*gam3*pow(x,2) + 12*gam3*pow(x,3) + 4*gam3*pow(x,4) + 6*Lt*(1 + x) - 6*pow(Lt,2)*pow(1 + x,2) - 4*pow(Lt,3)*x*pow(1 + x,3) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x)))) + 6*gam1*(1 + x)*(-15 - 20*gam3 + 10*gam4 + 30*Lt + 40*gam3*Lt - 30*pow(Lt,2) + 20*pow(Lt,3) - 10*pow(Lt,4) - 60*gam3*x + 40*gam4*x + 4*gam5*x + 30*Lt*x + 160*gam3*Lt*x + 20*gam4*Lt*x - 60*pow(Lt,2)*x + 40*gam3*pow(Lt,2)*x + 60*pow(Lt,3)*x - 40*pow(Lt,4)*x - 4*pow(Lt,5)*x - 60*gam3*pow(x,2) + 60*gam4*pow(x,2) + 20*gam5*pow(x,2) + 240*gam3*Lt*pow(x,2) + 100*gam4*Lt*pow(x,2) - 30*pow(Lt,2)*pow(x,2) + 200*gam3*pow(Lt,2)*pow(x,2) + 60*pow(Lt,3)*pow(x,2) - 60*pow(Lt,4)*pow(x,2) - 20*pow(Lt,5)*pow(x,2) - 20*gam3*pow(x,3) + 40*gam4*pow(x,3) + 40*gam5*pow(x,3) + 160*gam3*Lt*pow(x,3) + 200*gam4*Lt*pow(x,3) + 400*gam3*pow(Lt,2)*pow(x,3) + 20*pow(Lt,3)*pow(x,3) - 40*pow(Lt,4)*pow(x,3) - 40*pow(Lt,5)*pow(x,3) + 10*gam4*pow(x,4) + 40*gam5*pow(x,4) + 40*gam3*Lt*pow(x,4) + 200*gam4*Lt*pow(x,4) + 400*gam3*pow(Lt,2)*pow(x,4) - 10*pow(Lt,4)*pow(x,4) - 40*pow(Lt,5)*pow(x,4) + 20*gam5*pow(x,5) + 100*gam4*Lt*pow(x,5) + 200*gam3*pow(Lt,2)*pow(x,5) - 20*pow(Lt,5)*pow(x,5) + 4*gam5*pow(x,6) + 20*gam4*Lt*pow(x,6) + 40*gam3*pow(Lt,2)*pow(x,6) - 4*pow(Lt,5)*pow(x,6) + 4*pow(eg,5)*x*pow(1 + x,5) - 10*pow(eg,4)*pow(1 + x,4)*(1 + 2*Lt*x*(1 + x)) - 30*pow(gam2,2)*pow(1 + x,4)*(1 + 2*Lt*x*(1 + x)) + 20*pow(eg,3)*pow(1 + x,3)*(-1 + 2*Lt*(1 + x) - 2*gam2*x*pow(1 + x,2) + 2*pow(Lt,2)*x*pow(1 + x,2)) + 10*gam2*pow(1 + x,2)*(3 - 6*Lt*(1 + x) + 6*pow(Lt,2)*pow(1 + x,2) - 4*gam3*x*pow(1 + x,3) + 4*pow(Lt,3)*x*pow(1 + x,3)) + 10*pow(eg,2)*pow(1 + x,2)*(-3 + 4*gam3*x + 12*gam3*pow(x,2) + 12*gam3*pow(x,3) + 4*gam3*pow(x,4) + 6*Lt*(1 + x) - 6*pow(Lt,2)*pow(1 + x,2) - 4*pow(Lt,3)*x*pow(1 + x,3) + 6*gam2*pow(1 + x,2)*(1 + 2*Lt*x*(1 + x))) + 10*eg*(1 + x)*(-3 + 6*Lt - 6*pow(Lt,2) + 4*pow(Lt,3) - 2*gam4*x + 6*Lt*x - 12*pow(Lt,2)*x + 12*pow(Lt,3)*x + 2*pow(Lt,4)*x - 8*gam4*pow(x,2) - 6*pow(Lt,2)*pow(x,2) + 12*pow(Lt,3)*pow(x,2) + 8*pow(Lt,4)*pow(x,2) - 12*gam4*pow(x,3) + 4*pow(Lt,3)*pow(x,3) + 12*pow(Lt,4)*pow(x,3) - 8*gam4*pow(x,4) + 8*pow(Lt,4)*pow(x,4) - 2*gam4*pow(x,5) + 2*pow(Lt,4)*pow(x,5) + 6*pow(gam2,2)*x*pow(1 + x,4) - 4*gam3*pow(1 + x,3)*(1 + 2*Lt*x*(1 + x)) - 6*gam2*pow(1 + x,2)*(-1 + 2*Lt*(1 + x) + 2*pow(Lt,2)*x*pow(1 + x,2))))))/(gam0*pow(1 + x,7)));
    
    
    SubtrDD2.push_back((egamexp*pow(1 - tau,2*(1 + x))*x*(-1 + 2*x))/(2.*gam0*(1 + x)));
    SubtrDD2.push_back(-(egamexp*pow(1 - tau,2*(1 + x))*(1 - 2*(2 + eg + gam1 - Lt)*x + 2*(-1 + eg + gam1 - Lt)*pow(x,2) + 4*(eg + gam1 - Lt)*pow(x,3)))/(2.*gam0*pow(1 + x,2)));
    SubtrDD2.push_back((egamexp*pow(1 - tau,2*(1 + x))*(3 - 2*Lt + 2*gam2*x + 6*Lt*x - 2*pow(Lt,2)*x + 12*Lt*pow(x,2) - 6*gam2*pow(x,3) + 4*Lt*pow(x,3) + 6*pow(Lt,2)*pow(x,3) - 4*gam2*pow(x,4) + 4*pow(Lt,2)*pow(x,4) + 2*pow(eg,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(gam1,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*eg*(1 + x)*(1 - 2*(2 + gam1 - Lt)*x + 2*(-1 + gam1 - Lt)*pow(x,2) + 4*(gam1 - Lt)*pow(x,3)) - 2*gam1*(1 + x)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))))/(gam0*pow(1 + x,3)));
    SubtrDD2.push_back(-((egamexp*pow(1 - tau,2*(1 + x))*(9 - 6*gam2 - 18*Lt + 6*pow(Lt,2) + 12*gam2*x - 4*gam3*x - 18*Lt*x - 12*gam2*Lt*x - 12*pow(Lt,2)*x + 4*pow(Lt,3)*x + 54*gam2*pow(x,2) - 4*gam3*pow(x,2) - 12*gam2*Lt*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 4*pow(Lt,3)*pow(x,2) + 48*gam2*pow(x,3) + 12*gam3*pow(x,3) + 36*gam2*Lt*pow(x,3) - 48*pow(Lt,2)*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 12*gam2*pow(x,4) + 20*gam3*pow(x,4) + 60*gam2*Lt*pow(x,4) - 12*pow(Lt,2)*pow(x,4) - 20*pow(Lt,3)*pow(x,4) + 8*gam3*pow(x,5) + 24*gam2*Lt*pow(x,5) - 8*pow(Lt,3)*pow(x,5) + 4*pow(eg,3)*x*pow(1 + x,3)*(-1 + 2*x) + 4*pow(gam1,3)*x*pow(1 + x,3)*(-1 + 2*x) + 6*pow(eg,2)*pow(1 + x,2)*(1 - 2*(2 + gam1 - Lt)*x + 2*(-1 + gam1 - Lt)*pow(x,2) + 4*(gam1 - Lt)*pow(x,3)) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam1*(1 + x)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 6*eg*(1 + x)*(3 + 2*gam2*x - 6*gam2*pow(x,3) - 4*gam2*pow(x,4) + 2*pow(gam1,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)) - 2*gam1*(1 + x)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)))))/(gam0*pow(1 + x,4))));
    SubtrDD2.push_back((4*egamexp*pow(1 - tau,2*(1 + x))*(9 - 18*gam2 + 4*gam3 - 18*Lt + 12*gam2*Lt + 18*pow(Lt,2) - 4*pow(Lt,3) - 36*gam2*x - 6*pow(gam2,2)*x - 4*gam3*x + 2*gam4*x - 18*Lt*x - 12*gam2*Lt*x + 8*gam3*Lt*x + 36*pow(Lt,2)*x + 12*gam2*pow(Lt,2)*x + 4*pow(Lt,3)*x - 2*pow(Lt,4)*x - 18*gam2*pow(x,2) - 12*pow(gam2,2)*pow(x,2) - 44*gam3*pow(x,2) + 4*gam4*pow(x,2) - 132*gam2*Lt*pow(x,2) + 16*gam3*Lt*pow(x,2) + 18*pow(Lt,2)*pow(x,2) + 24*gam2*pow(Lt,2)*pow(x,2) + 44*pow(Lt,3)*pow(x,2) - 4*pow(Lt,4)*pow(x,2) + 12*pow(gam2,2)*pow(x,3) - 68*gam3*pow(x,3) - 4*gam4*pow(x,3) - 204*gam2*Lt*pow(x,3) - 16*gam3*Lt*pow(x,3) - 24*gam2*pow(Lt,2)*pow(x,3) + 68*pow(Lt,3)*pow(x,3) + 4*pow(Lt,4)*pow(x,3) + 48*pow(gam2,2)*pow(x,4) - 40*gam3*pow(x,4) - 16*gam4*pow(x,4) - 120*gam2*Lt*pow(x,4) - 64*gam3*Lt*pow(x,4) - 96*gam2*pow(Lt,2)*pow(x,4) + 40*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) + 42*pow(gam2,2)*pow(x,5) - 8*gam3*pow(x,5) - 14*gam4*pow(x,5) - 24*gam2*Lt*pow(x,5) - 56*gam3*Lt*pow(x,5) - 84*gam2*pow(Lt,2)*pow(x,5) + 8*pow(Lt,3)*pow(x,5) + 14*pow(Lt,4)*pow(x,5) + 12*pow(gam2,2)*pow(x,6) - 4*gam4*pow(x,6) - 16*gam3*Lt*pow(x,6) - 24*gam2*pow(Lt,2)*pow(x,6) + 4*pow(Lt,4)*pow(x,6) + 2*pow(eg,4)*x*pow(1 + x,4)*(-1 + 2*x) + 2*pow(gam1,4)*x*pow(1 + x,4)*(-1 + 2*x) + 4*pow(eg,3)*pow(1 + x,3)*(1 - 2*(2 + gam1 - Lt)*x + 2*(-1 + gam1 - Lt)*pow(x,2) + 4*(gam1 - Lt)*pow(x,3)) - 4*pow(gam1,3)*pow(1 + x,3)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*pow(gam1,2)*pow(1 + x,2)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 6*pow(eg,2)*pow(1 + x,2)*(3 + 2*gam2*x - 6*gam2*pow(x,3) - 4*gam2*pow(x,4) + 2*pow(gam1,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)) - 2*gam1*(1 + x)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 2*gam1*(1 + x)*(9 - 4*gam3*x - 4*gam3*pow(x,2) + 12*gam3*pow(x,3) + 20*gam3*pow(x,4) + 8*gam3*pow(x,5) - 18*Lt*(1 + x) - 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 2*eg*(1 + x)*(9 - 18*Lt + 6*pow(Lt,2) - 4*gam3*x - 18*Lt*x - 12*pow(Lt,2)*x + 4*pow(Lt,3)*x - 4*gam3*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 4*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) - 48*pow(Lt,2)*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 20*gam3*pow(x,4) - 12*pow(Lt,2)*pow(x,4) - 20*pow(Lt,3)*pow(x,4) + 8*gam3*pow(x,5) - 8*pow(Lt,3)*pow(x,5) + 4*pow(gam1,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam1*(1 + x)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))))))/(gam0*pow(1 + x,5)));
    SubtrDD2.push_back((-4*egamexp*pow(1 - tau,2*(1 + x))*(45 - 90*gam2 + 30*pow(gam2,2) + 60*gam3 - 10*gam4 - 90*Lt + 180*gam2*Lt - 40*gam3*Lt + 90*pow(Lt,2) - 60*gam2*pow(Lt,2) - 60*pow(Lt,3) + 10*pow(Lt,4) - 180*gam2*x + 180*gam3*x + 40*gam2*gam3*x - 4*gam5*x - 90*Lt*x + 540*gam2*Lt*x + 60*pow(gam2,2)*Lt*x - 20*gam4*Lt*x + 180*pow(Lt,2)*x - 40*gam3*pow(Lt,2)*x - 180*pow(Lt,3)*x - 40*gam2*pow(Lt,3)*x + 4*pow(Lt,5)*x - 90*gam2*pow(x,2) - 360*pow(gam2,2)*pow(x,2) + 180*gam3*pow(x,2) + 120*gam2*gam3*pow(x,2) + 120*gam4*pow(x,2) - 12*gam5*pow(x,2) + 540*gam2*Lt*pow(x,2) + 180*pow(gam2,2)*Lt*pow(x,2) + 480*gam3*Lt*pow(x,2) - 60*gam4*Lt*pow(x,2) + 90*pow(Lt,2)*pow(x,2) + 720*gam2*pow(Lt,2)*pow(x,2) - 120*gam3*pow(Lt,2)*pow(x,2) - 180*pow(Lt,3)*pow(x,2) - 120*gam2*pow(Lt,3)*pow(x,2) - 120*pow(Lt,4)*pow(x,2) + 12*pow(Lt,5)*pow(x,2) - 840*pow(gam2,2)*pow(x,3) + 60*gam3*pow(x,3) + 280*gam4*pow(x,3) + 180*gam2*Lt*pow(x,3) + 1120*gam3*Lt*pow(x,3) + 1680*gam2*pow(Lt,2)*pow(x,3) - 60*pow(Lt,3)*pow(x,3) - 280*pow(Lt,4)*pow(x,3) - 810*pow(gam2,2)*pow(x,4) - 400*gam2*gam3*pow(x,4) + 270*gam4*pow(x,4) + 40*gam5*pow(x,4) - 600*pow(gam2,2)*Lt*pow(x,4) + 1080*gam3*Lt*pow(x,4) + 200*gam4*Lt*pow(x,4) + 1620*gam2*pow(Lt,2)*pow(x,4) + 400*gam3*pow(Lt,2)*pow(x,4) + 400*gam2*pow(Lt,3)*pow(x,4) - 270*pow(Lt,4)*pow(x,4) - 40*pow(Lt,5)*pow(x,4) - 360*pow(gam2,2)*pow(x,5) - 600*gam2*gam3*pow(x,5) + 120*gam4*pow(x,5) + 60*gam5*pow(x,5) - 900*pow(gam2,2)*Lt*pow(x,5) + 480*gam3*Lt*pow(x,5) + 300*gam4*Lt*pow(x,5) + 720*gam2*pow(Lt,2)*pow(x,5) + 600*gam3*pow(Lt,2)*pow(x,5) + 600*gam2*pow(Lt,3)*pow(x,5) - 120*pow(Lt,4)*pow(x,5) - 60*pow(Lt,5)*pow(x,5) - 60*pow(gam2,2)*pow(x,6) - 360*gam2*gam3*pow(x,6) + 20*gam4*pow(x,6) + 36*gam5*pow(x,6) - 540*pow(gam2,2)*Lt*pow(x,6) + 80*gam3*Lt*pow(x,6) + 180*gam4*Lt*pow(x,6) + 120*gam2*pow(Lt,2)*pow(x,6) + 360*gam3*pow(Lt,2)*pow(x,6) + 360*gam2*pow(Lt,3)*pow(x,6) - 20*pow(Lt,4)*pow(x,6) - 36*pow(Lt,5)*pow(x,6) - 80*gam2*gam3*pow(x,7) + 8*gam5*pow(x,7) - 120*pow(gam2,2)*Lt*pow(x,7) + 40*gam4*Lt*pow(x,7) + 80*gam3*pow(Lt,2)*pow(x,7) + 80*gam2*pow(Lt,3)*pow(x,7) - 8*pow(Lt,5)*pow(x,7) + 4*pow(eg,5)*x*pow(1 + x,5)*(-1 + 2*x) + 4*pow(gam1,5)*x*pow(1 + x,5)*(-1 + 2*x) + 10*pow(eg,4)*pow(1 + x,4)*(1 - 2*(2 + gam1 - Lt)*x + 2*(-1 + gam1 - Lt)*pow(x,2) + 4*(gam1 - Lt)*pow(x,3)) - 10*pow(gam1,4)*pow(1 + x,4)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 20*pow(gam1,3)*pow(1 + x,3)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 20*pow(eg,3)*pow(1 + x,3)*(3 + 2*gam2*x - 6*gam2*pow(x,3) - 4*gam2*pow(x,4) + 2*pow(gam1,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)) - 2*gam1*(1 + x)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 10*pow(gam1,2)*pow(1 + x,2)*(9 - 4*gam3*x - 4*gam3*pow(x,2) + 12*gam3*pow(x,3) + 20*gam3*pow(x,4) + 8*gam3*pow(x,5) - 18*Lt*(1 + x) - 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 10*gam1*(1 + x)*(9 - 18*Lt + 18*pow(Lt,2) - 4*pow(Lt,3) + 2*gam4*x - 18*Lt*x + 36*pow(Lt,2)*x + 4*pow(Lt,3)*x - 2*pow(Lt,4)*x + 4*gam4*pow(x,2) + 18*pow(Lt,2)*pow(x,2) + 44*pow(Lt,3)*pow(x,2) - 4*pow(Lt,4)*pow(x,2) - 4*gam4*pow(x,3) + 68*pow(Lt,3)*pow(x,3) + 4*pow(Lt,4)*pow(x,3) - 16*gam4*pow(x,4) + 40*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 14*gam4*pow(x,5) + 8*pow(Lt,3)*pow(x,5) + 14*pow(Lt,4)*pow(x,5) - 4*gam4*pow(x,6) + 4*pow(Lt,4)*pow(x,6) + 6*pow(gam2,2)*x*pow(1 + x,4)*(-1 + 2*x) - 4*gam3*pow(1 + x,3)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(3 + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)))) + 10*pow(eg,2)*pow(1 + x,2)*(9 - 18*Lt + 6*pow(Lt,2) - 4*gam3*x - 18*Lt*x - 12*pow(Lt,2)*x + 4*pow(Lt,3)*x - 4*gam3*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 4*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) - 48*pow(Lt,2)*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 20*gam3*pow(x,4) - 12*pow(Lt,2)*pow(x,4) - 20*pow(Lt,3)*pow(x,4) + 8*gam3*pow(x,5) - 8*pow(Lt,3)*pow(x,5) + 4*pow(gam1,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam1*(1 + x)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)))) + 10*eg*(1 + x)*(9 + 4*gam3 - 18*Lt + 18*pow(Lt,2) - 4*pow(Lt,3) - 4*gam3*x + 2*gam4*x - 18*Lt*x + 8*gam3*Lt*x + 36*pow(Lt,2)*x + 4*pow(Lt,3)*x - 2*pow(Lt,4)*x - 44*gam3*pow(x,2) + 4*gam4*pow(x,2) + 16*gam3*Lt*pow(x,2) + 18*pow(Lt,2)*pow(x,2) + 44*pow(Lt,3)*pow(x,2) - 4*pow(Lt,4)*pow(x,2) - 68*gam3*pow(x,3) - 4*gam4*pow(x,3) - 16*gam3*Lt*pow(x,3) + 68*pow(Lt,3)*pow(x,3) + 4*pow(Lt,4)*pow(x,3) - 40*gam3*pow(x,4) - 16*gam4*pow(x,4) - 64*gam3*Lt*pow(x,4) + 40*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 8*gam3*pow(x,5) - 14*gam4*pow(x,5) - 56*gam3*Lt*pow(x,5) + 8*pow(Lt,3)*pow(x,5) + 14*pow(Lt,4)*pow(x,5) - 4*gam4*pow(x,6) - 16*gam3*Lt*pow(x,6) + 4*pow(Lt,4)*pow(x,6) + 2*pow(gam1,4)*x*pow(1 + x,4)*(-1 + 2*x) + 6*pow(gam2,2)*x*pow(1 + x,4)*(-1 + 2*x) - 4*pow(gam1,3)*pow(1 + x,3)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(3 + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 6*pow(gam1,2)*pow(1 + x,2)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 2*gam1*(1 + x)*(9 - 4*gam3*x - 4*gam3*pow(x,2) + 12*gam3*pow(x,3) + 20*gam3*pow(x,4) + 8*gam3*pow(x,5) - 18*Lt*(1 + x) - 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))))))/(gam0*pow(1 + x,6)));
    SubtrDD2.push_back((8*egamexp*pow(1 - tau,2*(1 + x))*(135 - 270*gam2 + 270*pow(gam2,2) + 180*gam3 - 120*gam2*gam3 - 90*gam4 + 12*gam5 - 270*Lt + 540*gam2*Lt - 180*pow(gam2,2)*Lt - 360*gam3*Lt + 60*gam4*Lt + 270*pow(Lt,2) - 540*gam2*pow(Lt,2) + 120*gam3*pow(Lt,2) - 180*pow(Lt,3) + 120*gam2*pow(Lt,3) + 90*pow(Lt,4) - 12*pow(Lt,5) - 540*gam2*x + 1080*pow(gam2,2)*x + 60*pow(gam2,3)*x + 540*gam3*x - 120*gam2*gam3*x - 40*pow(gam3,2)*x - 360*gam4*x - 60*gam2*gam4*x + 12*gam5*x + 4*gam6*x - 270*Lt*x + 1620*gam2*Lt*x - 180*pow(gam2,2)*Lt*x - 1440*gam3*Lt*x - 240*gam2*gam3*Lt*x + 60*gam4*Lt*x + 24*gam5*Lt*x + 540*pow(Lt,2)*x - 2160*gam2*pow(Lt,2)*x - 180*pow(gam2,2)*pow(Lt,2)*x + 120*gam3*pow(Lt,2)*x + 60*gam4*pow(Lt,2)*x - 540*pow(Lt,3)*x + 120*gam2*pow(Lt,3)*x + 80*gam3*pow(Lt,3)*x + 360*pow(Lt,4)*x + 60*gam2*pow(Lt,4)*x - 12*pow(Lt,5)*x - 4*pow(Lt,6)*x - 270*gam2*pow(x,2) + 1620*pow(gam2,2)*pow(x,2) + 240*pow(gam2,3)*pow(x,2) + 540*gam3*pow(x,2) + 1440*gam2*gam3*pow(x,2) - 160*pow(gam3,2)*pow(x,2) - 540*gam4*pow(x,2) - 240*gam2*gam4*pow(x,2) - 144*gam5*pow(x,2) + 16*gam6*pow(x,2) + 1620*gam2*Lt*pow(x,2) + 2160*pow(gam2,2)*Lt*pow(x,2) - 2160*gam3*Lt*pow(x,2) - 960*gam2*gam3*Lt*pow(x,2) - 720*gam4*Lt*pow(x,2) + 96*gam5*Lt*pow(x,2) + 270*pow(Lt,2)*pow(x,2) - 3240*gam2*pow(Lt,2)*pow(x,2) - 720*pow(gam2,2)*pow(Lt,2)*pow(x,2) - 1440*gam3*pow(Lt,2)*pow(x,2) + 240*gam4*pow(Lt,2)*pow(x,2) - 540*pow(Lt,3)*pow(x,2) - 1440*gam2*pow(Lt,3)*pow(x,2) + 320*gam3*pow(Lt,3)*pow(x,2) + 540*pow(Lt,4)*pow(x,2) + 240*gam2*pow(Lt,4)*pow(x,2) + 144*pow(Lt,5)*pow(x,2) - 16*pow(Lt,6)*pow(x,2) + 1080*pow(gam2,2)*pow(x,3) + 180*pow(gam2,3)*pow(x,3) + 180*gam3*pow(x,3) + 4800*gam2*gam3*pow(x,3) - 120*pow(gam3,2)*pow(x,3) - 360*gam4*pow(x,3) - 180*gam2*gam4*pow(x,3) - 480*gam5*pow(x,3) + 12*gam6*pow(x,3) + 540*gam2*Lt*pow(x,3) + 7200*pow(gam2,2)*Lt*pow(x,3) - 1440*gam3*Lt*pow(x,3) - 720*gam2*gam3*Lt*pow(x,3) - 2400*gam4*Lt*pow(x,3) + 72*gam5*Lt*pow(x,3) - 2160*gam2*pow(Lt,2)*pow(x,3) - 540*pow(gam2,2)*pow(Lt,2)*pow(x,3) - 4800*gam3*pow(Lt,2)*pow(x,3) + 180*gam4*pow(Lt,2)*pow(x,3) - 180*pow(Lt,3)*pow(x,3) - 4800*gam2*pow(Lt,3)*pow(x,3) + 240*gam3*pow(Lt,3)*pow(x,3) + 360*pow(Lt,4)*pow(x,3) + 180*gam2*pow(Lt,4)*pow(x,3) + 480*pow(Lt,5)*pow(x,3) - 12*pow(Lt,6)*pow(x,3) + 270*pow(gam2,2)*pow(x,4) - 600*pow(gam2,3)*pow(x,4) + 6600*gam2*gam3*pow(x,4) + 400*pow(gam3,2)*pow(x,4) - 90*gam4*pow(x,4) + 600*gam2*gam4*pow(x,4) - 660*gam5*pow(x,4) - 40*gam6*pow(x,4) + 9900*pow(gam2,2)*Lt*pow(x,4) - 360*gam3*Lt*pow(x,4) + 2400*gam2*gam3*Lt*pow(x,4) - 3300*gam4*Lt*pow(x,4) - 240*gam5*Lt*pow(x,4) - 540*gam2*pow(Lt,2)*pow(x,4) + 1800*pow(gam2,2)*pow(Lt,2)*pow(x,4) - 6600*gam3*pow(Lt,2)*pow(x,4) - 600*gam4*pow(Lt,2)*pow(x,4) - 6600*gam2*pow(Lt,3)*pow(x,4) - 800*gam3*pow(Lt,3)*pow(x,4) + 90*pow(Lt,4)*pow(x,4) - 600*gam2*pow(Lt,4)*pow(x,4) + 660*pow(Lt,5)*pow(x,4) + 40*pow(Lt,6)*pow(x,4) - 1500*pow(gam2,3)*pow(x,5) + 4680*gam2*gam3*pow(x,5) + 1000*pow(gam3,2)*pow(x,5) + 1500*gam2*gam4*pow(x,5) - 468*gam5*pow(x,5) - 100*gam6*pow(x,5) + 7020*pow(gam2,2)*Lt*pow(x,5) + 6000*gam2*gam3*Lt*pow(x,5) - 2340*gam4*Lt*pow(x,5) - 600*gam5*Lt*pow(x,5) + 4500*pow(gam2,2)*pow(Lt,2)*pow(x,5) - 4680*gam3*pow(Lt,2)*pow(x,5) - 1500*gam4*pow(Lt,2)*pow(x,5) - 4680*gam2*pow(Lt,3)*pow(x,5) - 2000*gam3*pow(Lt,3)*pow(x,5) - 1500*gam2*pow(Lt,4)*pow(x,5) + 468*pow(Lt,5)*pow(x,5) + 100*pow(Lt,6)*pow(x,5) - 1440*pow(gam2,3)*pow(x,6) + 1680*gam2*gam3*pow(x,6) + 960*pow(gam3,2)*pow(x,6) + 1440*gam2*gam4*pow(x,6) - 168*gam5*pow(x,6) - 96*gam6*pow(x,6) + 2520*pow(gam2,2)*Lt*pow(x,6) + 5760*gam2*gam3*Lt*pow(x,6) - 840*gam4*Lt*pow(x,6) - 576*gam5*Lt*pow(x,6) + 4320*pow(gam2,2)*pow(Lt,2)*pow(x,6) - 1680*gam3*pow(Lt,2)*pow(x,6) - 1440*gam4*pow(Lt,2)*pow(x,6) - 1680*gam2*pow(Lt,3)*pow(x,6) - 1920*gam3*pow(Lt,3)*pow(x,6) - 1440*gam2*pow(Lt,4)*pow(x,6) + 168*pow(Lt,5)*pow(x,6) + 96*pow(Lt,6)*pow(x,6) - 660*pow(gam2,3)*pow(x,7) + 240*gam2*gam3*pow(x,7) + 440*pow(gam3,2)*pow(x,7) + 660*gam2*gam4*pow(x,7) - 24*gam5*pow(x,7) - 44*gam6*pow(x,7) + 360*pow(gam2,2)*Lt*pow(x,7) + 2640*gam2*gam3*Lt*pow(x,7) - 120*gam4*Lt*pow(x,7) - 264*gam5*Lt*pow(x,7) + 1980*pow(gam2,2)*pow(Lt,2)*pow(x,7) - 240*gam3*pow(Lt,2)*pow(x,7) - 660*gam4*pow(Lt,2)*pow(x,7) - 240*gam2*pow(Lt,3)*pow(x,7) - 880*gam3*pow(Lt,3)*pow(x,7) - 660*gam2*pow(Lt,4)*pow(x,7) + 24*pow(Lt,5)*pow(x,7) + 44*pow(Lt,6)*pow(x,7) - 120*pow(gam2,3)*pow(x,8) + 80*pow(gam3,2)*pow(x,8) + 120*gam2*gam4*pow(x,8) - 8*gam6*pow(x,8) + 480*gam2*gam3*Lt*pow(x,8) - 48*gam5*Lt*pow(x,8) + 360*pow(gam2,2)*pow(Lt,2)*pow(x,8) - 120*gam4*pow(Lt,2)*pow(x,8) - 160*gam3*pow(Lt,3)*pow(x,8) - 120*gam2*pow(Lt,4)*pow(x,8) + 8*pow(Lt,6)*pow(x,8) + 4*pow(eg,6)*x*pow(1 + x,6)*(-1 + 2*x) + 4*pow(gam1,6)*x*pow(1 + x,6)*(-1 + 2*x) + 12*pow(eg,5)*pow(1 + x,5)*(1 - 2*(2 + gam1 - Lt)*x + 2*(-1 + gam1 - Lt)*pow(x,2) + 4*(gam1 - Lt)*pow(x,3)) - 12*pow(gam1,5)*pow(1 + x,5)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 30*pow(gam1,4)*pow(1 + x,4)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 30*pow(eg,4)*pow(1 + x,4)*(3 + 2*gam2*x - 6*gam2*pow(x,3) - 4*gam2*pow(x,4) + 2*pow(gam1,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)) - 2*gam1*(1 + x)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 20*pow(gam1,3)*pow(1 + x,3)*(9 - 4*gam3*x - 4*gam3*pow(x,2) + 12*gam3*pow(x,3) + 20*gam3*pow(x,4) + 8*gam3*pow(x,5) - 18*Lt*(1 + x) - 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 30*pow(gam1,2)*pow(1 + x,2)*(9 - 18*Lt + 18*pow(Lt,2) - 4*pow(Lt,3) + 2*gam4*x - 18*Lt*x + 36*pow(Lt,2)*x + 4*pow(Lt,3)*x - 2*pow(Lt,4)*x + 4*gam4*pow(x,2) + 18*pow(Lt,2)*pow(x,2) + 44*pow(Lt,3)*pow(x,2) - 4*pow(Lt,4)*pow(x,2) - 4*gam4*pow(x,3) + 68*pow(Lt,3)*pow(x,3) + 4*pow(Lt,4)*pow(x,3) - 16*gam4*pow(x,4) + 40*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 14*gam4*pow(x,5) + 8*pow(Lt,3)*pow(x,5) + 14*pow(Lt,4)*pow(x,5) - 4*gam4*pow(x,6) + 4*pow(Lt,4)*pow(x,6) + 6*pow(gam2,2)*x*pow(1 + x,4)*(-1 + 2*x) - 4*gam3*pow(1 + x,3)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(3 + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)))) - 6*gam1*(1 + x)*(-45 + 10*gam4 + 90*Lt - 90*pow(Lt,2) + 60*pow(Lt,3) - 10*pow(Lt,4) + 4*gam5*x + 90*Lt*x + 20*gam4*Lt*x - 180*pow(Lt,2)*x + 180*pow(Lt,3)*x - 4*pow(Lt,5)*x - 120*gam4*pow(x,2) + 12*gam5*pow(x,2) + 60*gam4*Lt*pow(x,2) - 90*pow(Lt,2)*pow(x,2) + 180*pow(Lt,3)*pow(x,2) + 120*pow(Lt,4)*pow(x,2) - 12*pow(Lt,5)*pow(x,2) - 280*gam4*pow(x,3) + 60*pow(Lt,3)*pow(x,3) + 280*pow(Lt,4)*pow(x,3) - 270*gam4*pow(x,4) - 40*gam5*pow(x,4) - 200*gam4*Lt*pow(x,4) + 270*pow(Lt,4)*pow(x,4) + 40*pow(Lt,5)*pow(x,4) - 120*gam4*pow(x,5) - 60*gam5*pow(x,5) - 300*gam4*Lt*pow(x,5) + 120*pow(Lt,4)*pow(x,5) + 60*pow(Lt,5)*pow(x,5) - 20*gam4*pow(x,6) - 36*gam5*pow(x,6) - 180*gam4*Lt*pow(x,6) + 20*pow(Lt,4)*pow(x,6) + 36*pow(Lt,5)*pow(x,6) - 8*gam5*pow(x,7) - 40*gam4*Lt*pow(x,7) + 8*pow(Lt,5)*pow(x,7) + 30*pow(gam2,2)*pow(1 + x,4)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 10*gam2*pow(1 + x,2)*(-9 + 18*Lt*(1 + x) - 4*gam3*x*pow(1 + x,3)*(-1 + 2*x) + 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) + 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2))) - 20*gam3*pow(1 + x,3)*(3 + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)))) + 20*pow(eg,3)*pow(1 + x,3)*(9 - 18*Lt + 6*pow(Lt,2) - 4*gam3*x - 18*Lt*x - 12*pow(Lt,2)*x + 4*pow(Lt,3)*x - 4*gam3*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 4*pow(Lt,3)*pow(x,2) + 12*gam3*pow(x,3) - 48*pow(Lt,2)*pow(x,3) - 12*pow(Lt,3)*pow(x,3) + 20*gam3*pow(x,4) - 12*pow(Lt,2)*pow(x,4) - 20*pow(Lt,3)*pow(x,4) + 8*gam3*pow(x,5) - 8*pow(Lt,3)*pow(x,5) + 4*pow(gam1,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 6*gam1*(1 + x)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)))) + 30*pow(eg,2)*pow(1 + x,2)*(9 + 4*gam3 - 18*Lt + 18*pow(Lt,2) - 4*pow(Lt,3) - 4*gam3*x + 2*gam4*x - 18*Lt*x + 8*gam3*Lt*x + 36*pow(Lt,2)*x + 4*pow(Lt,3)*x - 2*pow(Lt,4)*x - 44*gam3*pow(x,2) + 4*gam4*pow(x,2) + 16*gam3*Lt*pow(x,2) + 18*pow(Lt,2)*pow(x,2) + 44*pow(Lt,3)*pow(x,2) - 4*pow(Lt,4)*pow(x,2) - 68*gam3*pow(x,3) - 4*gam4*pow(x,3) - 16*gam3*Lt*pow(x,3) + 68*pow(Lt,3)*pow(x,3) + 4*pow(Lt,4)*pow(x,3) - 40*gam3*pow(x,4) - 16*gam4*pow(x,4) - 64*gam3*Lt*pow(x,4) + 40*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 8*gam3*pow(x,5) - 14*gam4*pow(x,5) - 56*gam3*Lt*pow(x,5) + 8*pow(Lt,3)*pow(x,5) + 14*pow(Lt,4)*pow(x,5) - 4*gam4*pow(x,6) - 16*gam3*Lt*pow(x,6) + 4*pow(Lt,4)*pow(x,6) + 2*pow(gam1,4)*x*pow(1 + x,4)*(-1 + 2*x) + 6*pow(gam2,2)*x*pow(1 + x,4)*(-1 + 2*x) - 4*pow(gam1,3)*pow(1 + x,3)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(3 + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 6*pow(gam1,2)*pow(1 + x,2)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 2*gam1*(1 + x)*(9 - 4*gam3*x - 4*gam3*pow(x,2) + 12*gam3*pow(x,3) + 20*gam3*pow(x,4) + 8*gam3*pow(x,5) - 18*Lt*(1 + x) - 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)))) + 6*eg*(1 + x)*(45 + 60*gam3 - 10*gam4 - 90*Lt - 40*gam3*Lt + 90*pow(Lt,2) - 60*pow(Lt,3) + 10*pow(Lt,4) + 180*gam3*x - 4*gam5*x - 90*Lt*x - 20*gam4*Lt*x + 180*pow(Lt,2)*x - 40*gam3*pow(Lt,2)*x - 180*pow(Lt,3)*x + 4*pow(Lt,5)*x + 180*gam3*pow(x,2) + 120*gam4*pow(x,2) - 12*gam5*pow(x,2) + 480*gam3*Lt*pow(x,2) - 60*gam4*Lt*pow(x,2) + 90*pow(Lt,2)*pow(x,2) - 120*gam3*pow(Lt,2)*pow(x,2) - 180*pow(Lt,3)*pow(x,2) - 120*pow(Lt,4)*pow(x,2) + 12*pow(Lt,5)*pow(x,2) + 60*gam3*pow(x,3) + 280*gam4*pow(x,3) + 1120*gam3*Lt*pow(x,3) - 60*pow(Lt,3)*pow(x,3) - 280*pow(Lt,4)*pow(x,3) + 270*gam4*pow(x,4) + 40*gam5*pow(x,4) + 1080*gam3*Lt*pow(x,4) + 200*gam4*Lt*pow(x,4) + 400*gam3*pow(Lt,2)*pow(x,4) - 270*pow(Lt,4)*pow(x,4) - 40*pow(Lt,5)*pow(x,4) + 120*gam4*pow(x,5) + 60*gam5*pow(x,5) + 480*gam3*Lt*pow(x,5) + 300*gam4*Lt*pow(x,5) + 600*gam3*pow(Lt,2)*pow(x,5) - 120*pow(Lt,4)*pow(x,5) - 60*pow(Lt,5)*pow(x,5) + 20*gam4*pow(x,6) + 36*gam5*pow(x,6) + 80*gam3*Lt*pow(x,6) + 180*gam4*Lt*pow(x,6) + 360*gam3*pow(Lt,2)*pow(x,6) - 20*pow(Lt,4)*pow(x,6) - 36*pow(Lt,5)*pow(x,6) + 8*gam5*pow(x,7) + 40*gam4*Lt*pow(x,7) + 80*gam3*pow(Lt,2)*pow(x,7) - 8*pow(Lt,5)*pow(x,7) + 4*pow(gam1,5)*x*pow(1 + x,5)*(-1 + 2*x) - 10*pow(gam1,4)*pow(1 + x,4)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 30*pow(gam2,2)*pow(1 + x,4)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) + 10*gam2*pow(1 + x,2)*(-9 + 18*Lt*(1 + x) - 4*gam3*x*pow(1 + x,3)*(-1 + 2*x) + 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) + 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2))) + 20*pow(gam1,3)*pow(1 + x,3)*(3 - 2*gam2*x*pow(1 + x,2)*(-1 + 2*x) + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3))) + 10*pow(gam1,2)*pow(1 + x,2)*(9 - 4*gam3*x - 4*gam3*pow(x,2) + 12*gam3*pow(x,3) + 20*gam3*pow(x,4) + 8*gam3*pow(x,5) - 18*Lt*(1 + x) - 4*pow(Lt,3)*x*pow(1 + x,3)*(-1 + 2*x) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + 4*x + 2*pow(x,2)) + 6*gam2*pow(1 + x,2)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3))) + 10*gam1*(1 + x)*(9 - 18*Lt + 18*pow(Lt,2) - 4*pow(Lt,3) + 2*gam4*x - 18*Lt*x + 36*pow(Lt,2)*x + 4*pow(Lt,3)*x - 2*pow(Lt,4)*x + 4*gam4*pow(x,2) + 18*pow(Lt,2)*pow(x,2) + 44*pow(Lt,3)*pow(x,2) - 4*pow(Lt,4)*pow(x,2) - 4*gam4*pow(x,3) + 68*pow(Lt,3)*pow(x,3) + 4*pow(Lt,4)*pow(x,3) - 16*gam4*pow(x,4) + 40*pow(Lt,3)*pow(x,4) + 16*pow(Lt,4)*pow(x,4) - 14*gam4*pow(x,5) + 8*pow(Lt,3)*pow(x,5) + 14*pow(Lt,4)*pow(x,5) - 4*gam4*pow(x,6) + 4*pow(Lt,4)*pow(x,6) + 6*pow(gam2,2)*x*pow(1 + x,4)*(-1 + 2*x) - 4*gam3*pow(1 + x,3)*(-1 - 2*(-2 + Lt)*x + 2*(1 + Lt)*pow(x,2) + 4*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(3 + 2*pow(Lt,2)*x*pow(1 + x,2)*(-1 + 2*x) + 2*Lt*(-1 + 3*x + 6*pow(x,2) + 2*pow(x,3)))))))/(gam0*pow(1 + x,7)));
    
    
    SubtrDD3.push_back((egamexp*pow(1 - tau,2*(1 + x))*(-1 + x)*x)/(4.*gam0));
    SubtrDD3.push_back(-(egamexp*pow(1 - tau,2*(1 + x))*(1 - (1 + 2*eg + 2*gam1 - 2*Lt)*x - 8*pow(x,2) + 2*(eg + gam1 - Lt)*pow(x,3)))/(4.*gam0*(1 + x)));
    SubtrDD3.push_back((egamexp*pow(1 - tau,2*(1 + x))*(1 - 2*Lt + 71*x + 2*gam2*x - 2*pow(Lt,2)*x + 64*pow(x,2) + 2*gam2*pow(x,2) + 18*Lt*pow(x,2) - 2*pow(Lt,2)*pow(x,2) - 2*gam2*pow(x,3) + 16*Lt*pow(x,3) + 2*pow(Lt,2)*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*pow(x,4) + 2*pow(eg,2)*(-1 + x)*x*pow(1 + x,2) + 2*pow(gam1,2)*(-1 + x)*x*pow(1 + x,2) + 2*eg*(1 + x)*(1 + (-1 - 2*gam1 + 2*Lt)*x - 8*pow(x,2) + 2*(gam1 - Lt)*pow(x,3)) - 2*gam1*(1 + x)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))))/(2.*gam0*pow(1 + x,2)));
    SubtrDD3.push_back(-(egamexp*pow(1 - tau,2*(1 + x))*(-189 - 6*gam2 - 6*Lt + 6*pow(Lt,2) - 171*x - 6*gam2*x - 4*gam3*x - 432*Lt*x - 12*gam2*Lt*x + 6*pow(Lt,2)*x + 4*pow(Lt,3)*x + 54*gam2*pow(x,2) - 8*gam3*pow(x,2) - 810*Lt*pow(x,2) - 24*gam2*Lt*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) + 102*gam2*pow(x,3) - 384*Lt*pow(x,3) - 102*pow(Lt,2)*pow(x,3) + 48*gam2*pow(x,4) + 8*gam3*pow(x,4) + 24*gam2*Lt*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 8*pow(Lt,3)*pow(x,4) + 4*gam3*pow(x,5) + 12*gam2*Lt*pow(x,5) - 4*pow(Lt,3)*pow(x,5) + 4*pow(eg,3)*(-1 + x)*x*pow(1 + x,3) + 4*pow(gam1,3)*(-1 + x)*x*pow(1 + x,3) + 6*pow(eg,2)*pow(1 + x,2)*(1 + (-1 - 2*gam1 + 2*Lt)*x - 8*pow(x,2) + 2*(gam1 - Lt)*pow(x,3)) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam1*(1 + x)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 6*eg*(1 + x)*(1 + 71*x + 2*gam2*x + 64*pow(x,2) + 2*gam2*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(gam1,2)*(-1 + x)*x*pow(1 + x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)) - 2*gam1*(1 + x)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)))))/(2.*gam0*pow(1 + x,3)));
    SubtrDD3.push_back((2*egamexp*pow(1 - tau,2*(1 + x))*(-189 - 6*gam2 + 4*gam3 + 378*Lt + 12*gam2*Lt + 6*pow(Lt,2) - 4*pow(Lt,3) - 171*x - 438*gam2*x - 6*pow(gam2,2)*x + 8*gam3*x + 2*gam4*x + 720*Lt*x + 24*gam2*Lt*x + 8*gam3*Lt*x + 438*pow(Lt,2)*x + 12*gam2*pow(Lt,2)*x - 8*pow(Lt,3)*x - 2*pow(Lt,4)*x - 1242*gam2*pow(x,2) - 18*pow(gam2,2)*pow(x,2) - 32*gam3*pow(x,2) + 6*gam4*pow(x,2) + 342*Lt*pow(x,2) - 96*gam2*Lt*pow(x,2) + 24*gam3*Lt*pow(x,2) + 1242*pow(Lt,2)*pow(x,2) + 36*gam2*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) - 1194*gam2*pow(x,3) - 12*pow(gam2,2)*pow(x,3) - 104*gam3*pow(x,3) + 4*gam4*pow(x,3) - 312*gam2*Lt*pow(x,3) + 16*gam3*Lt*pow(x,3) + 1194*pow(Lt,2)*pow(x,3) + 24*gam2*pow(Lt,2)*pow(x,3) + 104*pow(Lt,3)*pow(x,3) - 4*pow(Lt,4)*pow(x,3) - 384*gam2*pow(x,4) + 12*pow(gam2,2)*pow(x,4) - 100*gam3*pow(x,4) - 4*gam4*pow(x,4) - 300*gam2*Lt*pow(x,4) - 16*gam3*Lt*pow(x,4) + 384*pow(Lt,2)*pow(x,4) - 24*gam2*pow(Lt,2)*pow(x,4) + 100*pow(Lt,3)*pow(x,4) + 4*pow(Lt,4)*pow(x,4) + 18*pow(gam2,2)*pow(x,5) - 32*gam3*pow(x,5) - 6*gam4*pow(x,5) - 96*gam2*Lt*pow(x,5) - 24*gam3*Lt*pow(x,5) - 36*gam2*pow(Lt,2)*pow(x,5) + 32*pow(Lt,3)*pow(x,5) + 6*pow(Lt,4)*pow(x,5) + 6*pow(gam2,2)*pow(x,6) - 2*gam4*pow(x,6) - 8*gam3*Lt*pow(x,6) - 12*gam2*pow(Lt,2)*pow(x,6) + 2*pow(Lt,4)*pow(x,6) + 2*pow(eg,4)*(-1 + x)*x*pow(1 + x,4) + 2*pow(gam1,4)*(-1 + x)*x*pow(1 + x,4) + 4*pow(eg,3)*pow(1 + x,3)*(1 + (-1 - 2*gam1 + 2*Lt)*x - 8*pow(x,2) + 2*(gam1 - Lt)*pow(x,3)) - 4*pow(gam1,3)*pow(1 + x,3)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*pow(gam1,2)*pow(1 + x,2)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 6*pow(eg,2)*pow(1 + x,2)*(1 + 71*x + 2*gam2*x + 64*pow(x,2) + 2*gam2*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(gam1,2)*(-1 + x)*x*pow(1 + x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)) - 2*gam1*(1 + x)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 2*gam1*(1 + x)*(-189 - 171*x - 4*gam3*x - 8*gam3*pow(x,2) + 8*gam3*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) - 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 2*eg*(1 + x)*(-189 - 6*Lt + 6*pow(Lt,2) - 171*x - 4*gam3*x - 432*Lt*x + 6*pow(Lt,2)*x + 4*pow(Lt,3)*x - 8*gam3*pow(x,2) - 810*Lt*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) - 384*Lt*pow(x,3) - 102*pow(Lt,2)*pow(x,3) + 8*gam3*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 8*pow(Lt,3)*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*pow(x,5) + 4*pow(gam1,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam1*(1 + x)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))))))/(gam0*pow(1 + x,4)));
    SubtrDD3.push_back((-2*egamexp*pow(1 - tau,2*(1 + x))*(-945 + 1890*gam2 + 30*pow(gam2,2) + 20*gam3 - 10*gam4 + 1890*Lt + 60*gam2*Lt - 40*gam3*Lt - 1890*pow(Lt,2) - 60*gam2*pow(Lt,2) - 20*pow(Lt,3) + 10*pow(Lt,4) - 855*x + 5490*gam2*x + 90*pow(gam2,2)*x + 1480*gam3*x + 40*gam2*gam3*x - 30*gam4*x - 4*gam5*x + 3600*Lt*x + 4440*gam2*Lt*x + 60*pow(gam2,2)*Lt*x - 120*gam3*Lt*x - 20*gam4*Lt*x - 5490*pow(Lt,2)*x - 180*gam2*pow(Lt,2)*x - 40*gam3*pow(Lt,2)*x - 1480*pow(Lt,3)*x - 40*gam2*pow(Lt,3)*x + 30*pow(Lt,4)*x + 4*pow(Lt,5)*x + 5310*gam2*pow(x,2) - 180*pow(gam2,2)*pow(x,2) + 5600*gam3*pow(x,2) + 160*gam2*gam3*pow(x,2) + 60*gam4*pow(x,2) - 16*gam5*pow(x,2) + 1710*Lt*pow(x,2) + 16800*gam2*Lt*pow(x,2) + 240*pow(gam2,2)*Lt*pow(x,2) + 240*gam3*Lt*pow(x,2) - 80*gam4*Lt*pow(x,2) - 5310*pow(Lt,2)*pow(x,2) + 360*gam2*pow(Lt,2)*pow(x,2) - 160*gam3*pow(Lt,2)*pow(x,2) - 5600*pow(Lt,3)*pow(x,2) - 160*gam2*pow(Lt,3)*pow(x,2) - 60*pow(Lt,4)*pow(x,2) + 16*pow(Lt,5)*pow(x,2) + 1710*gam2*pow(x,3) - 1020*pow(gam2,2)*pow(x,3) + 8120*gam3*pow(x,3) + 200*gam2*gam3*pow(x,3) + 340*gam4*pow(x,3) - 20*gam5*pow(x,3) + 24360*gam2*Lt*pow(x,3) + 300*pow(gam2,2)*Lt*pow(x,3) + 1360*gam3*Lt*pow(x,3) - 100*gam4*Lt*pow(x,3) - 1710*pow(Lt,2)*pow(x,3) + 2040*gam2*pow(Lt,2)*pow(x,3) - 200*gam3*pow(Lt,2)*pow(x,3) - 8120*pow(Lt,3)*pow(x,3) - 200*gam2*pow(Lt,3)*pow(x,3) - 340*pow(Lt,4)*pow(x,3) + 20*pow(Lt,5)*pow(x,3) - 1530*pow(gam2,2)*pow(x,4) + 5260*gam3*pow(x,4) + 510*gam4*pow(x,4) + 15780*gam2*Lt*pow(x,4) + 2040*gam3*Lt*pow(x,4) + 3060*gam2*pow(Lt,2)*pow(x,4) - 5260*pow(Lt,3)*pow(x,4) - 510*pow(Lt,4)*pow(x,4) - 990*pow(gam2,2)*pow(x,5) + 1280*gam3*pow(x,5) - 200*gam2*gam3*pow(x,5) + 330*gam4*pow(x,5) + 20*gam5*pow(x,5) + 3840*gam2*Lt*pow(x,5) - 300*pow(gam2,2)*Lt*pow(x,5) + 1320*gam3*Lt*pow(x,5) + 100*gam4*Lt*pow(x,5) + 1980*gam2*pow(Lt,2)*pow(x,5) + 200*gam3*pow(Lt,2)*pow(x,5) - 1280*pow(Lt,3)*pow(x,5) + 200*gam2*pow(Lt,3)*pow(x,5) - 330*pow(Lt,4)*pow(x,5) - 20*pow(Lt,5)*pow(x,5) - 240*pow(gam2,2)*pow(x,6) - 160*gam2*gam3*pow(x,6) + 80*gam4*pow(x,6) + 16*gam5*pow(x,6) - 240*pow(gam2,2)*Lt*pow(x,6) + 320*gam3*Lt*pow(x,6) + 80*gam4*Lt*pow(x,6) + 480*gam2*pow(Lt,2)*pow(x,6) + 160*gam3*pow(Lt,2)*pow(x,6) + 160*gam2*pow(Lt,3)*pow(x,6) - 80*pow(Lt,4)*pow(x,6) - 16*pow(Lt,5)*pow(x,6) - 40*gam2*gam3*pow(x,7) + 4*gam5*pow(x,7) - 60*pow(gam2,2)*Lt*pow(x,7) + 20*gam4*Lt*pow(x,7) + 40*gam3*pow(Lt,2)*pow(x,7) + 40*gam2*pow(Lt,3)*pow(x,7) - 4*pow(Lt,5)*pow(x,7) + 4*pow(eg,5)*(-1 + x)*x*pow(1 + x,5) + 4*pow(gam1,5)*(-1 + x)*x*pow(1 + x,5) + 10*pow(eg,4)*pow(1 + x,4)*(1 + (-1 - 2*gam1 + 2*Lt)*x - 8*pow(x,2) + 2*(gam1 - Lt)*pow(x,3)) - 10*pow(gam1,4)*pow(1 + x,4)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 20*pow(gam1,3)*pow(1 + x,3)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 20*pow(eg,3)*pow(1 + x,3)*(1 + 71*x + 2*gam2*x + 64*pow(x,2) + 2*gam2*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(gam1,2)*(-1 + x)*x*pow(1 + x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)) - 2*gam1*(1 + x)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 10*pow(gam1,2)*pow(1 + x,2)*(-189 - 171*x - 4*gam3*x - 8*gam3*pow(x,2) + 8*gam3*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) - 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 10*gam1*(1 + x)*(-189 + 378*Lt + 6*pow(Lt,2) - 4*pow(Lt,3) - 171*x + 2*gam4*x + 720*Lt*x + 438*pow(Lt,2)*x - 8*pow(Lt,3)*x - 2*pow(Lt,4)*x + 6*gam4*pow(x,2) + 342*Lt*pow(x,2) + 1242*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) + 4*gam4*pow(x,3) + 1194*pow(Lt,2)*pow(x,3) + 104*pow(Lt,3)*pow(x,3) - 4*pow(Lt,4)*pow(x,3) - 4*gam4*pow(x,4) + 384*pow(Lt,2)*pow(x,4) + 100*pow(Lt,3)*pow(x,4) + 4*pow(Lt,4)*pow(x,4) - 6*gam4*pow(x,5) + 32*pow(Lt,3)*pow(x,5) + 6*pow(Lt,4)*pow(x,5) - 2*gam4*pow(x,6) + 2*pow(Lt,4)*pow(x,6) + 6*pow(gam2,2)*(-1 + x)*x*pow(1 + x,4) - 4*gam3*pow(1 + x,3)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(1 + 71*x + 64*pow(x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)))) + 10*pow(eg,2)*pow(1 + x,2)*(-189 - 6*Lt + 6*pow(Lt,2) - 171*x - 4*gam3*x - 432*Lt*x + 6*pow(Lt,2)*x + 4*pow(Lt,3)*x - 8*gam3*pow(x,2) - 810*Lt*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) - 384*Lt*pow(x,3) - 102*pow(Lt,2)*pow(x,3) + 8*gam3*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 8*pow(Lt,3)*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*pow(x,5) + 4*pow(gam1,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam1*(1 + x)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)))) + 10*eg*(1 + x)*(-189 + 4*gam3 + 378*Lt + 6*pow(Lt,2) - 4*pow(Lt,3) - 171*x + 8*gam3*x + 2*gam4*x + 720*Lt*x + 8*gam3*Lt*x + 438*pow(Lt,2)*x - 8*pow(Lt,3)*x - 2*pow(Lt,4)*x - 32*gam3*pow(x,2) + 6*gam4*pow(x,2) + 342*Lt*pow(x,2) + 24*gam3*Lt*pow(x,2) + 1242*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) - 104*gam3*pow(x,3) + 4*gam4*pow(x,3) + 16*gam3*Lt*pow(x,3) + 1194*pow(Lt,2)*pow(x,3) + 104*pow(Lt,3)*pow(x,3) - 4*pow(Lt,4)*pow(x,3) - 100*gam3*pow(x,4) - 4*gam4*pow(x,4) - 16*gam3*Lt*pow(x,4) + 384*pow(Lt,2)*pow(x,4) + 100*pow(Lt,3)*pow(x,4) + 4*pow(Lt,4)*pow(x,4) - 32*gam3*pow(x,5) - 6*gam4*pow(x,5) - 24*gam3*Lt*pow(x,5) + 32*pow(Lt,3)*pow(x,5) + 6*pow(Lt,4)*pow(x,5) - 2*gam4*pow(x,6) - 8*gam3*Lt*pow(x,6) + 2*pow(Lt,4)*pow(x,6) + 2*pow(gam1,4)*(-1 + x)*x*pow(1 + x,4) + 6*pow(gam2,2)*(-1 + x)*x*pow(1 + x,4) - 4*pow(gam1,3)*pow(1 + x,3)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(1 + 71*x + 64*pow(x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 6*pow(gam1,2)*pow(1 + x,2)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 2*gam1*(1 + x)*(-189 - 171*x - 4*gam3*x - 8*gam3*pow(x,2) + 8*gam3*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) - 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))))))/(gam0*pow(1 + x,5)));
    SubtrDD3.push_back((4*egamexp*pow(1 - tau,2*(1 + x))*(-2835 + 5670*gam2 + 90*pow(gam2,2) - 3780*gam3 - 120*gam2*gam3 - 30*gam4 + 12*gam5 + 5670*Lt - 11340*gam2*Lt - 180*pow(gam2,2)*Lt - 120*gam3*Lt + 60*gam4*Lt - 5670*pow(Lt,2) - 180*gam2*pow(Lt,2) + 120*gam3*pow(Lt,2) + 3780*pow(Lt,3) + 120*gam2*pow(Lt,3) + 30*pow(Lt,4) - 12*pow(Lt,5) - 2565*x + 16470*gam2*x + 6750*pow(gam2,2)*x + 60*pow(gam2,3)*x - 14760*gam3*x - 480*gam2*gam3*x - 40*pow(gam3,2)*x - 2250*gam4*x - 60*gam2*gam4*x + 48*gam5*x + 4*gam6*x + 10800*Lt*x - 44280*gam2*Lt*x - 720*pow(gam2,2)*Lt*x - 9000*gam3*Lt*x - 240*gam2*gam3*Lt*x + 240*gam4*Lt*x + 24*gam5*Lt*x - 16470*pow(Lt,2)*x - 13500*gam2*pow(Lt,2)*x - 180*pow(gam2,2)*pow(Lt,2)*x + 480*gam3*pow(Lt,2)*x + 60*gam4*pow(Lt,2)*x + 14760*pow(Lt,3)*x + 480*gam2*pow(Lt,3)*x + 80*gam3*pow(Lt,3)*x + 2250*pow(Lt,4)*x + 60*gam2*pow(Lt,4)*x - 48*pow(Lt,5)*x - 4*pow(Lt,6)*x + 15930*gam2*pow(x,2) + 31860*pow(gam2,2)*pow(x,2) + 300*pow(gam2,3)*pow(x,2) - 21600*gam3*pow(x,2) + 360*gam2*gam3*pow(x,2) - 200*pow(gam3,2)*pow(x,2) - 10620*gam4*pow(x,2) - 300*gam2*gam4*pow(x,2) - 36*gam5*pow(x,2) + 20*gam6*pow(x,2) + 5130*Lt*pow(x,2) - 64800*gam2*Lt*pow(x,2) + 540*pow(gam2,2)*Lt*pow(x,2) - 42480*gam3*Lt*pow(x,2) - 1200*gam2*gam3*Lt*pow(x,2) - 180*gam4*Lt*pow(x,2) + 120*gam5*Lt*pow(x,2) - 15930*pow(Lt,2)*pow(x,2) - 63720*gam2*pow(Lt,2)*pow(x,2) - 900*pow(gam2,2)*pow(Lt,2)*pow(x,2) - 360*gam3*pow(Lt,2)*pow(x,2) + 300*gam4*pow(Lt,2)*pow(x,2) + 21600*pow(Lt,3)*pow(x,2) - 360*gam2*pow(Lt,3)*pow(x,2) + 400*gam3*pow(Lt,3)*pow(x,2) + 10620*pow(Lt,4)*pow(x,2) + 300*gam2*pow(Lt,4)*pow(x,2) + 36*pow(Lt,5)*pow(x,2) - 20*pow(Lt,6)*pow(x,2) + 5130*gam2*pow(x,3) + 61740*pow(gam2,2)*pow(x,3) + 540*pow(gam2,3)*pow(x,3) - 14040*gam3*pow(x,3) + 4800*gam2*gam3*pow(x,3) - 360*pow(gam3,2)*pow(x,3) - 20580*gam4*pow(x,3) - 540*gam2*gam4*pow(x,3) - 480*gam5*pow(x,3) + 36*gam6*pow(x,3) - 42120*gam2*Lt*pow(x,3) + 7200*pow(gam2,2)*Lt*pow(x,3) - 82320*gam3*Lt*pow(x,3) - 2160*gam2*gam3*Lt*pow(x,3) - 2400*gam4*Lt*pow(x,3) + 216*gam5*Lt*pow(x,3) - 5130*pow(Lt,2)*pow(x,3) - 123480*gam2*pow(Lt,2)*pow(x,3) - 1620*pow(gam2,2)*pow(Lt,2)*pow(x,3) - 4800*gam3*pow(Lt,2)*pow(x,3) + 540*gam4*pow(Lt,2)*pow(x,3) + 14040*pow(Lt,3)*pow(x,3) - 4800*gam2*pow(Lt,3)*pow(x,3) + 720*gam3*pow(Lt,3)*pow(x,3) + 20580*pow(Lt,4)*pow(x,3) + 540*gam2*pow(Lt,4)*pow(x,3) + 480*pow(Lt,5)*pow(x,3) - 36*pow(Lt,6)*pow(x,3) + 60210*pow(gam2,2)*pow(x,4) + 300*pow(gam2,3)*pow(x,4) - 3420*gam3*pow(x,4) + 10200*gam2*gam3*pow(x,4) - 200*pow(gam3,2)*pow(x,4) - 20070*gam4*pow(x,4) - 300*gam2*gam4*pow(x,4) - 1020*gam5*pow(x,4) + 20*gam6*pow(x,4) - 10260*gam2*Lt*pow(x,4) + 15300*pow(gam2,2)*Lt*pow(x,4) - 80280*gam3*Lt*pow(x,4) - 1200*gam2*gam3*Lt*pow(x,4) - 5100*gam4*Lt*pow(x,4) + 120*gam5*Lt*pow(x,4) - 120420*gam2*pow(Lt,2)*pow(x,4) - 900*pow(gam2,2)*pow(Lt,2)*pow(x,4) - 10200*gam3*pow(Lt,2)*pow(x,4) + 300*gam4*pow(Lt,2)*pow(x,4) + 3420*pow(Lt,3)*pow(x,4) - 10200*gam2*pow(Lt,3)*pow(x,4) + 400*gam3*pow(Lt,3)*pow(x,4) + 20070*pow(Lt,4)*pow(x,4) + 300*gam2*pow(Lt,4)*pow(x,4) + 1020*pow(Lt,5)*pow(x,4) - 20*pow(Lt,6)*pow(x,4) + 29430*pow(gam2,2)*pow(x,5) - 300*pow(gam2,3)*pow(x,5) + 10080*gam2*gam3*pow(x,5) + 200*pow(gam3,2)*pow(x,5) - 9810*gam4*pow(x,5) + 300*gam2*gam4*pow(x,5) - 1008*gam5*pow(x,5) - 20*gam6*pow(x,5) + 15120*pow(gam2,2)*Lt*pow(x,5) - 39240*gam3*Lt*pow(x,5) + 1200*gam2*gam3*Lt*pow(x,5) - 5040*gam4*Lt*pow(x,5) - 120*gam5*Lt*pow(x,5) - 58860*gam2*pow(Lt,2)*pow(x,5) + 900*pow(gam2,2)*pow(Lt,2)*pow(x,5) - 10080*gam3*pow(Lt,2)*pow(x,5) - 300*gam4*pow(Lt,2)*pow(x,5) - 10080*gam2*pow(Lt,3)*pow(x,5) - 400*gam3*pow(Lt,3)*pow(x,5) + 9810*pow(Lt,4)*pow(x,5) - 300*gam2*pow(Lt,4)*pow(x,5) + 1008*pow(Lt,5)*pow(x,5) + 20*pow(Lt,6)*pow(x,5) + 5760*pow(gam2,2)*pow(x,6) - 540*pow(gam2,3)*pow(x,6) + 4920*gam2*gam3*pow(x,6) + 360*pow(gam3,2)*pow(x,6) - 1920*gam4*pow(x,6) + 540*gam2*gam4*pow(x,6) - 492*gam5*pow(x,6) - 36*gam6*pow(x,6) + 7380*pow(gam2,2)*Lt*pow(x,6) - 7680*gam3*Lt*pow(x,6) + 2160*gam2*gam3*Lt*pow(x,6) - 2460*gam4*Lt*pow(x,6) - 216*gam5*Lt*pow(x,6) - 11520*gam2*pow(Lt,2)*pow(x,6) + 1620*pow(gam2,2)*pow(Lt,2)*pow(x,6) - 4920*gam3*pow(Lt,2)*pow(x,6) - 540*gam4*pow(Lt,2)*pow(x,6) - 4920*gam2*pow(Lt,3)*pow(x,6) - 720*gam3*pow(Lt,3)*pow(x,6) + 1920*pow(Lt,4)*pow(x,6) - 540*gam2*pow(Lt,4)*pow(x,6) + 492*pow(Lt,5)*pow(x,6) + 36*pow(Lt,6)*pow(x,6) - 300*pow(gam2,3)*pow(x,7) + 960*gam2*gam3*pow(x,7) + 200*pow(gam3,2)*pow(x,7) + 300*gam2*gam4*pow(x,7) - 96*gam5*pow(x,7) - 20*gam6*pow(x,7) + 1440*pow(gam2,2)*Lt*pow(x,7) + 1200*gam2*gam3*Lt*pow(x,7) - 480*gam4*Lt*pow(x,7) - 120*gam5*Lt*pow(x,7) + 900*pow(gam2,2)*pow(Lt,2)*pow(x,7) - 960*gam3*pow(Lt,2)*pow(x,7) - 300*gam4*pow(Lt,2)*pow(x,7) - 960*gam2*pow(Lt,3)*pow(x,7) - 400*gam3*pow(Lt,3)*pow(x,7) - 300*gam2*pow(Lt,4)*pow(x,7) + 96*pow(Lt,5)*pow(x,7) + 20*pow(Lt,6)*pow(x,7) - 60*pow(gam2,3)*pow(x,8) + 40*pow(gam3,2)*pow(x,8) + 60*gam2*gam4*pow(x,8) - 4*gam6*pow(x,8) + 240*gam2*gam3*Lt*pow(x,8) - 24*gam5*Lt*pow(x,8) + 180*pow(gam2,2)*pow(Lt,2)*pow(x,8) - 60*gam4*pow(Lt,2)*pow(x,8) - 80*gam3*pow(Lt,3)*pow(x,8) - 60*gam2*pow(Lt,4)*pow(x,8) + 4*pow(Lt,6)*pow(x,8) + 4*pow(eg,6)*(-1 + x)*x*pow(1 + x,6) + 4*pow(gam1,6)*(-1 + x)*x*pow(1 + x,6) + 12*pow(eg,5)*pow(1 + x,5)*(1 + (-1 - 2*gam1 + 2*Lt)*x - 8*pow(x,2) + 2*(gam1 - Lt)*pow(x,3)) - 12*pow(gam1,5)*pow(1 + x,5)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 30*pow(gam1,4)*pow(1 + x,4)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 30*pow(eg,4)*pow(1 + x,4)*(1 + 71*x + 2*gam2*x + 64*pow(x,2) + 2*gam2*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(gam1,2)*(-1 + x)*x*pow(1 + x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)) - 2*gam1*(1 + x)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 20*pow(gam1,3)*pow(1 + x,3)*(-189 - 171*x - 4*gam3*x - 8*gam3*pow(x,2) + 8*gam3*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) - 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 30*pow(gam1,2)*pow(1 + x,2)*(-189 + 378*Lt + 6*pow(Lt,2) - 4*pow(Lt,3) - 171*x + 2*gam4*x + 720*Lt*x + 438*pow(Lt,2)*x - 8*pow(Lt,3)*x - 2*pow(Lt,4)*x + 6*gam4*pow(x,2) + 342*Lt*pow(x,2) + 1242*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) + 4*gam4*pow(x,3) + 1194*pow(Lt,2)*pow(x,3) + 104*pow(Lt,3)*pow(x,3) - 4*pow(Lt,4)*pow(x,3) - 4*gam4*pow(x,4) + 384*pow(Lt,2)*pow(x,4) + 100*pow(Lt,3)*pow(x,4) + 4*pow(Lt,4)*pow(x,4) - 6*gam4*pow(x,5) + 32*pow(Lt,3)*pow(x,5) + 6*pow(Lt,4)*pow(x,5) - 2*gam4*pow(x,6) + 2*pow(Lt,4)*pow(x,6) + 6*pow(gam2,2)*(-1 + x)*x*pow(1 + x,4) - 4*gam3*pow(1 + x,3)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(1 + 71*x + 64*pow(x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)))) + 20*pow(eg,3)*pow(1 + x,3)*(-189 - 6*Lt + 6*pow(Lt,2) - 171*x - 4*gam3*x - 432*Lt*x + 6*pow(Lt,2)*x + 4*pow(Lt,3)*x - 8*gam3*pow(x,2) - 810*Lt*pow(x,2) - 54*pow(Lt,2)*pow(x,2) + 8*pow(Lt,3)*pow(x,2) - 384*Lt*pow(x,3) - 102*pow(Lt,2)*pow(x,3) + 8*gam3*pow(x,4) - 48*pow(Lt,2)*pow(x,4) - 8*pow(Lt,3)*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*pow(x,5) + 4*pow(gam1,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(gam1,2)*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 6*gam1*(1 + x)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)))) - 6*gam1*(1 + x)*(945 + 10*gam4 - 1890*Lt + 1890*pow(Lt,2) + 20*pow(Lt,3) - 10*pow(Lt,4) + 855*x + 30*gam4*x + 4*gam5*x - 3600*Lt*x + 20*gam4*Lt*x + 5490*pow(Lt,2)*x + 1480*pow(Lt,3)*x - 30*pow(Lt,4)*x - 4*pow(Lt,5)*x - 60*gam4*pow(x,2) + 16*gam5*pow(x,2) - 1710*Lt*pow(x,2) + 80*gam4*Lt*pow(x,2) + 5310*pow(Lt,2)*pow(x,2) + 5600*pow(Lt,3)*pow(x,2) + 60*pow(Lt,4)*pow(x,2) - 16*pow(Lt,5)*pow(x,2) - 340*gam4*pow(x,3) + 20*gam5*pow(x,3) + 100*gam4*Lt*pow(x,3) + 1710*pow(Lt,2)*pow(x,3) + 8120*pow(Lt,3)*pow(x,3) + 340*pow(Lt,4)*pow(x,3) - 20*pow(Lt,5)*pow(x,3) - 510*gam4*pow(x,4) + 5260*pow(Lt,3)*pow(x,4) + 510*pow(Lt,4)*pow(x,4) - 330*gam4*pow(x,5) - 20*gam5*pow(x,5) - 100*gam4*Lt*pow(x,5) + 1280*pow(Lt,3)*pow(x,5) + 330*pow(Lt,4)*pow(x,5) + 20*pow(Lt,5)*pow(x,5) - 80*gam4*pow(x,6) - 16*gam5*pow(x,6) - 80*gam4*Lt*pow(x,6) + 80*pow(Lt,4)*pow(x,6) + 16*pow(Lt,5)*pow(x,6) - 4*gam5*pow(x,7) - 20*gam4*Lt*pow(x,7) + 4*pow(Lt,5)*pow(x,7) + 30*pow(gam2,2)*pow(1 + x,4)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 20*gam3*pow(1 + x,3)*(1 + 71*x + 64*pow(x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) - 10*gam2*pow(1 + x,2)*(189 + 171*x + 4*gam3*x + 8*gam3*pow(x,2) - 8*gam3*pow(x,4) - 4*gam3*pow(x,5) + 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) + 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) + 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)))) + 30*pow(eg,2)*pow(1 + x,2)*(-189 + 4*gam3 + 378*Lt + 6*pow(Lt,2) - 4*pow(Lt,3) - 171*x + 8*gam3*x + 2*gam4*x + 720*Lt*x + 8*gam3*Lt*x + 438*pow(Lt,2)*x - 8*pow(Lt,3)*x - 2*pow(Lt,4)*x - 32*gam3*pow(x,2) + 6*gam4*pow(x,2) + 342*Lt*pow(x,2) + 24*gam3*Lt*pow(x,2) + 1242*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) - 104*gam3*pow(x,3) + 4*gam4*pow(x,3) + 16*gam3*Lt*pow(x,3) + 1194*pow(Lt,2)*pow(x,3) + 104*pow(Lt,3)*pow(x,3) - 4*pow(Lt,4)*pow(x,3) - 100*gam3*pow(x,4) - 4*gam4*pow(x,4) - 16*gam3*Lt*pow(x,4) + 384*pow(Lt,2)*pow(x,4) + 100*pow(Lt,3)*pow(x,4) + 4*pow(Lt,4)*pow(x,4) - 32*gam3*pow(x,5) - 6*gam4*pow(x,5) - 24*gam3*Lt*pow(x,5) + 32*pow(Lt,3)*pow(x,5) + 6*pow(Lt,4)*pow(x,5) - 2*gam4*pow(x,6) - 8*gam3*Lt*pow(x,6) + 2*pow(Lt,4)*pow(x,6) + 2*pow(gam1,4)*(-1 + x)*x*pow(1 + x,4) + 6*pow(gam2,2)*(-1 + x)*x*pow(1 + x,4) - 4*pow(gam1,3)*pow(1 + x,3)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(1 + 71*x + 64*pow(x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 6*pow(gam1,2)*pow(1 + x,2)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 2*gam1*(1 + x)*(-189 - 171*x - 4*gam3*x - 8*gam3*pow(x,2) + 8*gam3*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) - 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)))) + 6*eg*(1 + x)*(-945 + 20*gam3 - 10*gam4 + 1890*Lt - 40*gam3*Lt - 1890*pow(Lt,2) - 20*pow(Lt,3) + 10*pow(Lt,4) - 855*x + 1480*gam3*x - 30*gam4*x - 4*gam5*x + 3600*Lt*x - 120*gam3*Lt*x - 20*gam4*Lt*x - 5490*pow(Lt,2)*x - 40*gam3*pow(Lt,2)*x - 1480*pow(Lt,3)*x + 30*pow(Lt,4)*x + 4*pow(Lt,5)*x + 5600*gam3*pow(x,2) + 60*gam4*pow(x,2) - 16*gam5*pow(x,2) + 1710*Lt*pow(x,2) + 240*gam3*Lt*pow(x,2) - 80*gam4*Lt*pow(x,2) - 5310*pow(Lt,2)*pow(x,2) - 160*gam3*pow(Lt,2)*pow(x,2) - 5600*pow(Lt,3)*pow(x,2) - 60*pow(Lt,4)*pow(x,2) + 16*pow(Lt,5)*pow(x,2) + 8120*gam3*pow(x,3) + 340*gam4*pow(x,3) - 20*gam5*pow(x,3) + 1360*gam3*Lt*pow(x,3) - 100*gam4*Lt*pow(x,3) - 1710*pow(Lt,2)*pow(x,3) - 200*gam3*pow(Lt,2)*pow(x,3) - 8120*pow(Lt,3)*pow(x,3) - 340*pow(Lt,4)*pow(x,3) + 20*pow(Lt,5)*pow(x,3) + 5260*gam3*pow(x,4) + 510*gam4*pow(x,4) + 2040*gam3*Lt*pow(x,4) - 5260*pow(Lt,3)*pow(x,4) - 510*pow(Lt,4)*pow(x,4) + 1280*gam3*pow(x,5) + 330*gam4*pow(x,5) + 20*gam5*pow(x,5) + 1320*gam3*Lt*pow(x,5) + 100*gam4*Lt*pow(x,5) + 200*gam3*pow(Lt,2)*pow(x,5) - 1280*pow(Lt,3)*pow(x,5) - 330*pow(Lt,4)*pow(x,5) - 20*pow(Lt,5)*pow(x,5) + 80*gam4*pow(x,6) + 16*gam5*pow(x,6) + 320*gam3*Lt*pow(x,6) + 80*gam4*Lt*pow(x,6) + 160*gam3*pow(Lt,2)*pow(x,6) - 80*pow(Lt,4)*pow(x,6) - 16*pow(Lt,5)*pow(x,6) + 4*gam5*pow(x,7) + 20*gam4*Lt*pow(x,7) + 40*gam3*pow(Lt,2)*pow(x,7) - 4*pow(Lt,5)*pow(x,7) + 4*pow(gam1,5)*(-1 + x)*x*pow(1 + x,5) - 10*pow(gam1,4)*pow(1 + x,4)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 30*pow(gam2,2)*pow(1 + x,4)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) + 20*pow(gam1,3)*pow(1 + x,3)*(1 + (71 + 2*gam2)*x + 2*(32 + gam2)*pow(x,2) - 2*gam2*pow(x,3) - 2*gam2*pow(x,4) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3))) + 10*gam2*pow(1 + x,2)*(189 + (171 + 4*gam3)*x + 8*gam3*pow(x,2) - 8*gam3*pow(x,4) - 4*gam3*pow(x,5) + 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) + 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) + 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3))) + 10*pow(gam1,2)*pow(1 + x,2)*(-189 - 171*x - 4*gam3*x - 8*gam3*pow(x,2) + 8*gam3*pow(x,4) + 4*gam3*pow(x,5) - 4*pow(Lt,3)*(-1 + x)*x*pow(1 + x,3) - 6*pow(Lt,2)*pow(1 + x,2)*(-1 + x + 8*pow(x,2)) - 6*Lt*(1 + 72*x + 135*pow(x,2) + 64*pow(x,3)) + 6*gam2*pow(1 + x,2)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3))) + 10*gam1*(1 + x)*(-189 + 378*Lt + 6*pow(Lt,2) - 4*pow(Lt,3) - 171*x + 2*gam4*x + 720*Lt*x + 438*pow(Lt,2)*x - 8*pow(Lt,3)*x - 2*pow(Lt,4)*x + 6*gam4*pow(x,2) + 342*Lt*pow(x,2) + 1242*pow(Lt,2)*pow(x,2) + 32*pow(Lt,3)*pow(x,2) - 6*pow(Lt,4)*pow(x,2) + 4*gam4*pow(x,3) + 1194*pow(Lt,2)*pow(x,3) + 104*pow(Lt,3)*pow(x,3) - 4*pow(Lt,4)*pow(x,3) - 4*gam4*pow(x,4) + 384*pow(Lt,2)*pow(x,4) + 100*pow(Lt,3)*pow(x,4) + 4*pow(Lt,4)*pow(x,4) - 6*gam4*pow(x,5) + 32*pow(Lt,3)*pow(x,5) + 6*pow(Lt,4)*pow(x,5) - 2*gam4*pow(x,6) + 2*pow(Lt,4)*pow(x,6) + 6*pow(gam2,2)*(-1 + x)*x*pow(1 + x,4) - 4*gam3*pow(1 + x,3)*(-1 + x - 2*Lt*x + 8*pow(x,2) + 2*Lt*pow(x,3)) - 6*gam2*pow(1 + x,2)*(1 + 71*x + 64*pow(x,2) + 2*pow(Lt,2)*(-1 + x)*x*pow(1 + x,2) + 2*Lt*(-1 + 9*pow(x,2) + 8*pow(x,3)))))))/(gam0*pow(1 + x,6)));
    
    
    Alllogs.push_back((2*egamexp*x*DD[0])/gam0);
    Alllogs.push_back((2*egamexp*DD[0])/gam0 - (4*eg*egamexp*x*DD[0])/gam0 - (4*egamexp*gam1*x*DD[0])/gam0 + (4*egamexp*x*DD[1])/gam0);
    Alllogs.push_back((-8*eg*egamexp*DD[0])/gam0 - (8*egamexp*gam1*DD[0])/gam0 + (8*pow(eg,2)*egamexp*x*DD[0])/gam0 + (16*eg*egamexp*gam1*x*DD[0])/gam0 + (8*egamexp*pow(gam1,2)*x*DD[0])/gam0 - (8*egamexp*gam2*x*DD[0])/gam0 + (8*egamexp*DD[1])/gam0 - (16*eg*egamexp*x*DD[1])/gam0 - (16*egamexp*gam1*x*DD[1])/gam0 + (8*egamexp*x*DD[2])/gam0);
    Alllogs.push_back((24*pow(eg,2)*egamexp*DD[0])/gam0 + (48*eg*egamexp*gam1*DD[0])/gam0 + (24*egamexp*pow(gam1,2)*DD[0])/gam0 - (24*egamexp*gam2*DD[0])/gam0 - (16*pow(eg,3)*egamexp*x*DD[0])/gam0 - (48*pow(eg,2)*egamexp*gam1*x*DD[0])/gam0 - (48*eg*egamexp*pow(gam1,2)*x*DD[0])/gam0 - (16*egamexp*pow(gam1,3)*x*DD[0])/gam0 + (48*eg*egamexp*gam2*x*DD[0])/gam0 + (48*egamexp*gam1*gam2*x*DD[0])/gam0 - (16*egamexp*gam3*x*DD[0])/gam0 - (48*eg*egamexp*DD[1])/gam0 - (48*egamexp*gam1*DD[1])/gam0 + (48*pow(eg,2)*egamexp*x*DD[1])/gam0 + (96*eg*egamexp*gam1*x*DD[1])/gam0 + (48*egamexp*pow(gam1,2)*x*DD[1])/gam0 - (48*egamexp*gam2*x*DD[1])/gam0 + (24*egamexp*DD[2])/gam0 - (48*eg*egamexp*x*DD[2])/gam0 - (48*egamexp*gam1*x*DD[2])/gam0 + (16*egamexp*x*DD[3])/gam0);
    Alllogs.push_back((-64*pow(eg,3)*egamexp*DD[0])/gam0 - (192*pow(eg,2)*egamexp*gam1*DD[0])/gam0 - (192*eg*egamexp*pow(gam1,2)*DD[0])/gam0 - (64*egamexp*pow(gam1,3)*DD[0])/gam0 + (192*eg*egamexp*gam2*DD[0])/gam0 + (192*egamexp*gam1*gam2*DD[0])/gam0 - (64*egamexp*gam3*DD[0])/gam0 + (32*pow(eg,4)*egamexp*x*DD[0])/gam0 + (128*pow(eg,3)*egamexp*gam1*x*DD[0])/gam0 + (192*pow(eg,2)*egamexp*pow(gam1,2)*x*DD[0])/gam0 + (128*eg*egamexp*pow(gam1,3)*x*DD[0])/gam0 + (32*egamexp*pow(gam1,4)*x*DD[0])/gam0 - (192*pow(eg,2)*egamexp*gam2*x*DD[0])/gam0 - (384*eg*egamexp*gam1*gam2*x*DD[0])/gam0 - (192*egamexp*pow(gam1,2)*gam2*x*DD[0])/gam0 + (96*egamexp*pow(gam2,2)*x*DD[0])/gam0 + (128*eg*egamexp*gam3*x*DD[0])/gam0 + (128*egamexp*gam1*gam3*x*DD[0])/gam0 - (32*egamexp*gam4*x*DD[0])/gam0 + (192*pow(eg,2)*egamexp*DD[1])/gam0 + (384*eg*egamexp*gam1*DD[1])/gam0 + (192*egamexp*pow(gam1,2)*DD[1])/gam0 - (192*egamexp*gam2*DD[1])/gam0 - (128*pow(eg,3)*egamexp*x*DD[1])/gam0 - (384*pow(eg,2)*egamexp*gam1*x*DD[1])/gam0 - (384*eg*egamexp*pow(gam1,2)*x*DD[1])/gam0 - (128*egamexp*pow(gam1,3)*x*DD[1])/gam0 + (384*eg*egamexp*gam2*x*DD[1])/gam0 + (384*egamexp*gam1*gam2*x*DD[1])/gam0 - (128*egamexp*gam3*x*DD[1])/gam0 - (192*eg*egamexp*DD[2])/gam0 - (192*egamexp*gam1*DD[2])/gam0 + (192*pow(eg,2)*egamexp*x*DD[2])/gam0 + (384*eg*egamexp*gam1*x*DD[2])/gam0 + (192*egamexp*pow(gam1,2)*x*DD[2])/gam0 - (192*egamexp*gam2*x*DD[2])/gam0 + (64*egamexp*DD[3])/gam0 - (128*eg*egamexp*x*DD[3])/gam0 - (128*egamexp*gam1*x*DD[3])/gam0 + (32*egamexp*x*DD[4])/gam0);
    Alllogs.push_back((160*pow(eg,4)*egamexp*DD[0])/gam0 + (640*pow(eg,3)*egamexp*gam1*DD[0])/gam0 + (960*pow(eg,2)*egamexp*pow(gam1,2)*DD[0])/gam0 + (640*eg*egamexp*pow(gam1,3)*DD[0])/gam0 + (160*egamexp*pow(gam1,4)*DD[0])/gam0 - (960*pow(eg,2)*egamexp*gam2*DD[0])/gam0 - (1920*eg*egamexp*gam1*gam2*DD[0])/gam0 - (960*egamexp*pow(gam1,2)*gam2*DD[0])/gam0 + (480*egamexp*pow(gam2,2)*DD[0])/gam0 + (640*eg*egamexp*gam3*DD[0])/gam0 + (640*egamexp*gam1*gam3*DD[0])/gam0 - (160*egamexp*gam4*DD[0])/gam0 - (64*pow(eg,5)*egamexp*x*DD[0])/gam0 - (320*pow(eg,4)*egamexp*gam1*x*DD[0])/gam0 - (640*pow(eg,3)*egamexp*pow(gam1,2)*x*DD[0])/gam0 - (640*pow(eg,2)*egamexp*pow(gam1,3)*x*DD[0])/gam0 - (320*eg*egamexp*pow(gam1,4)*x*DD[0])/gam0 - (64*egamexp*pow(gam1,5)*x*DD[0])/gam0 + (640*pow(eg,3)*egamexp*gam2*x*DD[0])/gam0 + (1920*pow(eg,2)*egamexp*gam1*gam2*x*DD[0])/gam0 + (1920*eg*egamexp*pow(gam1,2)*gam2*x*DD[0])/gam0 + (640*egamexp*pow(gam1,3)*gam2*x*DD[0])/gam0 - (960*eg*egamexp*pow(gam2,2)*x*DD[0])/gam0 - (960*egamexp*gam1*pow(gam2,2)*x*DD[0])/gam0 - (640*pow(eg,2)*egamexp*gam3*x*DD[0])/gam0 - (1280*eg*egamexp*gam1*gam3*x*DD[0])/gam0 - (640*egamexp*pow(gam1,2)*gam3*x*DD[0])/gam0 + (640*egamexp*gam2*gam3*x*DD[0])/gam0 + (320*eg*egamexp*gam4*x*DD[0])/gam0 + (320*egamexp*gam1*gam4*x*DD[0])/gam0 - (64*egamexp*gam5*x*DD[0])/gam0 - (640*pow(eg,3)*egamexp*DD[1])/gam0 - (1920*pow(eg,2)*egamexp*gam1*DD[1])/gam0 - (1920*eg*egamexp*pow(gam1,2)*DD[1])/gam0 - (640*egamexp*pow(gam1,3)*DD[1])/gam0 + (1920*eg*egamexp*gam2*DD[1])/gam0 + (1920*egamexp*gam1*gam2*DD[1])/gam0 - (640*egamexp*gam3*DD[1])/gam0 + (320*pow(eg,4)*egamexp*x*DD[1])/gam0 + (1280*pow(eg,3)*egamexp*gam1*x*DD[1])/gam0 + (1920*pow(eg,2)*egamexp*pow(gam1,2)*x*DD[1])/gam0 + (1280*eg*egamexp*pow(gam1,3)*x*DD[1])/gam0 + (320*egamexp*pow(gam1,4)*x*DD[1])/gam0 - (1920*pow(eg,2)*egamexp*gam2*x*DD[1])/gam0 - (3840*eg*egamexp*gam1*gam2*x*DD[1])/gam0 - (1920*egamexp*pow(gam1,2)*gam2*x*DD[1])/gam0 + (960*egamexp*pow(gam2,2)*x*DD[1])/gam0 + (1280*eg*egamexp*gam3*x*DD[1])/gam0 + (1280*egamexp*gam1*gam3*x*DD[1])/gam0 - (320*egamexp*gam4*x*DD[1])/gam0 + (960*pow(eg,2)*egamexp*DD[2])/gam0 + (1920*eg*egamexp*gam1*DD[2])/gam0 + (960*egamexp*pow(gam1,2)*DD[2])/gam0 - (960*egamexp*gam2*DD[2])/gam0 - (640*pow(eg,3)*egamexp*x*DD[2])/gam0 - (1920*pow(eg,2)*egamexp*gam1*x*DD[2])/gam0 - (1920*eg*egamexp*pow(gam1,2)*x*DD[2])/gam0 - (640*egamexp*pow(gam1,3)*x*DD[2])/gam0 + (1920*eg*egamexp*gam2*x*DD[2])/gam0 + (1920*egamexp*gam1*gam2*x*DD[2])/gam0 - (640*egamexp*gam3*x*DD[2])/gam0 - (640*eg*egamexp*DD[3])/gam0 - (640*egamexp*gam1*DD[3])/gam0 + (640*pow(eg,2)*egamexp*x*DD[3])/gam0 + (1280*eg*egamexp*gam1*x*DD[3])/gam0 + (640*egamexp*pow(gam1,2)*x*DD[3])/gam0 - (640*egamexp*gam2*x*DD[3])/gam0 + (160*egamexp*DD[4])/gam0 - (320*eg*egamexp*x*DD[4])/gam0 - (320*egamexp*gam1*x*DD[4])/gam0 + (64*egamexp*x*DD[5])/gam0);
    Alllogs.push_back((-384*pow(eg,5)*egamexp*DD[0])/gam0 - (1920*pow(eg,4)*egamexp*gam1*DD[0])/gam0 - (3840*pow(eg,3)*egamexp*pow(gam1,2)*DD[0])/gam0 - (3840*pow(eg,2)*egamexp*pow(gam1,3)*DD[0])/gam0 - (1920*eg*egamexp*pow(gam1,4)*DD[0])/gam0 - (384*egamexp*pow(gam1,5)*DD[0])/gam0 + (3840*pow(eg,3)*egamexp*gam2*DD[0])/gam0 + (11520*pow(eg,2)*egamexp*gam1*gam2*DD[0])/gam0 + (11520*eg*egamexp*pow(gam1,2)*gam2*DD[0])/gam0 + (3840*egamexp*pow(gam1,3)*gam2*DD[0])/gam0 - (5760*eg*egamexp*pow(gam2,2)*DD[0])/gam0 - (5760*egamexp*gam1*pow(gam2,2)*DD[0])/gam0 - (3840*pow(eg,2)*egamexp*gam3*DD[0])/gam0 - (7680*eg*egamexp*gam1*gam3*DD[0])/gam0 - (3840*egamexp*pow(gam1,2)*gam3*DD[0])/gam0 + (3840*egamexp*gam2*gam3*DD[0])/gam0 + (1920*eg*egamexp*gam4*DD[0])/gam0 + (1920*egamexp*gam1*gam4*DD[0])/gam0 - (384*egamexp*gam5*DD[0])/gam0 + (128*pow(eg,6)*egamexp*x*DD[0])/gam0 + (768*pow(eg,5)*egamexp*gam1*x*DD[0])/gam0 + (1920*pow(eg,4)*egamexp*pow(gam1,2)*x*DD[0])/gam0 + (2560*pow(eg,3)*egamexp*pow(gam1,3)*x*DD[0])/gam0 + (1920*pow(eg,2)*egamexp*pow(gam1,4)*x*DD[0])/gam0 + (768*eg*egamexp*pow(gam1,5)*x*DD[0])/gam0 + (128*egamexp*pow(gam1,6)*x*DD[0])/gam0 - (1920*pow(eg,4)*egamexp*gam2*x*DD[0])/gam0 - (7680*pow(eg,3)*egamexp*gam1*gam2*x*DD[0])/gam0 - (11520*pow(eg,2)*egamexp*pow(gam1,2)*gam2*x*DD[0])/gam0 - (7680*eg*egamexp*pow(gam1,3)*gam2*x*DD[0])/gam0 - (1920*egamexp*pow(gam1,4)*gam2*x*DD[0])/gam0 + (5760*pow(eg,2)*egamexp*pow(gam2,2)*x*DD[0])/gam0 + (11520*eg*egamexp*gam1*pow(gam2,2)*x*DD[0])/gam0 + (5760*egamexp*pow(gam1,2)*pow(gam2,2)*x*DD[0])/gam0 - (1920*egamexp*pow(gam2,3)*x*DD[0])/gam0 + (2560*pow(eg,3)*egamexp*gam3*x*DD[0])/gam0 + (7680*pow(eg,2)*egamexp*gam1*gam3*x*DD[0])/gam0 + (7680*eg*egamexp*pow(gam1,2)*gam3*x*DD[0])/gam0 + (2560*egamexp*pow(gam1,3)*gam3*x*DD[0])/gam0 - (7680*eg*egamexp*gam2*gam3*x*DD[0])/gam0 - (7680*egamexp*gam1*gam2*gam3*x*DD[0])/gam0 + (1280*egamexp*pow(gam3,2)*x*DD[0])/gam0 - (1920*pow(eg,2)*egamexp*gam4*x*DD[0])/gam0 - (3840*eg*egamexp*gam1*gam4*x*DD[0])/gam0 - (1920*egamexp*pow(gam1,2)*gam4*x*DD[0])/gam0 + (1920*egamexp*gam2*gam4*x*DD[0])/gam0 + (768*eg*egamexp*gam5*x*DD[0])/gam0 + (768*egamexp*gam1*gam5*x*DD[0])/gam0 - (128*egamexp*gam6*x*DD[0])/gam0 + (1920*pow(eg,4)*egamexp*DD[1])/gam0 + (7680*pow(eg,3)*egamexp*gam1*DD[1])/gam0 + (11520*pow(eg,2)*egamexp*pow(gam1,2)*DD[1])/gam0 + (7680*eg*egamexp*pow(gam1,3)*DD[1])/gam0 + (1920*egamexp*pow(gam1,4)*DD[1])/gam0 - (11520*pow(eg,2)*egamexp*gam2*DD[1])/gam0 - (23040*eg*egamexp*gam1*gam2*DD[1])/gam0 - (11520*egamexp*pow(gam1,2)*gam2*DD[1])/gam0 + (5760*egamexp*pow(gam2,2)*DD[1])/gam0 + (7680*eg*egamexp*gam3*DD[1])/gam0 + (7680*egamexp*gam1*gam3*DD[1])/gam0 - (1920*egamexp*gam4*DD[1])/gam0 - (768*pow(eg,5)*egamexp*x*DD[1])/gam0 - (3840*pow(eg,4)*egamexp*gam1*x*DD[1])/gam0 - (7680*pow(eg,3)*egamexp*pow(gam1,2)*x*DD[1])/gam0 - (7680*pow(eg,2)*egamexp*pow(gam1,3)*x*DD[1])/gam0 - (3840*eg*egamexp*pow(gam1,4)*x*DD[1])/gam0 - (768*egamexp*pow(gam1,5)*x*DD[1])/gam0 + (7680*pow(eg,3)*egamexp*gam2*x*DD[1])/gam0 + (23040*pow(eg,2)*egamexp*gam1*gam2*x*DD[1])/gam0 + (23040*eg*egamexp*pow(gam1,2)*gam2*x*DD[1])/gam0 + (7680*egamexp*pow(gam1,3)*gam2*x*DD[1])/gam0 - (11520*eg*egamexp*pow(gam2,2)*x*DD[1])/gam0 - (11520*egamexp*gam1*pow(gam2,2)*x*DD[1])/gam0 - (7680*pow(eg,2)*egamexp*gam3*x*DD[1])/gam0 - (15360*eg*egamexp*gam1*gam3*x*DD[1])/gam0 - (7680*egamexp*pow(gam1,2)*gam3*x*DD[1])/gam0 + (7680*egamexp*gam2*gam3*x*DD[1])/gam0 + (3840*eg*egamexp*gam4*x*DD[1])/gam0 + (3840*egamexp*gam1*gam4*x*DD[1])/gam0 - (768*egamexp*gam5*x*DD[1])/gam0 - (3840*pow(eg,3)*egamexp*DD[2])/gam0 - (11520*pow(eg,2)*egamexp*gam1*DD[2])/gam0 - (11520*eg*egamexp*pow(gam1,2)*DD[2])/gam0 - (3840*egamexp*pow(gam1,3)*DD[2])/gam0 + (11520*eg*egamexp*gam2*DD[2])/gam0 + (11520*egamexp*gam1*gam2*DD[2])/gam0 - (3840*egamexp*gam3*DD[2])/gam0 + (1920*pow(eg,4)*egamexp*x*DD[2])/gam0 + (7680*pow(eg,3)*egamexp*gam1*x*DD[2])/gam0 + (11520*pow(eg,2)*egamexp*pow(gam1,2)*x*DD[2])/gam0 + (7680*eg*egamexp*pow(gam1,3)*x*DD[2])/gam0 + (1920*egamexp*pow(gam1,4)*x*DD[2])/gam0 - (11520*pow(eg,2)*egamexp*gam2*x*DD[2])/gam0 - (23040*eg*egamexp*gam1*gam2*x*DD[2])/gam0 - (11520*egamexp*pow(gam1,2)*gam2*x*DD[2])/gam0 + (5760*egamexp*pow(gam2,2)*x*DD[2])/gam0 + (7680*eg*egamexp*gam3*x*DD[2])/gam0 + (7680*egamexp*gam1*gam3*x*DD[2])/gam0 - (1920*egamexp*gam4*x*DD[2])/gam0 + (3840*pow(eg,2)*egamexp*DD[3])/gam0 + (7680*eg*egamexp*gam1*DD[3])/gam0 + (3840*egamexp*pow(gam1,2)*DD[3])/gam0 - (3840*egamexp*gam2*DD[3])/gam0 - (2560*pow(eg,3)*egamexp*x*DD[3])/gam0 - (7680*pow(eg,2)*egamexp*gam1*x*DD[3])/gam0 - (7680*eg*egamexp*pow(gam1,2)*x*DD[3])/gam0 - (2560*egamexp*pow(gam1,3)*x*DD[3])/gam0 + (7680*eg*egamexp*gam2*x*DD[3])/gam0 + (7680*egamexp*gam1*gam2*x*DD[3])/gam0 - (2560*egamexp*gam3*x*DD[3])/gam0 - (1920*eg*egamexp*DD[4])/gam0 - (1920*egamexp*gam1*DD[4])/gam0 + (1920*pow(eg,2)*egamexp*x*DD[4])/gam0 + (3840*eg*egamexp*gam1*x*DD[4])/gam0 + (1920*egamexp*pow(gam1,2)*x*DD[4])/gam0 - (1920*egamexp*gam2*x*DD[4])/gam0 + (384*egamexp*DD[5])/gam0 - (768*eg*egamexp*x*DD[5])/gam0 - (768*egamexp*gam1*x*DD[5])/gam0 + (128*egamexp*x*DD[6])/gam0);
    
//  till here

    
    for(int i=0;i<Alllogs.size();i++)
        Alllogs[i]+=L1*Delta[i];
    
    if(mode==1)
    {
        
        for(int i=0;i<Alllogs.size();i++)
            Alllogs[i]+=L1p*SubtrD1[i]+L1*SubtrD2[i];
        for(int i=0;i<Alllogs.size();i++)
            Alllogs[i]+=1.0/2.0*(L1pp*SubtrDD1[i]+2*L1p*SubtrDD2[i]+L1*SubtrDD3[i]);
        //*/
    }
    
    
    return Alllogs;
}

vector<double> SCETTER::Soft(double mu1,vector<double> LD)
{
    double aS=(double)(real(alpha(mu1,alpha_order,false)/Pi));
    vector<double> S;
    S.push_back(LD[0]);
    S.push_back(aS*(2.4674011002723386*LD[0] + 1.5*LD[2]));
    S.push_back(aS*aS*(1.8673615605174403*LD[0] + 5.987951780319154*LD[1] + 6.291666666666667*LD[2] - 0.9583333333333334*LD[3] + 1.125*LD[4]));
    S.push_back(aS*aS*aS*(-54.024394725550316*LD[0] + 36.49099583381727*LD[1] + 1.9209264418486498*LD[2] + 2.0988352063878803*LD[3] + 7.580076539971391*LD[4] - 1.4375*LD[5] + 0.5625*LD[6]));
    
    return S;
}

double SCETTER::GetX(double mus,double muf,int order)
{
    vector<complex<double> > AGamma=Ag(mus,muf,gammaC,false);
    double x=0;
    for(int i=0;i<=order;i++)
        x+=3*real(AGamma[i]);
    if(x<-0.5)
    {
        cout<<"ALARM! x<-0.5 for mus="<<mus<<" and muf="<<muf<<"! This requires double subtraction and is not implemented!"<<endl;
    }
    return x;
}


double SCETTER::Distribution(double z,double mh,double mus,double x,double Lz,double L1,double L1p,double L1pp,double L1ppp,int mode,int num)
{
    double L=log(mh/mus*(1.0-z));
    double ll1=1;
    double ll2=1;
    if(num>0)
    {
        ll1=pow(L,num);
        if(mode!=0)
            ll2=pow(log(mh/mus*(1.0-z)/sqrt(z)),num);
        else
            ll2=ll1;
    }
    
    double g=pow((1.0-z)*(1.0-z),x);
    double f=0;
    if(mode==0)
        f=g*ll1;
    else
    {
        f=ll2*g*sqrt(z)*pow(z,-x);
    }
    
    double gp=(-1.0/2.0*(1.0-2.0*x)*pow(L,num)+num/2.0*pow(L,num-1))*g;
    double gpp=(-1.0/4.0*(1.0-x*x)*pow(L,num)+num*x*pow(L,num-1)+4*num*(num-1)*pow(L,num-2))*g;
    
    double res=0;
    
    if(mode==0)
    {
        res=(f*Lz-g*L1*ll1)/(1.0-z);
    }
    else if(mode==1)
    {
        res=(f*Lz-L1*g*ll1)/(1.0-z);
        res+=-(L1p*g*ll1+L1*gp);
        res+=-(1.0-z)/2.0*(L1pp*g*ll1+2.0*L1p*gp+gpp*L1);
    }
    return res;
}


double SCETTER::func(double x,double lowbound)
{
    return x*(1.0-lowbound)+lowbound;
}


static int IntLumi(const int *ndim, const double xx[],const int *ncomp, double ff[], void *userdata)
{
    SCETTER * scet = reinterpret_cast<SCETTER*>(userdata);
    ff[0]=scet->Lumi(xx);
    return 0;
}

static int IntLumiP(const int *ndim, const double xx[],const int *ncomp, double ff[], void *userdata)
{
    SCETTER *  scet = reinterpret_cast<SCETTER*>(userdata);
    ff[0]=scet->LumiP(xx);
    return 0;
}

static int IntLumiPP(const int *ndim, const double xx[],const int *ncomp, double ff[], void *userdata)
{
    SCETTER * scet = reinterpret_cast<SCETTER*>(userdata);
    ff[0]=scet->LumiPP(xx);
    return 0;
}

static int IntIntegrand(const int *ndim, const double xx[],const int *ncomp, double ff[], void *userdata)
{
    SCETTER *  scet = reinterpret_cast<SCETTER*>(userdata);
    ff[0]=scet->Integrand(xx);
    const double ff0=ff[0];
    if( std::isnan(ff0) && scet->IsVegas==0)
    {
        return -999;
    }
    else if(std::isinf(ff0)&&scet->IsVegas==0)
    {
        return -999;
    }
    return 0;
}

double SCETTER::Lumi(const double xx[]) {
    double locx=func(xx[0],globaltau);
    return (1-globaltau)*(1.0-globaltau)*this->GetValue(locx,globalmuf,0)*this->GetValue(globaltau/locx,globalmuf,0)/locx;
}

double SCETTER::LumiP(const double xx[]) {
    double locx=func(xx[0],globaltau);
    
    return-(1.0-globaltau)*globaltau*this->GetValue(locx,globalmuf,0)*this->GetValue(globaltau/locx,globalmuf,0)/locx
    +(1.0-globaltau)*(1.0-globaltau)*globaltau*this->GetValue(locx,globalmuf,0)*this->GetDerivative(globaltau/locx,globalmuf,0)/locx/locx;
}

double SCETTER::LumiPP(const double xx[]) {
    
    double locx=func(xx[0],globaltau);
    return-(1.0-globaltau)*globaltau/locx/locx/locx*this->GetValue(locx,globalmuf,0)*(2*locx*locx*this->GetValue(globaltau/locx,globalmuf,0)-2*locx*(1-2*globaltau)*this->GetDerivative(globaltau/locx,globalmuf,0)-globaltau*(1-globaltau)*this->GetDDerivative(globaltau/locx,globalmuf,0));
}

double SCETTER::Integrand(const double xx[])
{
    double locz=func(xx[1],globaltau);
    double locx=func(xx[0],globaltau/locz);
    double L1=Lumi(xx);
    double L1p=LumiP(xx);
    double L1pp=LumiPP(xx);
    double L1ppp=0;
    double Lz=(1-globaltau/locz)*(1-globaltau)*this->GetValue(locx,globalmuf,0)*this->GetValue(globaltau/locx/locz,globalmuf,0)/locx;
    vector<double> logs;
    for(int i=0;i<7;i++)
        logs.push_back(Distribution(locz,globalmh,globalmus,globalx,Lz,L1,L1p,L1pp,L1ppp,globalmode,i));
    vector<double> LDs=GetLD(logs,globalL1,globalL1p,globalL1pp,L1ppp,globalx,globaltau,globalLt,globalmode);
    
    vector<double> S=Soft(globalmus,LDs);
    
    vector<double> xs1=Multiply(GlobalH,S);
    vector<double> xs2=Multiply(xs1,GlobalW);
    vector<double> xs3=Multiply(xs2,GlobalU);
    //cout<<"order "<<globalorder<<" z: "<<locz<<" x1: "<<locx<<" tau: "<<globaltau<<" globalmuf: "<<globalmuf<<endl;
    
    double tot=0;
    for(int i=0;i<=globalorder;i++)
        tot+=xs3[i];
    return tot;
    
}

vector<double> SCETTER::IntegrateXS()
{
    
    int NDIM=2;
    const int NCOMP=1;
    int NVEC=1;
    double EPSREL= 1e-3;
    double EPSABS= 1e-18;
    int VERBOSE=0;
    //int LAST=4;
    int SEED=0;
    int MINEVAL=100;
    int MAXEVAL=1e9;
    int NSTART=10000;
    int NINCREASE=500;
    int NBATCH=1000;
    int KEY=0;
    
    
    double integral[NCOMP], error[NCOMP], prob[NCOMP];
    int  nregions, neval, fail;
    
    EPSREL= 1e-5;
    Cuhre(NDIM, NCOMP,IntLumi, this, NVEC,
          EPSREL, EPSABS, VERBOSE ,
          MINEVAL, MAXEVAL, KEY,
          NULL, NULL,
          &nregions, &neval, &fail, integral, error, prob);
    globalL1=integral[0];
    //cout<<"globalL1: "<<globalL1<<endl;
    
    Cuhre(NDIM, NCOMP, IntLumiP, this, NVEC,
          EPSREL, EPSABS, VERBOSE ,
          MINEVAL, MAXEVAL, KEY,
          NULL, NULL,
          &nregions, &neval, &fail, integral, error, prob);
    globalL1p=integral[0];
    //cout<<"globalL1P: "<<globalL1p<<endl;
    
    Cuhre(NDIM, NCOMP, IntLumiPP, this, NVEC,
          EPSREL, EPSABS, VERBOSE ,
          MINEVAL, MAXEVAL, KEY,
          NULL, NULL,
          &nregions, &neval, &fail, integral, error, prob);
    globalL1pp=integral[0];
    //cout<<"globalL1PP: "<<globalL1pp<<endl;
    
    fail=0;
    //cout<<"Lumis are: L1: "<<globalL1<<" L1p: "<<globalL1p<<" L1pp: "<<globalL1pp<<endl;
    
    NDIM=2;
    vector<double> xs;
    EPSREL= 5e-4;
    for(int i=0;i<4;i++)
    {
        globalx=GetX(globalmus,globalmuf,i);
        globalorder=i;
        IsVegas=0;
        Cuhre(NDIM, NCOMP, IntIntegrand, this, NVEC,
              EPSREL, EPSABS, VERBOSE ,
              MINEVAL, MAXEVAL, KEY,
              NULL, NULL,
              &nregions, &neval, &fail, integral, error, prob);//*/
        
        if(fail!=0)
        {
            EPSREL= 1e-3;
            //int VERBOSE=1;
            fail=0;
            IsVegas=1;
            //cout<<"Switching to Vegas!"<<endl;
            Vegas(NDIM, NCOMP, IntIntegrand, this, NVEC,
                  EPSREL, EPSABS, VERBOSE, SEED,
                  MINEVAL, MAXEVAL, NSTART, NINCREASE, NBATCH,
                  0, NULL, NULL,
                  &neval, &fail, integral, error, prob);//*/
            EPSREL= 1e-3;
        }
        if(fail!=0)
        {
            cout<<"Monte Carlo is stupid. Integration went into singular region!"<<endl;
            exit(0);
        }
        
        //cout<<"Log "<<i<<": "<<integral[0]<<" error: "<<error[0]<<endl;
        xs.push_back(integral[0]);
    }
    return xs;
}

double SCETTER::GetBorn(double mh)
{
    double alphamH=real(alpha(mh,alpha_order,false));
    return Gf/sqrt(2.0)/288.0/Pi*alphamH*alphamH;
}

vector<double> SCETTER::CreateXS(double mh, double mt,double muf,double muh,double mus,double mut,double tau,bool pisq, double sqrts)
{
    double conversionpb=3.8940000000000006e8;
    double Lt=log((1-tau)*mh/mus);
    //double L1=0;
    //double L1p=0;
    //double L1pp=0;
    
    
    double Born=GetBorn(mh);
    
    globalLt=Lt;
    globalmh=mh;
    globalmt=mt;
    globalmuf=muf;
    globalmuh=muh;
    globalmus=mus;
    globalmut=mut;
    globalpisq=pisq;
    globaltau=tau;
    globalmode=sqrts;
    
    GlobalH=Hard(globalmh,globalmuh,globalpisq);
    GlobalW=WilsonCoeff(globalmt,globalmut);
    GlobalU=U(globalmh,globalmuf,globalmus,globalmuh,globalmut,globalmt,globalpisq);
    
    //cout<<"The U functions is: U0: "<<GlobalU[0]<<" U1: "<<GlobalU[1]<<" U2: "<<GlobalU[2]<<" U3: "<<GlobalU[3]<<endl;
    //cout<<"The H functions is: H0: "<<GlobalH[0]<<" H1: "<<GlobalH[1]<<" H2: "<<GlobalH[2]<<" H3: "<<GlobalH[3]<<endl;
    //cout<<"The W functions is: W0: "<<GlobalW[0]<<" W1: "<<GlobalW[1]<<" W2: "<<GlobalW[2]<<" W3: "<<GlobalW[3]<<endl;
    
    vector<double> xs=IntegrateXS();
    for(int i=0;i<4;i++)
        xs[i]*=Born*conversionpb;
    return xs;
}


vector<double> SCETTER::DeltaSCET(double mh, double mt,double GF,double muf,double tau)
{
    Gf=GF;
    
    //vector<double> CreateXS(double mh, double mt,double muf,double muh,double mus,double mut,double tau,bool pisq, double sqrts);
    vector<double> xsres=CreateXS( mh, mt, muf, mh, musfit(muf), mt,tau,true, 1);
    vector<double> xsFO=CreateXS( mh,  mt, muf, muf, muf, muf,tau,false, 1);
    vector<double > delta;
    for(int i=0;i<xsFO.size();i++)
        delta.push_back(xsres[i]-xsFO[i]);
    return delta;
    
}
