#include "constants.h"
#include<vector>
#include "as_series.h"
#include "higgs_eft.h"
#include "cppchaplin.h"
#include <complex>
using namespace std;

// quark1 - quark2 reg (different flavors)
namespace HEFT{
    // NNLO
    // mathematica file for q1q2_n2lo_lz*_L* : Higgs_falko_q1q2_n2

    double q1q2_n2lo_lz0_L0(const double& z){
        const double Nc = QCD::Nc;
        
        complex<double> res =-(pow(-1 + Nc,2)*pow(1 + Nc,2)*(384*consts::z2 + 384*z*consts::z2 + 96*pow(z,2)*consts::z2)*chaplin::HPL(1,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(-240 + 36*pow(z,2))*chaplin::HPL(0,1,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(-96 - 96*z - 24*pow(z,2))*chaplin::HPL(0,0,1,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(144 + 144*z + 36*pow(z,2))*chaplin::HPL(0,1,0,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(-192 - 192*z - 48*pow(z,2))*chaplin::HPL(0,1,1,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(192 + 192*z + 48*pow(z,2))*chaplin::HPL(1,0,0,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(384 + 384*z + 96*pow(z,2))*chaplin::HPL(1,1,0,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*chaplin::HPL(1,0,z)*(-168 - 48*z + 24*pow(z,2) - 192*log(z) - 192*z*log(z) - 48*pow(z,2)*log(z)))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(315 - 282*z - 33*pow(z,2) - 72*consts::z2 + 48*z*consts::z2 + 36*pow(z,2)*consts::z2 + 177*log(z) - 132*z*log(z) - 87*pow(z,2)*log(z) - 48*consts::z2*log(z) - 48*z*consts::z2*log(z) - 12*pow(z,2)*consts::z2*log(z) + 36*pow(log(z),2) - 48*z*pow(log(z),2) - 12*pow(z,2)*pow(log(z),2) + 8*pow(log(z),3) + 8*z*pow(log(z),3) + 2*pow(z,2)*pow(log(z),3)))/(96.*pow(Nc,2)*z)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res);
    }
    
    double q1q2_n2lo_lz0_L1(const double& z){
        const double Nc = QCD::Nc;
        
        complex<double> res =-(pow(-1 + Nc,2)*pow(1 + Nc,2)*(-96 - 96*z - 24*pow(z,2))*chaplin::HPL(0,1,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(-192 - 192*z - 48*pow(z,2))*chaplin::HPL(1,0,z))/(96.*pow(Nc,2)*z) - (pow(-1 + Nc,2)*pow(1 + Nc,2)*(153 - 108*z - 45*pow(z,2) - 96*consts::z2 - 96*z*consts::z2 - 24*pow(z,2)*consts::z2 + 72*log(z) - 48*z*log(z) - 30*pow(z,2)*log(z) + 24*pow(log(z),2) + 24*z*pow(log(z),2) + 6*pow(z,2)*pow(log(z),2)))/(96.*pow(Nc,2)*z)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res);
    }
    
    double q1q2_n2lo_lz0_L2(const double& z){
        const double Nc = QCD::Nc;
        
        complex<double> res =-(pow(-1 + Nc,2)*pow(1 + Nc,2)*(36 - 24*z - 12*pow(z,2) + 24*log(z) + 24*z*log(z) + 6*pow(z,2)*log(z)))/(96.*pow(Nc,2)*z)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res);
    }
    
    double q1q2_n2lo_lz1_L0(const double& z){
        const double Nc = QCD::Nc;
        
        complex<double> res =(pow(-1 + pow(Nc,2),2)*(153 - 108*z - 45*pow(z,2) - 192*consts::z2 - 192*z*consts::z2 - 48*pow(z,2)*consts::z2))/(48.*pow(Nc,2)*z) + (pow(-1 + pow(Nc,2),2)*(192 - 48*z - 48*pow(z,2))*chaplin::HPL(0,z))/(48.*pow(Nc,2)*z) + (pow(-1 + pow(Nc,2),2)*(48 + 48*z + 12*pow(z,2))*pow(chaplin::HPL(0,z),2))/(48.*pow(Nc,2)*z) + (pow(-1 + pow(Nc,2),2)*(-192 - 192*z - 48*pow(z,2))*chaplin::HPL(1,0,z))/(48.*pow(Nc,2)*z)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res)*log(1.-z);
    }
    
    double q1q2_n2lo_lz1_L1(const double& z){
        const double Nc = QCD::Nc;
        
        complex<double> res =(pow(-1 + pow(Nc,2),2)*(72 - 48*z - 24*pow(z,2)))/(48.*pow(Nc,2)*z) + (pow(-1 + pow(Nc,2),2)*(96 + 96*z + 24*pow(z,2))*chaplin::HPL(0,z))/(48.*pow(Nc,2)*z)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res)*log(1.-z);
    }
    
    double q1q2_n2lo_lz2_L0(const double& z){
        const double Nc = QCD::Nc;
        
        complex<double> res =-(pow(-1 + pow(Nc,2),2)*(3 - 2*z - pow(z,2)))/(2.*pow(Nc,2)*z) - (pow(-1 + pow(Nc,2),2)*pow(2 + z,2)*chaplin::HPL(0,z))/(2.*pow(Nc,2)*z)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res)*pow(log(1.-z),2.);
    }
    
    // N3LO
    //--------------------------- n3lo
    //: implementation of Bernhard's triple expansion (Nov 2017)
    //: we have here the full qqbar reg, including logs(mh^2/muf^2)
    //: i=0: gg   i=1: qg   i=2: qqbar   i=3: qq   i=4: qQ2
    double N3LORegEvaluator::n3lo_reg_complete_q1q2(const double& z, unsigned int log_muf_mh_squared_power) {
        
        //: main forking into three regions of [0,1]
        double res = 0.0;
        if (z<=1./13.) {
            const double x = sqrt(z);
            const double logx = log(z);
            for (int t = 0; t < NumZTerms; t++) {
                for (unsigned int p=0; p < 6; p++) {
                    //: [a_s][initial state][log_muf_mh_squared_power][x power][log(x) power]
                    //: [3: n3lo]  [0: gg] ....
                    res += pow(x,t-2) * pow(logx,p) * ZExp[3][4][log_muf_mh_squared_power][t][p];
                }
            }
        }
        else if (z>1.0/13.0 and z<=0.75) {
            const double x = 0.5-z;
            //const double logx = log(1-z);
            for (int t = 0; t < NumWTerms; t++) {
                //for (unsigned int p=0; p < 6; p++) {
                //: [a_s][initial state][log_muf_mh_squared_power][x power][log(x) power]
                //: [3: n3lo]  [0: gg] ....
                res += pow(x,t) * WExp[3][4][log_muf_mh_squared_power][t][0];
                //}
            }
        }
        else if (z>0.75) {
            const double x = 1-z;
            const double logx = log(x);
            for (int t = 0; t < NumZbTerms; t++) {
                for (unsigned int p=0; p < 6; p++) {
                    //: [a_s][initial state][log_muf_mh_squared_power][x power][log(x) power]
                    //: [3: n3lo]  [0: gg] ....
                    res += pow(x,t) * pow(logx,p) * ZbExp[3][4][log_muf_mh_squared_power][t][p];
                }
            }
        }
        else {
            cerr << "src/higgs/effective_theory/eft_gg_reg_n3lo.cpp: n3lo_reg_complete: You shouldn't be here " << endl;
            cerr << "z = " << z << endl;
            exit(1);
        }
        
        return res;
    }
    double q1q2_n3lo_reg_no_Lf(const double& z, int truncation_order){
        return q1q2_n3lo_r_lzX_series(0,z,truncation_order)+
        q1q2_n3lo_r_lzX_series(1,z,truncation_order)+
        q1q2_n3lo_r_lzX_series(2,z,truncation_order)+
        q1q2_n3lo_r_lzX_series(3,z,truncation_order)+
        q1q2_n3lo_r_lzX_series(4,z,truncation_order)+
        q1q2_n3lo_r_lzX_series(5,z,truncation_order);
    }
    
    //series expansions of the coeffs of log(1-z)^a
    
    
    
    double q1q2_n3lo_r_lz5_full_series(const double&z, const double& L){
        return q1q2_n3lo_r_lzX_series(5,z,30);
    }
    double q1q2_n3lo_r_lz4_full_series(const double&z, const double& L){
        return q1q2_n3lo_r_lzX_series(4,z,30);
    }
    double q1q2_n3lo_r_lz3_full_series(const double&z, const double& L){
        return q1q2_n3lo_r_lzX_series(3,z,30);
    }
    double q1q2_n3lo_r_lz2_full_series(const double&z, const double& L){
        return q1q2_n3lo_r_lzX_series(2,z,30);
    }
    double q1q2_n3lo_r_lz1_full_series(const double&z, const double& L){
        return q1q2_n3lo_r_lzX_series(1,z,30);
    }
    double q1q2_n3lo_r_lz0_full_series(const double&z, const double& L){
        return q1q2_n3lo_r_lzX_series(0,z,30);
    }
    
    class q1q2regn3locoeffs{
    public:
        static double give(int logpow,int coeff){
            double coeffs_lzbar_4[38]={0,7.4567901234567901235,11.185185185185185185,18.641975308641975309,24.234567901234567901,28.957201646090534979,33.058436213991769547,36.680305702527924750,39.920458553791887125,42.849911816578483245,45.521928277483833039,47.977396540359503322,50.248328077957707587,52.360216189845819475,54.333670718855904041,56.185576837428689281,57.929933098451616970,59.578468562019760277,61.141104727597102325,62.626306475612747829,64.041352320678086072,65.392545117484917967,66.685378210318010800,67.924667816757375693,69.114659521241833801,70.259114701059332459,71.361381241103650281,72.424451833063131129,73.451012378142194727,74.443482437449205928,75.404049243993023966,76.334696465185295214,77.237228656875192997,78.113292159282781426,78.964393037344443802,79.791912552445658249,80.597120561575236006,81.381187167864064518};
            
            double coeffs_lzbar_3[38]={0,-24.395061728395061728,-39.666666666666666667,-69.847736625514403292,-81.469135802469135802,-86.775775034293552812,-88.447914951989026063,-87.774074354021443969,-85.526126718176982727,-82.197322233420117018,-78.114926747104877616,-73.502462250356804362,-68.516298978225518763,-63.268053421802029162,-57.838754228015316721,-52.288059514597770580,-46.660406527397825709,-40.989207016152445353,-35.299766774873835285,-29.611353718990928861,-23.938686313338052063,-18.293020240126547937,-12.682952031395611754,-7.1150203330388163470,-1.5941605126143781544,3.8759483313463092804,9.2926161975993935556,14.653934865222946481,19.958615878620399303,25.205863121231836654,30.395272012046890892,35.526749346667645152,40.600449257545437168,45.616721840219962546,50.576071790780396935,55.479124999274622522,60.326601497508047553,65.119293505593480380};
            
            double coeffs_lzbar_2[38]={0,52.489896597654439685,115.95706711870388175,207.09716947767519386,237.47076476542219646,254.23192287123434297,264.94538040323646587,272.37439967017575494,278.00387553823446649,282.67044738524018606,286.85448969917324729,290.83518704103747817,294.77541635117669766,298.76938098288239246,302.87002515093796913,307.10519287765732891,311.48735780050881469,316.01958925410717570,320.69926487673775425,325.52040665896031290,330.47516126757423896,335.55474041537106103,340.75001628918221745,346.05189446287102927,351.45154226840987514,356.94052290883792168,362.51086808462183738,368.15511067695005834,373.86629174481973541,379.63795131325117170,385.46410926592474091,391.33924054460513873,397.25824744049989265,403.21643080671855252,409.20946137420712454,415.23335191547372895,421.28443070411677160,427.35931651858690242};
            
            double coeffs_lzbar_1[38]={0,-13.561786929308484148,-101.23393394810615024,-199.27314126956785435,-204.58987552285818536,-200.32377632257546226,-193.67682715467939524,-186.04538728142484966,-178.26735356200458191,-170.74844584001077329,-163.65083943519443091,-157.01562678947326766,-150.82792547598055764,-145.04948729186671498,-139.63456861123417320,-134.53739619889631438,-129.71544634016193115,-125.13065693720572603,-120.74964107192314645,-116.54344215516672227,-112.48710270844736275,-108.55918159646652275,-104.74128392469491891,-101.01763155738540865,-97.374683829966581062,-93.800809002692681207,-90.286002864310842907,-86.821649284461682930,-83.400317177266710693,-80.015588610259204428,-76.661913322189695436,-73.334485519904874816,-70.029139419528326880,-66.742260540476939567,-63.470710237967393815,-60.211761369117202226,-56.963043334166254570,-53.722495024856202840};
            
            double coeffs_lzbar_0[38]={0,-38.124370110426317948,21.925696240597081762,62.593744603233410852,62.740688635306358115,68.779415469914863798,77.692570847267381368,87.639674285871635337,98.079382599875554433,108.73737745138582576,119.43752527596483326,130.06185554354555711,140.53230575117614796,150.79874595767141445,160.83049088850490077,170.61028407619130415,180.13007254673527896,189.38805689564410784,198.38663713916756435,207.13098320553510014,215.62804008435882144,223.88583574048606186,231.91300048640929751,239.71843454118211274,247.31107978838953640,254.69976501724448046,261.89310309219688922,268.89942484942641179,275.72673894783225253,282.38271000786384766,288.87464956181743955,295.20951589256883520,301.39391994518720607,307.43413528931610221,313.33611068114607414,319.10548418618446298,324.74759812280678409,330.26751430354818789};
            
            switch (logpow){
                case 5: return 0.0;break;
                case 4: return coeffs_lzbar_4[coeff];break;
                case 3: return coeffs_lzbar_3[coeff];break;
                case 2: return coeffs_lzbar_2[coeff];break;
                case 1: return coeffs_lzbar_1[coeff];break;
                case 0: return coeffs_lzbar_0[coeff];break;
                default: cout<<"\nerror: in qg_n3lo_r_lzX, logpow is not in 0-5, logpow="<<logpow<<endl;
                    exit(EXIT_FAILURE);
                    
            }
        }
    };
    
    double q1q2_n3lo_r_lzX_series(int logzbpow,const double& z, int m){
        const int trunc_order = 38;
        if (m>trunc_order){
            cout<<"\nError: the qg_n3lo coefficients are truncated to O("<<trunc_order<<" and you asked for O("<<m<<"))"<<endl;
            exit(EXIT_FAILURE);
        }
        double res=0.;
        for (int i=0;i<m+1;i++){
            res += q1q2regn3locoeffs::give(logzbpow,i)*intpow(1.-z,i);
        }
        return res*intpow(log(1.-z),logzbpow);
    }
    
    
    // Lf terms
    
    
    
    double LEq1q2N3LOregFalko_L1(const double& z) {
        
        complex<double> res = -23.46952604456328 - 536.2657560770523/z - 133.0125930191746*z - \
        41.48229091289416*pow(z,2) + (105.2757802782865 + 157.9136704174297/z \
        - 52.63789013914325*z)*chaplin::HPL(-1,z) + (-105.2757802782865 + \
        105.2757802782865/z + 26.31894506957162*z)*chaplin::HPL(0,-1,z) + \
        (289.5083957652879 - 14.62163614976201/z - \
        67.99060809639336*z)*chaplin::HPL(0,1,z) + (603.3861851135124 + \
        603.3861851135124/z + 150.8465462783781*z)*chaplin::HPL(1,1,z) + \
        (42.66666666666667 + 64./z - 21.33333333333333*z)*chaplin::HPL(-1,-1,0,z) + \
        (-53.33333333333333 - 80./z + 26.66666666666667*z)*chaplin::HPL(-1,0,0,z) + \
        (42.66666666666667 + 64./z - 21.33333333333333*z)*chaplin::HPL(-1,1,0,z) + \
        (42.66666666666667 + 64./z - 21.33333333333333*z)*chaplin::HPL(1,-1,0,z) + \
        (-42.66666666666667 + 42.66666666666667/z + \
        10.66666666666667*z)*chaplin::HPL(0,-1,-1,0,z) + (53.33333333333333 - \
        53.33333333333333/z - 13.33333333333333*z)*chaplin::HPL(0,-1,0,0,z) + \
        (-42.66666666666667 + 42.66666666666667/z + \
        10.66666666666667*z)*chaplin::HPL(0,-1,1,0,z) + (21.33333333333333 - \
        21.33333333333333/z - 5.333333333333333*z)*chaplin::HPL(0,0,-1,0,z) + \
        (-33.18518518518519 - 67.55555555555556/z - \
        13.62962962962963*z)*chaplin::HPL(0,0,1,0,z) + (-42.66666666666667 + \
        42.66666666666667/z + 10.66666666666667*z)*chaplin::HPL(0,1,-1,0,z) + \
        (-149.9259259259259 - 2.962962962962963/z + \
        31.85185185185185*z)*chaplin::HPL(0,1,0,0,z) + (197.3333333333333 - \
        30.22222222222222/z - 46.66666666666667*z)*chaplin::HPL(0,1,1,0,z) + \
        (-42.66666666666667 + 42.66666666666667/z + \
        10.66666666666667*z)*chaplin::HPL(1,0,-1,0,z) + (-36.74074074074074 + \
        110.2222222222222/z + 60.14814814814815*z)*chaplin::HPL(1,0,0,0,z) + (192. - \
        35.55555555555556/z - 48.*z)*chaplin::HPL(1,0,1,0,z) + (-49.18518518518519 - \
        276.7407407407407/z - 108.2962962962963*z)*chaplin::HPL(1,1,0,0,z) + \
        (366.8148148148148 + 366.8148148148148/z + \
        91.7037037037037*z)*chaplin::HPL(1,1,1,0,z) + (-1513.889647440157 + \
        162.7665379190431/z + 188.1281562294257*z + \
        8.384087791495199*pow(z,2))*log(1 - z) + (974.1375370012006 - \
        374.1957963321327/z + 71.75660647252238*z + \
        7.111111111111111*pow(z,2))*pow(log(1 - z),2) + (-61.1358024691358 + \
        91.7037037037037/z - 30.5679012345679*z)*pow(log(1 - z),3) + \
        chaplin::HPL(1,0,0,z)*(-18.96296296296296 - 91.55555555555556/z - \
        89.62962962962963*z + (-49.18518518518519 - 276.7407407407407/z - \
        108.2962962962963*z)*log(1 - z)) + chaplin::HPL(0,1,0,z)*(-155.2592592592593 - \
        324.1975308641975/z + 4.518518518518519*z + (192. - \
        35.55555555555556/z - 48.*z)*log(1 - z)) + \
        chaplin::HPL(-1,0,z)*(-58.96296296296296 - 80.05761316872428/z + \
        20.96296296296296*z - 0.1316872427983539*pow(z,2) + \
        (42.66666666666667 + 64./z - 21.33333333333333*z)*log(1 - z)) + \
        chaplin::HPL(0,-1,0,z)*(-15.40740740740741 - 40.39506172839506/z + \
        13.03703703703704*z + (-42.66666666666667 + 42.66666666666667/z + \
        10.66666666666667*z)*log(1 - z)) + chaplin::HPL(1,1,0,z)*(-357.3333333333333 - \
        334.6666666666667/z + 63.03703703703704*z + (366.8148148148148 + \
        366.8148148148148/z + 91.7037037037037*z)*log(1 - z)) + \
        chaplin::HPL(1,z)*(-549.8485263942554 - 614.6888336360919/z + \
        9.926494530154325*z + (603.3861851135124 + 603.3861851135124/z + \
        150.8465462783781*z)*log(1 - z)) + (1003.748250653419 - \
        382.8151835565971/z - 119.6643085495644*z + \
        1.821673525377229*pow(z,2) + (-870.6727054110328 + \
        445.1396495051931/z - 164.554401908992*z - \
        17.90946502057613*pow(z,2))*log(1 - z) + (-55.40740740740741 - \
        352.2222222222222/z + 93.14814814814815*z)*pow(log(1 - z),2) + \
        (61.1358024691358 + 61.1358024691358/z + \
        15.28395061728395*z)*pow(log(1 - z),3))*log(z) + (311.8420816562467 - \
        125.6572814067941/z + 31.64743781004339*z + \
        5.563786008230453*pow(z,2) + (42.96296296296296 + 148.1481481481481/z \
        - 45.85185185185185*z)*log(1 - z) + (-12.2962962962963 - \
        69.18518518518519/z - 27.07407407407407*z)*pow(log(1 - \
        z),2))*pow(log(z),2) + (-14.96296296296296 - 21.33333333333333/z + \
        3.753086419753086*z + (-6.123456790123457 + 18.37037037037037/z + \
        10.02469135802469*z)*log(1 - z))*pow(log(z),3) + (1.901234567901235 - \
        1.333333333333333/z - 1.080246913580247*z)*pow(log(z),4) + \
        chaplin::HPL(1,0,z)*(136.7347019963746 - 549.5558237458357/z - \
        187.9988463534365*z - 7.176954732510288*pow(z,2) + (-352. - \
        342.6666666666667/z + 65.7037037037037*z)*log(1 - z) + \
        (183.4074074074074 + 183.4074074074074/z + \
        45.85185185185185*z)*pow(log(1 - z),2) + (109.037037037037 + \
        109.037037037037/z + 27.25925925925926*z)*log(z))
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res);
        
    }

    
    
    double LEq1q2N3LOregFalko_L2(const double& z) {
        
        complex<double> res = 386.4142253915595 - 23.65422538265923/z - 38.7353096579462*z - 2.0960219478738*pow(z,2) + (-126.7208466312708 - 126.7208466312708/z - 31.68021165781769*z)*chaplin::HPL(1,z) + (-10.66666666666667 - 16./z + 5.333333333333333*z)*chaplin::HPL(-1,0,z) + (10.66666666666667 - 10.66666666666667/z - 2.666666666666667*z)*chaplin::HPL(0,-1,0,z) + (-48. + 8.888888888888889/z + 12.*z)*chaplin::HPL(0,1,0,z) + (-1.777777777777778 + 55.11111111111111/z + 23.55555555555556*z)*chaplin::HPL(1,0,0,z) + (-77.03703703703704 - 77.03703703703704/z - 19.25925925925926*z)*chaplin::HPL(1,1,0,z) + (-452.7949207053449 + 200.1310052205811/z - 28.90243388003992*z - 3.555555555555556*pow(z,2))*log(1 - z) + (38.51851851851852 - 57.77777777777778/z + 19.25925925925926*z)*pow(log(1 - z),2) + chaplin::HPL(1,0,z)*(94.22222222222222 + 98.37037037037037/z - 14.14814814814815*z + (-77.03703703703704 - 77.03703703703704/z - 19.25925925925926*z)*log(1 - z)) + (198.6751040353101 - 108.8520587678204/z + 35.39033239788599*z + 4.477366255144033*pow(z,2) + (48. + 167.7037037037037/z - 37.25925925925926*z)*log(1 - z) + (-38.51851851851852 - 38.51851851851852/z - 9.62962962962963*z)*pow(log(1 - z),2))*log(z) + (-18.51851851851852 - 32./z + 8.111111111111111*z + (-0.8888888888888889 + 27.55555555555556/z + 11.77777777777778*z)*log(1 - z))*pow(log(z),2) + (3.45679012345679 - 2.666666666666667/z - 2.024691358024691*z)*pow(log(z),3)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res);
        
    }
    
    double LEq1q2N3LOregFalko_L3(const double& z) {
        
        complex<double> res = 62.44986244090486 - 35.95754496650255/z + 1.427280425041029*z + 0.5925925925925926*pow(z,2) + (7.703703703703704 + 7.703703703703704/z + 1.925925925925926*z)*chaplin::HPL(1,0,z) + (-7.703703703703704 + 11.55555555555556/z - 3.851851851851852*z)*log(1 - z) + (-13.03703703703704 - 24.59259259259259/z + 3.703703703703704*z + (7.703703703703704 + 7.703703703703704/z + 1.925925925925926*z)*log(1 - z))*log(z) + (2.074074074074074 - 2.666666666666667/z - 1.481481481481481*z)*pow(log(z),2)
        ;
        check_imaginary_part(res,__PRETTY_FUNCTION__);
        return real(res);
        
    }
    
    
    
    
    
    
    double LEq1q2N3LOregFalko(const double& z, const double& L)
    {
        if (abs(L)<1e-15) return 0.0;
        
        
        return LEq1q2N3LOregFalko_L3(z)*pow(L,3)
        +LEq1q2N3LOregFalko_L2(z)*pow(L,2)
        +LEq1q2N3LOregFalko_L1(z)*L;
    }
    

    

}
