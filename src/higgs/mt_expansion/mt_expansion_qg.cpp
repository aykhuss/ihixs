#include "mt_expansion_qg.h"
#include "constants.h"
#include <iostream>



//: coefficients taken from http://arxiv.org/pdf/0909.3420v1.pdf
//: note that the sigma(z)/z vs sigma(z) difference in what is expanded
//: between ours and Harlander et al.'s conventions leads to differences
//: in the regular part: us = (har_reg + b_k * Log[1-z]^k ) /z
//: where b_k is the plus coefficient at the same order in a_s and rho
//: where rho = mh^2/mt^2




//:  analytic results from Robert Harlander et al, http://arxiv.org/abs/0912.2104
//:  code generation and checks at harlander_mt_expansion_nnlo.m


// quark - gluon channel




HiggsMtExpansion_qg_nnlo_reg::HiggsMtExpansion_qg_nnlo_reg(const double& rho){

    

    _rho=rho;
    set_dimensions(2);
    _channel = "qg";
    _name="qg_reg_nnlo_mt_exp";
    
    

    // if 4*mt^2/mh^2>12 the BFKL coeff cannot be computed from the tabulated values
    // so we switch off matching
    
    

    
    //
    vector<double> thecL0={29.92926324867818,-40.11830524299197,5.356604722933817,25.28661511057316,12.25477110829598,3.719627369503730,2.331386135351323,1.800577291876773,1.516305449006098,1.341923595363101,1.227485871853568,1.149065109678763,1.093472426181498,1.052856407181945,1.022316662008197,0.9986933292042337,0.9798981596209352,0.1679012345679012,-2.859503617107073-0.4447530864197531 * log(_rho),-3.193608555378678-0.4447530864197531 * log(_rho),-3.721810721300514-0.5930041152263374 * log(_rho),-3.199357017596810-0.5930041152263374 * log(_rho),-2.829749250107098-0.5930041152263374 * log(_rho),-2.602071266568004-0.5930041152263374 * log(_rho),-2.431336661923677-0.5930041152263374 * log(_rho),-2.294323933066702-0.5930041152263374 * log(_rho),-2.180183808181014-0.5930041152263374 * log(_rho),-2.082633968217594-0.5930041152263374 * log(_rho),-1.997643279090944-0.5930041152263374 * log(_rho),-1.922462508801424-0.5930041152263374 * log(_rho),-1.855135341833369-0.5930041152263374 * log(_rho),-1.794223621688637-0.5930041152263374 * log(_rho),-1.738641857344828-0.5930041152263374 * log(_rho),-1.687552458402400-0.5930041152263374 * log(_rho),0.02088771310993533,-0.2444063948114512-0.01377167842445620 * log(_rho),0.04235396662193181+0.04588201793062904 * log(_rho),0.3557243355526801+0.1039286939055458 * log(_rho),0.7050058318991716+0.1772540968547913 * log(_rho),1.029338486571648+0.2505794998040368 * log(_rho),1.326246918054334+0.3239049027532824 * log(_rho),1.606369717962839+0.3972303057025279 * log(_rho),1.873889248250095+0.4705557086517735 * log(_rho),2.131201650739935+0.5438811116010190 * log(_rho),2.379901462400613+0.6172065145502646 * log(_rho),2.621138019620924+0.6905319174995101 * log(_rho),2.855783094410778+0.7638573204487556 * log(_rho),3.084522261947729+0.8371827233980012 * log(_rho),3.307909591441480+0.9105081263472467 * log(_rho),3.526402602167355+0.9838335292964923 * log(_rho),3.740385731323460+1.057158932245738 * log(_rho),0.003211139805716525,-0.03109462903341185-0.001475679134822653 * log(_rho),0.002619408245107246+0.002408344356261023 * log(_rho),-0.006919117951008688-0.002818113527990071 * log(_rho),-0.06436094954708331-0.01592583764044026 * log(_rho),-0.1708654421197911-0.03911482706251225 * log(_rho),-0.3232984267286219-0.07238508179420602 * log(_rho),-0.5174982655152780-0.1157366018355216 * log(_rho),-0.7507470254340277-0.1691693871864589 * log(_rho),-1.020959961049782-0.2326834378470181 * log(_rho),-1.326433129107374-0.3062787538171990 * log(_rho),-1.665721829943734-0.3899553350970018 * log(_rho),-2.037570523514244-0.4837131816864263 * log(_rho),-2.440868215832922-0.5875522935854726 * log(_rho),-2.874618150926446-0.7014726707941407 * log(_rho),-3.337916226130942-0.8254743133124306 * log(_rho),-3.829935051229565-0.9595572211403423 * log(_rho),6.472588517509853,50.33333333333333,20.30592185084319,-15.96296296296296,-12.12500000000000,-2.814320987654321,-0.03351851851851852,1.230143613000756,1.913191295036533,2.312937767699672,2.554636243386243,2.700760142713005,2.786002958881747,2.831078888304996,2.849009561189048,2.848300175381982,2.834671694597290,0.3358024691358025,1.144135802469136,1.512345679012346,1.436111111111111,1.079938271604938,0.8140432098765432,0.6254423868312757,0.4766460905349794,0.3531804820693710,0.2475477660199882,0.1552344209288654,0.07327267382822938,-0.0004060891097928135,-0.06730564017601055,-0.1285548847585885,-0.1850233648381797,-0.2373951597099745,0.04177542621987066,0.05862250146972369,-0.03999467225161670,-0.2118904320987654,-0.3563607804232804,-0.4743322310405644,-0.5707601655888693,-0.6519923784328546,-0.7213481937270793,-0.7809170994186426,-0.8321488162308819,-0.8761124706320363,-0.9136307549133414,-0.9453570745292251,-0.9718233031191447,-0.9934710153244104,-1.010672810501500,0.006422279611433051,0.006510321747011562,0.002588624776042104,0.01002430249363120,0.04617022768469528,0.1061577420757398,0.1871409425215559,0.2866034446065806,0.4027499561197078,0.5341675349433612,0.6796858583735563,0.8383039186830477,1.009146178202668,1.191434058857126,1.384466282825551,1.587604709016230,1.800263774161882,2.638888888888889,-16.50000000000000,-6.166666666666667,12.37037037037037,10.59722222222222,7.629629629629630,6.104629629629630,5.136507936507937,4.452711640211640,3.938271604938272,3.534722222222222,3.208529741863075,2.938804713804714,2.711732711732712,2.517755392755393,2.350020350020350,2.203472222222222,0,-0.5194444444444444,-0.5194444444444444,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,-0.6925925925925926,0,-0.02366732804232804,0.02744047619047619,0.07065917107583774,0.1302849426807760,0.1899107142857143,0.2495364858906526,0.3091622574955908,0.3687880291005291,0.4284138007054674,0.4880395723104056,0.5476653439153439,0.6072911155202822,0.6669168871252205,0.7265426587301587,0.7861684303350970,0.8457942019400353,0,-0.002610807980599647,0.001391892636684303,-0.002303277483833039,-0.01128866291887125,-0.02778440990593768,-0.05179051844503233,-0.08330698853615520,-0.1223338201793063,-0.1688710133744856,-0.2229185681216931,-0.2844764844209289,-0.3535447622721928,-0.4301234016754850,-0.5142124026308054,-0.6058117651381540,-0.7049214891975309,6.796296296296296,0,6.796296296296296,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    
    
    cL0=thecL0;
    
    
    
    cL1[0][0][0]= -3.68999796245863;
    cL1[1][0][0]= -0.1679012345679012;
    cL1[2][0][0]= -0.02088771310993533;
    cL1[3][0][0]= -0.003211139805716525;
    cL1[0][1][0]= -1.444444444444444;
    cL1[1][1][0]=0;
    cL1[2][1][0]=0;
    cL1[3][1][0]=0;
    cL1[0][2][0]= -10.33333333333333;
    cL1[1][2][0]=0;
    cL1[2][2][0]=0;
    cL1[3][2][0]=0;
    cL1[0][3][0]=0;
    cL1[1][3][0]=0;
    cL1[2][3][0]=0;
    cL1[3][3][0]=0;
    cL1[0][0][1]= -24.11111111111111;
    cL1[1][0][1]= -0.8759259259259259;
    cL1[2][0][1]= -0.03990961199294533;
    cL1[3][0][1]= -0.004402538947677837;
    cL1[0][1][1]=16.88888888888889;
    cL1[1][1][1]=0.5296296296296296;
    cL1[2][1][1]=0.02413139329805996;
    cL1[3][1][1]=0.002662000293944738;
    cL1[0][2][1]=0;
    cL1[1][2][1]=0;
    cL1[2][2][1]=0;
    cL1[3][2][1]=0;
    cL1[0][3][1]=0;
    cL1[1][3][1]=0;
    cL1[2][3][1]=0;
    cL1[3][3][1]=0;
    cL1[0][0][2]= -11.57888685134752;
    cL1[1][0][2]= -1.258641975308642;
    cL1[2][0][2]=0.03184376837154615;
    cL1[3][0][2]= -0.001416588806304415;
    cL1[0][1][2]=8.666666666666667;
    cL1[1][1][2]=0.5296296296296296;
    cL1[2][1][2]= -0.02583664021164021;
    cL1[3][1][2]= -0.001224004262198707;
    cL1[0][2][2]= -10.33333333333333;
    cL1[1][2][2]=0;
    cL1[2][2][2]=0;
    cL1[3][2][2]=0;
    cL1[0][3][2]=0;
    cL1[1][3][2]=0;
    cL1[2][3][2]=0;
    cL1[3][3][2]=0;
    cL1[0][0][3]=9.765432098765432;
    cL1[1][0][3]= -1.4440329218107;
    cL1[2][0][3]=0.1625373554771703;
    cL1[3][0][3]= -0.006517981661114377;
    cL1[0][1][3]= -11.11111111111111;
    cL1[1][1][3]=0.7061728395061728;
    cL1[2][1][3]= -0.0677608759553204;
    cL1[3][1][3]=0.002330822555359592;
    cL1[0][2][3]=0;
    cL1[1][2][3]=0;
    cL1[2][2][3]=0;
    cL1[3][2][3]=0;
    cL1[0][3][3]=0;
    cL1[1][3][3]=0;
    cL1[2][3][3]=0;
    cL1[3][3][3]=0;
    cL1[0][0][4]=8.37962962962963;
    cL1[1][0][4]= -1.405144032921811;
    cL1[2][0][4]=0.299659651797962;
    cL1[3][0][4]= -0.03152161488952577;
    cL1[0][1][4]= -9.888888888888889;
    cL1[1][1][4]=0.7061728395061728;
    cL1[2][1][4]= -0.1260569150499706;
    cL1[3][1][4]=0.0109041464579659;
    cL1[0][2][4]=0;
    cL1[1][2][4]=0;
    cL1[2][2][4]=0;
    cL1[3][2][4]=0;
    cL1[0][3][4]=0;
    cL1[1][3][4]=0;
    cL1[2][3][4]=0;
    cL1[3][3][4]=0;
    cL1[0][0][5]=3.546666666666667;
    cL1[1][0][5]= -1.366069958847737;
    cL1[2][0][5]=0.4366345715755438;
    cL1[3][0][5]= -0.07650720970915801;
    cL1[0][1][5]= -7.125925925925926;
    cL1[1][1][5]=0.7061728395061728;
    cL1[2][1][5]= -0.1843529541446208;
    cL1[3][1][5]=0.02668631809719773;
    cL1[0][2][5]=0;
    cL1[1][2][5]=0;
    cL1[2][2][5]=0;
    cL1[3][2][5]=0;
    cL1[0][3][5]=0;
    cL1[1][3][5]=0;
    cL1[2][3][5]=0;
    cL1[3][3][5]=0;
    cL1[0][0][6]=1.95641975308642;
    cL1[1][0][6]= -1.344423868312757;
    cL1[2][0][6]=0.5715141552763081;
    cL1[3][0][6]= -0.1417356120684728;
    cL1[0][1][6]= -5.711111111111111;
    cL1[1][1][6]=0.7061728395061728;
    cL1[2][1][6]= -0.242648993239271;
    cL1[3][1][6]=0.04967733747305507;
    cL1[0][2][6]=0;
    cL1[1][2][6]=0;
    cL1[2][2][6]=0;
    cL1[3][2][6]=0;
    cL1[0][3][6]=0;
    cL1[1][3][6]=0;
    cL1[2][3][6]=0;
    cL1[3][3][6]=0;
    cL1[0][0][7]=1.152350718065004;
    cL1[1][0][7]= -1.329706055261611;
    cL1[2][0][7]=0.7054207591472803;
    cL1[3][0][7]= -0.2270492225336637;
    cL1[0][1][7]= -4.812698412698413;
    cL1[1][1][7]=0.7061728395061728;
    cL1[2][1][7]= -0.3009450323339212;
    cL1[3][1][7]=0.07987720458553792;
    cL1[0][2][7]=0;
    cL1[1][2][7]=0;
    cL1[2][2][7]=0;
    cL1[3][2][7]=0;
    cL1[0][3][7]=0;
    cL1[1][3][7]=0;
    cL1[2][3][7]=0;
    cL1[3][3][7]=0;
    cL1[0][0][8]=0.6666792642983119;
    cL1[1][0][8]= -1.31875367430923;
    cL1[2][0][8]=0.8387723244904958;
    cL1[3][0][8]= -0.3323847043245453;
    cL1[0][1][8]= -4.177248677248677;
    cL1[1][1][8]=0.7061728395061728;
    cL1[2][1][8]= -0.3592410714285714;
    cL1[3][1][8]=0.1172859194346463;
    cL1[0][2][8]=0;
    cL1[1][2][8]=0;
    cL1[2][2][8]=0;
    cL1[3][2][8]=0;
    cL1[0][3][8]=0;
    cL1[1][3][8]=0;
    cL1[2][3][8]=0;
    cL1[3][3][8]=0;
    cL1[0][0][9]=0.3456783124772543;
    cL1[1][0][9]= -1.310187634724672;
    cL1[2][0][9]=0.971770550469845;
    cL1[3][0][9]= -0.4577102593566576;
    cL1[0][1][9]= -3.698412698412698;
    cL1[1][1][9]=0.7061728395061728;
    cL1[2][1][9]= -0.4175371105232216;
    cL1[3][1][9]=0.1619034820203802;
    cL1[0][2][9]=0;
    cL1[1][2][9]=0;
    cL1[2][2][9]=0;
    cL1[3][2][9]=0;
    cL1[0][3][9]=0;
    cL1[1][3][9]=0;
    cL1[2][3][9]=0;
    cL1[3][3][9]=0;
    cL1[0][0][10]=0.1219400352733686;
    cL1[1][0][10]= -1.30326817558299;
    cL1[2][0][10]=1.104527711436083;
    cL1[3][0][10]= -0.6030078113262623;
    cL1[0][1][10]= -3.322222222222222;
    cL1[1][1][10]=0.7061728395061728;
    cL1[2][1][10]= -0.4758331496178718;
    cL1[3][1][10]=0.2137298923427396;
    cL1[0][2][10]=0;
    cL1[1][2][10]=0;
    cL1[2][2][10]=0;
    cL1[3][2][10]=0;
    cL1[0][3][10]=0;
    cL1[1][3][10]=0;
    cL1[2][3][10]=0;
    cL1[3][3][10]=0;
    cL1[0][0][11]= -0.03953925984229015;
    cL1[1][0][11]= -1.297547075695224;
    cL1[2][0][11]=1.237112220826727;
    cL1[3][0][11]= -0.7682662165452289;
    cL1[0][1][11]= -3.017732884399551;
    cL1[1][1][11]=0.7061728395061728;
    cL1[2][1][11]= -0.534129188712522;
    cL1[3][1][11]=0.2727651504017245;
    cL1[0][2][11]=0;
    cL1[1][2][11]=0;
    cL1[2][2][11]=0;
    cL1[3][2][11]=0;
    cL1[0][3][11]=0;
    cL1[1][3][11]=0;
    cL1[2][3][11]=0;
    cL1[3][3][11]=0;
    cL1[0][0][12]= -0.1589728331900049;
    cL1[1][0][12]= -1.292731013842125;
    cL1[2][0][12]=1.36956848439198;
    cL1[3][0][12]= -0.9534781934989593;
    cL1[0][1][12]= -2.765656565656566;
    cL1[1][1][12]=0.7061728395061728;
    cL1[2][1][12]= -0.5924252278071723;
    cL1[3][1][12]=0.3390092561973349;
    cL1[0][2][12]=0;
    cL1[1][2][12]=0;
    cL1[2][2][12]=0;
    cL1[3][2][12]=0;
    cL1[0][3][12]=0;
    cL1[1][3][12]=0;
    cL1[2][3][12]=0;
    cL1[3][3][12]=0;
    cL1[0][0][13]= -0.2488973061816885;
    cL1[1][0][13]= -1.288617658062103;
    cL1[2][0][13]=1.50192671735843;
    cL1[3][0][13]= -1.158638768276905;
    cL1[0][1][13]= -2.553224553224553;
    cL1[1][1][13]=0.7061728395061728;
    cL1[2][1][13]= -0.6507212669018225;
    cL1[3][1][13]=0.4124622097295708;
    cL1[0][2][13]=0;
    cL1[1][2][13]=0;
    cL1[2][2][13]=0;
    cL1[3][2][13]=0;
    cL1[0][3][13]=0;
    cL1[1][3][13]=0;
    cL1[2][3][13]=0;
    cL1[3][3][13]=0;
    cL1[0][0][14]= -0.3174964596973144;
    cL1[1][0][14]= -1.285061954506399;
    cL1[2][0][14]=1.634208252478342;
    cL1[3][0][14]= -1.3837444211598;
    cL1[0][1][14]= -2.371591371591372;
    cL1[1][1][14]=0.7061728395061728;
    cL1[2][1][14]= -0.7090173059964727;
    cL1[3][1][14]=0.4931240109984323;
    cL1[0][2][14]=0;
    cL1[1][2][14]=0;
    cL1[2][2][14]=0;
    cL1[3][2][14]=0;
    cL1[0][3][14]=0;
    cL1[1][3][14]=0;
    cL1[2][3][14]=0;
    cL1[3][3][14]=0;
    cL1[0][0][15]= -0.3703232750607598;
    cL1[1][0][15]= -1.281956767512323;
    cL1[2][0][15]=1.766428608171664;
    cL1[3][0][15]= -1.628792588395625;
    cL1[0][1][15]= -2.214407814407814;
    cL1[1][1][15]=0.7061728395061728;
    cL1[2][1][15]= -0.7673133450911229;
    cL1[3][1][15]=0.5809946600039193;
    cL1[0][2][15]=0;
    cL1[1][2][15]=0;
    cL1[2][2][15]=0;
    cL1[3][2][15]=0;
    cL1[0][3][15]=0;
    cL1[1][3][15]=0;
    cL1[2][3][15]=0;
    cL1[3][3][15]=0;
    cL1[0][0][16]= -0.4112623201313678;
    cL1[1][0][16]= -1.279221046443269;
    cL1[2][0][16]=1.898599356820918;
    cL1[3][0][16]= -1.893781356795547;
    cL1[0][1][16]= -2.076984126984127;
    cL1[1][1][16]=0.7061728395061728;
    cL1[2][1][16]= -0.8256093841857731;
    cL1[3][1][16]=0.6760741567460317;
    cL1[0][2][16]=0;
    cL1[1][2][16]=0;
    cL1[2][2][16]=0;
    cL1[3][2][16]=0;
    cL1[0][3][16]=0;
    cL1[1][3][16]=0;
    cL1[2][3][16]=0;
    cL1[3][3][16]=0;
    
    cL2[0][0][0]= -0.9444444444444444;
    cL2[1][0][0]=0;
    cL2[2][0][0]=0;
    cL2[3][0][0]=0;
    cL2[0][1][0]=3.444444444444444;
    cL2[1][1][0]=0;
    cL2[2][1][0]=0;
    cL2[3][1][0]=0;
    cL2[0][2][0]=0;
    cL2[1][2][0]=0;
    cL2[2][2][0]=0;
    cL2[3][2][0]=0;
    cL2[0][3][0]=0;
    cL2[1][3][0]=0;
    cL2[2][3][0]=0;
    cL2[3][3][0]=0;
    cL2[0][0][1]= -3.444444444444444;
    cL2[1][0][1]=0;
    cL2[2][0][1]=0;
    cL2[3][0][1]=0;
    cL2[0][1][1]=0;
    cL2[1][1][1]=0;
    cL2[2][1][1]=0;
    cL2[3][1][1]=0;
    cL2[0][2][1]=0;
    cL2[1][2][1]=0;
    cL2[2][2][1]=0;
    cL2[3][2][1]=0;
    cL2[0][3][1]=0;
    cL2[1][3][1]=0;
    cL2[2][3][1]=0;
    cL2[3][3][1]=0;
    cL2[0][0][2]= -3.;
    cL2[1][0][2]=0;
    cL2[2][0][2]=0;
    cL2[3][0][2]=0;
    cL2[0][1][2]=3.444444444444444;
    cL2[1][1][2]=0;
    cL2[2][1][2]=0;
    cL2[3][1][2]=0;
    cL2[0][2][2]=0;
    cL2[1][2][2]=0;
    cL2[2][2][2]=0;
    cL2[3][2][2]=0;
    cL2[0][3][2]=0;
    cL2[1][3][2]=0;
    cL2[2][3][2]=0;
    cL2[3][3][2]=0;
    cL2[0][0][3]=1.148148148148148;
    cL2[1][0][3]=0;
    cL2[2][0][3]=0;
    cL2[3][0][3]=0;
    cL2[0][1][3]=0;
    cL2[1][1][3]=0;
    cL2[2][1][3]=0;
    cL2[3][1][3]=0;
    cL2[0][2][3]=0;
    cL2[1][2][3]=0;
    cL2[2][2][3]=0;
    cL2[3][2][3]=0;
    cL2[0][3][3]=0;
    cL2[1][3][3]=0;
    cL2[2][3][3]=0;
    cL2[3][3][3]=0;
    cL2[0][0][4]=1.555555555555556;
    cL2[1][0][4]=0;
    cL2[2][0][4]=0;
    cL2[3][0][4]=0;
    cL2[0][1][4]=0;
    cL2[1][1][4]=0;
    cL2[2][1][4]=0;
    cL2[3][1][4]=0;
    cL2[0][2][4]=0;
    cL2[1][2][4]=0;
    cL2[2][2][4]=0;
    cL2[3][2][4]=0;
    cL2[0][3][4]=0;
    cL2[1][3][4]=0;
    cL2[2][3][4]=0;
    cL2[3][3][4]=0;
    cL2[0][0][5]=1.12962962962963;
    cL2[1][0][5]=0;
    cL2[2][0][5]=0;
    cL2[3][0][5]=0;
    cL2[0][1][5]=0;
    cL2[1][1][5]=0;
    cL2[2][1][5]=0;
    cL2[3][1][5]=0;
    cL2[0][2][5]=0;
    cL2[1][2][5]=0;
    cL2[2][2][5]=0;
    cL2[3][2][5]=0;
    cL2[0][3][5]=0;
    cL2[1][3][5]=0;
    cL2[2][3][5]=0;
    cL2[3][3][5]=0;
    cL2[0][0][6]=0.9185185185185185;
    cL2[1][0][6]=0;
    cL2[2][0][6]=0;
    cL2[3][0][6]=0;
    cL2[0][1][6]=0;
    cL2[1][1][6]=0;
    cL2[2][1][6]=0;
    cL2[3][1][6]=0;
    cL2[0][2][6]=0;
    cL2[1][2][6]=0;
    cL2[2][2][6]=0;
    cL2[3][2][6]=0;
    cL2[0][3][6]=0;
    cL2[1][3][6]=0;
    cL2[2][3][6]=0;
    cL2[3][3][6]=0;
    cL2[0][0][7]=0.7841269841269841;
    cL2[1][0][7]=0;
    cL2[2][0][7]=0;
    cL2[3][0][7]=0;
    cL2[0][1][7]=0;
    cL2[1][1][7]=0;
    cL2[2][1][7]=0;
    cL2[3][1][7]=0;
    cL2[0][2][7]=0;
    cL2[1][2][7]=0;
    cL2[2][2][7]=0;
    cL2[3][2][7]=0;
    cL2[0][3][7]=0;
    cL2[1][3][7]=0;
    cL2[2][3][7]=0;
    cL2[3][3][7]=0;
    cL2[0][0][8]=0.6878306878306878;
    cL2[1][0][8]=0;
    cL2[2][0][8]=0;
    cL2[3][0][8]=0;
    cL2[0][1][8]=0;
    cL2[1][1][8]=0;
    cL2[2][1][8]=0;
    cL2[3][1][8]=0;
    cL2[0][2][8]=0;
    cL2[1][2][8]=0;
    cL2[2][2][8]=0;
    cL2[3][2][8]=0;
    cL2[0][3][8]=0;
    cL2[1][3][8]=0;
    cL2[2][3][8]=0;
    cL2[3][3][8]=0;
    cL2[0][0][9]=0.6141975308641975;
    cL2[1][0][9]=0;
    cL2[2][0][9]=0;
    cL2[3][0][9]=0;
    cL2[0][1][9]=0;
    cL2[1][1][9]=0;
    cL2[2][1][9]=0;
    cL2[3][1][9]=0;
    cL2[0][2][9]=0;
    cL2[1][2][9]=0;
    cL2[2][2][9]=0;
    cL2[3][2][9]=0;
    cL2[0][3][9]=0;
    cL2[1][3][9]=0;
    cL2[2][3][9]=0;
    cL2[3][3][9]=0;
    cL2[0][0][10]=0.5555555555555556;
    cL2[1][0][10]=0;
    cL2[2][0][10]=0;
    cL2[3][0][10]=0;
    cL2[0][1][10]=0;
    cL2[1][1][10]=0;
    cL2[2][1][10]=0;
    cL2[3][1][10]=0;
    cL2[0][2][10]=0;
    cL2[1][2][10]=0;
    cL2[2][2][10]=0;
    cL2[3][2][10]=0;
    cL2[0][3][10]=0;
    cL2[1][3][10]=0;
    cL2[2][3][10]=0;
    cL2[3][3][10]=0;
    cL2[0][0][11]=0.5075196408529742;
    cL2[1][0][11]=0;
    cL2[2][0][11]=0;
    cL2[3][0][11]=0;
    cL2[0][1][11]=0;
    cL2[1][1][11]=0;
    cL2[2][1][11]=0;
    cL2[3][1][11]=0;
    cL2[0][2][11]=0;
    cL2[1][2][11]=0;
    cL2[2][2][11]=0;
    cL2[3][2][11]=0;
    cL2[0][3][11]=0;
    cL2[1][3][11]=0;
    cL2[2][3][11]=0;
    cL2[3][3][11]=0;
    cL2[0][0][12]=0.4673400673400673;
    cL2[1][0][12]=0;
    cL2[2][0][12]=0;
    cL2[3][0][12]=0;
    cL2[0][1][12]=0;
    cL2[1][1][12]=0;
    cL2[2][1][12]=0;
    cL2[3][1][12]=0;
    cL2[0][2][12]=0;
    cL2[1][2][12]=0;
    cL2[2][2][12]=0;
    cL2[3][2][12]=0;
    cL2[0][3][12]=0;
    cL2[1][3][12]=0;
    cL2[2][3][12]=0;
    cL2[3][3][12]=0;
    cL2[0][0][13]=0.4331779331779332;
    cL2[1][0][13]=0;
    cL2[2][0][13]=0;
    cL2[3][0][13]=0;
    cL2[0][1][13]=0;
    cL2[1][1][13]=0;
    cL2[2][1][13]=0;
    cL2[3][1][13]=0;
    cL2[0][2][13]=0;
    cL2[1][2][13]=0;
    cL2[2][2][13]=0;
    cL2[3][2][13]=0;
    cL2[0][3][13]=0;
    cL2[1][3][13]=0;
    cL2[2][3][13]=0;
    cL2[3][3][13]=0;
    cL2[0][0][14]=0.4037444037444037;
    cL2[1][0][14]=0;
    cL2[2][0][14]=0;
    cL2[3][0][14]=0;
    cL2[0][1][14]=0;
    cL2[1][1][14]=0;
    cL2[2][1][14]=0;
    cL2[3][1][14]=0;
    cL2[0][2][14]=0;
    cL2[1][2][14]=0;
    cL2[2][2][14]=0;
    cL2[3][2][14]=0;
    cL2[0][3][14]=0;
    cL2[1][3][14]=0;
    cL2[2][3][14]=0;
    cL2[3][3][14]=0;
    cL2[0][0][15]=0.3781033781033781;
    cL2[1][0][15]=0;
    cL2[2][0][15]=0;
    cL2[3][0][15]=0;
    cL2[0][1][15]=0;
    cL2[1][1][15]=0;
    cL2[2][1][15]=0;
    cL2[3][1][15]=0;
    cL2[0][2][15]=0;
    cL2[1][2][15]=0;
    cL2[2][2][15]=0;
    cL2[3][2][15]=0;
    cL2[0][3][15]=0;
    cL2[1][3][15]=0;
    cL2[2][3][15]=0;
    cL2[3][3][15]=0;
    cL2[0][0][16]=0.3555555555555556;
    cL2[1][0][16]=0;
    cL2[2][0][16]=0;
    cL2[3][0][16]=0;
    cL2[0][1][16]=0;
    cL2[1][1][16]=0;
    cL2[2][1][16]=0;
    cL2[3][1][16]=0;
    cL2[0][2][16]=0;
    cL2[1][2][16]=0;
    cL2[2][2][16]=0;
    cL2[3][2][16]=0;
    cL2[0][3][16]=0;
    cL2[1][3][16]=0;
    cL2[2][3][16]=0;
    cL2[3][3][16]=0;
    
    
    compute_Aqg2();
    
    compute_Bqg2();
    compute_Bgg1();
    
    if (_Aqg2==0) {_matching=false;}
    else {_matching=true;}
}


double HiggsMtExpansion_qg_nnlo_reg::z_times_reg_L0(const double&z){

    
    int max_rho_power=4;
    
    if (_rho<1e-5) max_rho_power=1;
    double res=0.0;
    

    for (int k=0;k<4;k++){
        for (int m=0;m<max_rho_power;m++){
            for (int zbarpower=0;zbarpower<17;zbarpower++){
                int index = k*17*4 + m*17 + zbarpower;
                res = res +  cL0[index]
                        * pow(_rho,m)
                        * pow(log(1-z),k)
                        * pow(1.-z,zbarpower);

            }
            
        }
    }
    
    return res;
    
    
}


double HiggsMtExpansion_qg_nnlo_reg::z_times_reg_L1(const double&z){
    
    
    
    double max_rho_power=4;
    if (_rho<1e-5) max_rho_power=1;
    double res=0.0;

    
    for (int m=0;m<max_rho_power;m++){
        for (int k=0;k<4;k++){
            for (int zbarpower=0;zbarpower<17;zbarpower++){
                res += cL1[m][k][zbarpower]* pow(_rho,m)  * pow(log(1-z),k) * pow(1.-z,zbarpower);
            }
            
        }
    }
    
    return res;
    
    
}




double HiggsMtExpansion_qg_nnlo_reg::z_times_reg_L2(const double&z){
    
    
    double max_rho_power=4;
    if (_rho<1e-5) max_rho_power=1;
    double res=0.0;
  
    
    for (int m=0;m<max_rho_power;m++){
        for (int k=0;k<4;k++){
            for (int zbarpower=0;zbarpower<17;zbarpower++){
                res += cL2[m][k][zbarpower]* pow(_rho,m)  * pow(log(1-z),k) * pow(1.-z,zbarpower);
            }
            
        }
    }
    
    return res;
    
    
}



double HiggsMtExpansion_qg_nnlo_reg::matched_L0(const double& z){
    
    
    
    const double expanded = z_times_reg_L0(z);
    
    if (_matching){
        return 1./z*(expanded
                     + _Aqg2*(-log(z)+MTEXP::log_expanded(z))
                     + pow(1-z,16)*(_Bqg2-expanded)
                     );
    }
    else
        return 1./z*expanded;
}

void HiggsMtExpansion_qg_nnlo_reg::compute_Aqg2(){
    const double tau=4./_rho;
    //: data from Robert Harlander et al, http://arxiv.org/abs/0912.2104
    double Aqg2Table[23] = {8.7703, 9.5484, 12.2677, 15.1924, 18.0679, 20.8272, 23.4553, 25.9547,
        28.3331, 30.6002, 32.7654, 34.8374, 36.8244, 38.7333, 40.5706,
        42.342, 44.0524, 45.7063, 47.3077, 48.8603, 50.3672, 51.8315, 53.2556};
    
    _Aqg2 =  MTEXP::linear_interpolate(Aqg2Table,tau);
}

double HiggsMtExpansion_qg_nnlo_reg::matched_L1(const double& z){
    
    const double expanded = z_times_reg_L1(z);
    
    if (_matching){
        return 1./z*(expanded
                     + (-2*_Bgg1)*(-log(z)+MTEXP::log_expanded(z))
                     - pow(1.-z,16)*z_times_reg_L1(1e-14)
                     );
    }
    else
        return 1./z*expanded;
}

void  HiggsMtExpansion_qg_nnlo_reg::compute_Bgg1(){
    const double tau=4./_rho;
    //: data from Robert Harlander et al, http://arxiv.org/abs/0912.2104
    double Bgg1Table[23] = {-0.8821, 2.9212, 5.0234, 6.5538, 7.765, 8.7693, 9.6279, 10.3781,
        11.0444, 11.6437, 12.1883, 12.6875, 13.1482, 13.576, 13.9752,
        14.3495, 14.7018, 15.0345, 15.3497, 15.6491, 15.9343, 16.2065, 16.467};
    _Bgg1 = MTEXP::linear_interpolate(Bgg1Table,tau);
    
}

double HiggsMtExpansion_qg_nnlo_reg::matched_L2(const double& z){
    
    
    
    const double expanded = z_times_reg_L2(z);
    
    if (_matching){
        return 1./z*(expanded
                     + 6.*(-log(z)+MTEXP::log_expanded(z))
                     - pow(1.-z,16)*z_times_reg_L2(1e-14)
                     );
    }
    else{
        return 1./z*expanded;
    }
}


