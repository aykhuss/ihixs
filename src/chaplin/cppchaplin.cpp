#include "cppchaplin.h"
#include <stdlib.h>     /* exit, EXIT_FAILURE */
#include <iostream> /* cout */
#include "src/tools/constants.h"


namespace chaplin{

    //: -----------------------------------------------------------
    //: basis function: all HPLs are expressed as functions of these and
    //: logs. They use cli2, cli3, cli4, ch2m2, ch21m1
    //: with various combinations of arguments
    
    //: weight 2
    complex<double> basis2x1(const complex<double>& x) {return cli2(x);}
    complex<double> basis2x2(const complex<double>& x) {return cli2(-x);}
    complex<double> basis2x3(const complex<double>& x) {return cli2((1.-x)/2.);}
    
    //: weight 3
    complex<double> basis3x1(const complex<double>& x) {return cli3(x);}
    complex<double> basis3x2(const complex<double>& x) {return cli3(-x);}
    complex<double> basis3x3(const complex<double>& x) {return cli3(1.-x);}
    complex<double> basis3x4(const complex<double>& x) {return cli3(1./(1.+x));}
    complex<double> basis3x5(const complex<double>& x) {return cli3((1.+x)/2.);}
    complex<double> basis3x6(const complex<double>& x) {return cli3((1.-x)/2.);}
    complex<double> basis3x7(const complex<double>& x) {return cli3((1.-x)/(1.+x));}
    complex<double> basis3x8(const complex<double>& x) {return cli3(2.*x/(x-1.));}
    
    //: weight 4
    complex<double> basis1(const complex<double>& x) {return cli4(x);}
    complex<double> basis2(const complex<double>& x) {return cli4(-x);}
    complex<double> basis3(const complex<double>& x) {return cli4(1.-x);}
    complex<double> basis4(const complex<double>& x) {return cli4(1./(1.+x));}
    complex<double> basis5(const complex<double>& x) {return cli4(x/(x-1.));}
    complex<double> basis6(const complex<double>& x) {return cli4(x/(x+1.));}
    complex<double> basis7(const complex<double>& x) {return cli4( (1.+x)/2. );}
    complex<double> basis8(const complex<double>& x) {return cli4((1.-x)/2.);}
    complex<double> basis9(const complex<double>& x) {return cli4((1.-x)/(1.+x));}
    complex<double> basis10(const complex<double>& x) {return cli4((x-1.)/(x+1.));}
    complex<double> basis11(const complex<double>& x) {return cli4(2.*x/(1.+x));}
    complex<double> basis12(const complex<double>& x) {return cli4(2.*x/(x-1.));}
    complex<double> basis13(const complex<double>& x) {return cli4_sbc(x);}
    complex<double> basis14(const complex<double>& x) {return cli4(x*x/(x*x-1.));}
    complex<double> basis15(const complex<double>& x) {return cli4_sbc_2(x);}
    complex<double> basis16(const complex<double>& x) {return ch2m2(x);}
    complex<double> basis17(const complex<double>& x) {return ch21m1(x);}
    complex<double> basis18(const complex<double>& x) {return ch21m1(-x);}

    //: -----------------------------------------------------------
    //: coefficients necessary for the expansions of basis functions
    
    //: Bernoulli numbers (from Mathematica's BernoulliB[m]/Factorial[m])
    double bernoulli(int i) {
        double res[61]={1.,-0.5,0.08333333333333333,0,-0.001388888888888889,0,0.00003306878306878307,0,-8.267195767195767e-7,0,2.08767569878681e-8,0,-5.284190138687493e-10,0,1.338253653068468e-11,0,-3.389680296322583e-13,0,8.586062056277845e-15,0,-2.174868698558062e-16,0,5.50900282836023e-18,0,-1.395446468581252e-19,0,3.534707039629467e-21,0,-8.953517427037547e-23,0,2.267952452337683e-24,0,-5.744790668872202e-26,0,1.455172475614865e-27,0,-3.68599494066531e-29,0,9.336734257095045e-31,0,-2.36502241570063e-32,0,5.990671762482134e-34,0,-1.51745488446829e-35,0,3.843758125454188e-37,0,-9.736353072646691e-39,0,2.466247044200681e-40,0,-6.247076741820744e-42,0,1.582403024464491e-43,0,-4.008273685948936e-45,0,1.015307585556956e-46,0,-2.571804158241872e-48};
        return res[i];
    }
    
    //    zetaval2 (n) = Zeta[2-n]/Factorial[n] for n !=1
    double zetaval2(int i) {
        if (i==1) {
            cout << "chaplin: Illegal argument in zetaval2 i = " << i << endl;
            exit(EXIT_FAILURE);
        }
        double res[61]={1.644934066848226,0.0,-0.25,-0.01388888888888889,0,
            0.00006944444444444444,0,-7.873519778281683e-7,0,1.148221634332745e-8,0,
            -1.8978869988971e-10,0,3.387301370953521e-12,0,-6.37263644318318e-14,0,
            1.246205991295067e-15,0,-2.510544460899955e-17,0,5.178258806090624e-19,0,
            -1.088735736830085e-20,0,2.325744114302087e-22,0,-5.03519521314739e-24,0,
            1.102649929438122e-25,0,-2.438658550900734e-27,0,5.440142678856252e-29,0,
            -1.222834013121735e-30,0,2.767263468967951e-32,0,-6.300090591832014e-34,0,
            1.442086838841848e-35,0,-3.317093999159543e-37,0,7.663913557920658e-39,0,
            -1.777871473383066e-40,0,4.139605898234137e-42,0,-9.671557036081102e-44,0,
            2.266718701676612e-45,0,-5.327956311328254e-47,0,1.255724838956434e-48,0,
            -2.967000542247094e-50,0};
        return res[i];
    }
    
    //  mathematica code: Zeta[3 - n]/Factorial[n]
    double zetaval3(int i) {
        if (i==2) {
            cout << "chaplin: Illegal argument in zetaval3 i = " << i << endl;
            exit(EXIT_FAILURE);
        }
        double res[61]={1.202056903159594,1.644934066848226,0.0,
            -0.08333333333333333,-0.003472222222222222,0,0.00001157407407407407,0,
            -9.841899722852104e-8,0,1.148221634332745e-9,0,-1.581572499080917e-11,0,
            2.419500979252515e-13,0,-3.982897776989488e-15,0,6.923366618305929e-17,0,
            -1.255272230449977e-18,0,2.353754002768465e-20,0,-4.536398903458687e-22,0,
            8.945169670392643e-24,0,-1.798284004695496e-25,0,3.675499764793738e-27,0,
            -7.620807971564795e-29,0,1.600041964369486e-30,0,-3.396761147560376e-32,0,
            7.282272286757765e-34,0,-1.575022647958003e-35,0,3.433540092480589e-37,0,
            -7.53884999808987e-39,0,1.66606816476536e-40,0,-3.703898902881387e-42,0,
            8.279211796468275e-44,0,-1.859914814630981e-45,0,4.19762722532706e-47,0,
            -9.514207698800454e-49,0,2.165042825786954e-50,0,-4.945000903745157e-52};
        return res[i];
    }
    
    // mathematica code : fbern[n_] := Sum[BernoulliB[n - k]* BernoulliB[k]/Factorial[k + 1]/Factorial[n - k], {k, 0, n}]
    double fbern3(int i){
        double res[61] = {1.,-0.75,0.2361111111111111,-0.03472222222222222,0.0006481481481481481,
            0.0004861111111111111,-0.00002393550012597632,-0.00001062925170068027,
            7.794784580498866e-7,2.52608759553204e-7,-2.359163915200471e-8,-6.168132746415575e-9,
            6.824456748981078e-10,1.524285616929085e-10,-1.916909414174054e-11,
            -3.791718683693992e-12,5.277408409541286e-13,9.471165533842511e-14,
            -1.43231111449036e-14,-2.372464515550457e-15,3.846565792753191e-16,
            5.954997627004217e-17,-1.024749796500817e-17,-1.497011638141367e-18,
            2.712880383718634e-19,3.767705465169381e-20,-7.145911733703927e-21,
            -9.491342976782829e-22,1.87457384274496e-22,2.392750346880724e-23,
            -4.90084542498912e-24,-6.035679913479318e-25,1.27761270906781e-25,
            1.523239950079751e-26,-3.322561855169143e-27,-3.845812971267857e-28,
            8.622657206358129e-29,9.713094776077507e-30,-2.233694426393531e-30,
            -2.453885285518569e-31,5.777231527668267e-32,6.200973407019944e-33,
            -1.492145220906824e-33,-1.567326914602884e-34,3.849163455706614e-35,
            3.96224330944498e-36,-9.918444388268698e-37,-1.001830575251358e-37,2.553242918658e-38,
            2.533438809719292e-39,-6.566810518040945e-40,-6.40740653640373e-41,
            1.687591198065752e-41,1.620703871698778e-42,-4.333734365550847e-43,
            -4.099862381567091e-44,1.112160432685329e-44,1.037228716978014e-45,
            -2.852378663608893e-46,-2.624311979617555e-47,7.311443261888958e-48};
        return res[i];
    }
    
    //  mathematica code: Zeta[4 - n]/Factorial[n]
    double zetaval4(int i) {
        if (i==3) {
            cout << "chaplin: Illegal argument in zetaval3 i = " << i << endl;
            exit(EXIT_FAILURE);
        }
        double res[61]={1.082323233711138,1.202056903159594,0.8224670334241132,
            0.0,-0.02083333333333333,-0.0006944444444444444,0,
            1.653439153439153e-6,0,-1.093544413650234e-8,0,1.043837849393405e-10,0,
            -1.216594230062244e-12,0,1.61300065283501e-14,0,-2.342881045287934e-16,0,
            3.643877167529436e-18,0,-5.977486811666558e-20,0,1.023371305551507e-21,0,
            -1.814559561383475e-23,0,3.313025803849127e-25,0,-6.200979326536194e-27,0,
            1.185645085417335e-28,0,-2.309335748959029e-30,0,4.571548469627103e-32,0,
            -9.180435533946961e-34,0,1.867249304296863e-35,0,-3.841518653556106e-37,0,
            7.984976959257185e-39,0,-1.675299999575527e-40,0,3.54482588247949e-42,0,
            -7.558977352819157e-44,0,1.623374862052603e-45,0,-3.509273235152795e-47,0,
            7.632049500594654e-49,0,-1.669159245403588e-50,0,3.669564111503313e-52,0};
        return res[i];
    }
    
    // mathematica code : fbern[n_] := Sum[BernoulliB[n - k]* BernoulliB[k]/Factorial[k + 1]/Factorial[n - k], {k, 0, n}]
    double fbern4(int i){
        double res[61] = {1.,-0.875,0.349537037037037,-0.07928240740740741,0.00963966049382716,-0.0001863425925925926,-0.0001093680638040048,6.788098837418565e-6,2.061865494287074e-6,-2.183261421852692e-7,
            -4.271107367089217e-8,6.535550523864399e-9,9.049046773887543e-10,-1.87260327610233e-10,-1.917727902789986e-11,5.216900572839828e-12,4.020087098665104e-13,-1.426164321965609e-13,
            -8.256053984896996e-15,3.847254012507184e-15,1.64060700997115e-16,-1.027796845856804e-16,-3.090129195856955e-18,2.725638444323362e-18,5.288189050608147e-20,-7.186926847034095e-20,
            -7.308407684224817e-22,1.8864172552016e-21,3.853306982438309e-24,-4.933131916910348e-23,2.56791782897952e-25,1.286107151842219e-24,-1.50998556868001e-26,-3.344379709216914e-26,
            5.915118844613248e-28,8.677730002701531e-28,-2.007846701098425e-29,-2.247412324372187e-29,6.330523251424075e-31,5.81103817509611e-31,-1.908098741710552e-32,-1.500402230226536e-32,
            5.579753739853343e-34,3.869172594205331e-34,-1.596600909217081e-35,-9.96658496564612e-36,4.494598066447527e-37,2.564746205249869e-37,-1.24932084516697e-38,-6.594112459106036e-39,
            3.437590743407587e-40,1.694026261214745e-40,-9.380808471597297e-42,-4.34879071734123e-42,2.542378503354191e-43,1.115655021429451e-43,-6.850498271628611e-45,-2.860416527479943e-45,
            1.836767217486433e-46,7.329738001420199e-47,-4.903773548311542e-48};
        return res[i];
    }
    
    //     bsh2m2_inside_coeff = Convulute[BernoulliB,Car[Convolute[l,b]]][k]/(k+1)! as produced by Mathematica for k =0..50
    //     for the expansion of bsli221m1_inside (see Claude's Mathematica notebook for details)
    double bsh2m2_inside_coeff(int i){
        double res[61] = {0,0.25,-0.3333333333333333333333333333333333333,0.3246527777777777777777777777777777778,-0.30625,0.3037924382716049382716049382716049383,-0.3187235449735449735449735449735449735,
            0.349427536060720584530108339632149156,-0.396104412058033089779121525153271185,0.4608883908231502477534223565969597716,-0.5476320890308985547080785176023271261,
            0.662009111119538934393832582064103629,-0.8118892583882653853192573731294270015,1.0079564336222981621668740168783838895,-1.2645996490912726332123953902528062055,
            1.6011498028257904542119321497791352452,-2.0435745826411238293039806866005566154,2.6267914678514710834662645502578680227,-3.39782126623453061921088491168210509,
            4.4200891674751389159379534130826619542,-5.7792960545366282147296416461605798653,7.591442082286764941210870340788256263,-10.0138041755173168440486074703167384884,
            13.259972434270600399427278636227959503,-17.620469794516791062300991399960925325,23.4910595712670354522814073573979283706,-31.4116491068060366626338198299099475151,
            42.1198114467775436086922347730939289998,-56.6244915606181669637454180321442650627,76.3076073221112330165077753598997159702,-103.0642326566170164609735638258677059625,
            139.4961877159866727381652070157949649354,-189.1796144758557257191959759747177898299,257.0351219095625231491218673365173503602,-349.8402311441160850934880204622707625875,
            476.9393786563195229817476373279467064225,-651.2283789979552836166619083972950036073,890.520432944171799059693662757197298911,-1219.44288503829704492628403792914586291,
            1672.0727345109416041239229351261261644275,-2295.6010337261506288830052876304157883462,3155.4310810264688627101880441707620265602,-4342.2757794766063690181084419184997708955,
            5982.0439827309674170128993573844914776009,-8249.619738145092382628531958755564442269,11388.0780556475200563122380727796253695022,-15735.4966884066438027456484708954362752109,
            21762.3863195475079583885873852519242234208,-30123.9710970855960282604692030159022466319,41733.2475582066466951606976872915706584215,-57863.1292589818646992625004379771854000044,
            80289.32329366449,-111490.2720614106,154927.0759149843,-215435.5591115531,299775.6357407621,-417401.3987681358,581541.0413407258,-810711.850057715,1.1308463475454168e6,
            -1.578277214325144e6};
        return res[i];
    }

    //     bsh2m2_outside_coeff = Convulute[Car[del],Bar[BernoulliB]][k]/(k+2)! as produced by Mathematica for k =0..50
    //     for the expansion of bsh2m2_outside (see Claude's Mathematica notebook for details)
    double bsh2m2_outside_coeff(int i){
        double res[61] = {-0.34657359027997265468724018278035003959e0
            ,-0.09942893171332877578120669713005833993e0
            ,-0.01870241097611073131510055809417152833e0
            ,-0.00208333333333333333333333333333333333e0
            ,-0.0000489283712703729023437740571499675889260269565e0
            ,0.00002066798941798941798941798941798941798941798941e0
            ,1.2884145995370693326161656949400627839308240490217e-6
            ,-4.592886537330981775426219870664315108759553203997e-7
            ,-3.841355103101167227573412362616934818518123182212e-8
            ,1.5187840708674042007375340708674042007375340708674e-8
            ,1.3118120316900653818632021704955809220831299106123e-9
            ,-6.55744290003549262808522067781327040586299845559e-10
            ,-5.1539458301686469734396605655212348946725440934e-11
            ,3.36552586214024863558751187876912240731842646682e-11
            ,2.3077743717648296479607815279472789099531259751e-12
            ,-1.9314711337353727643176756155280898511524095091e-12
            ,-1.15513935092623822093656707083318507733733184e-13
            ,1.196485287344128071506308917799396598670260918e-13
            ,6.3245372250613078406062697399862401724401848e-15
            ,-7.8398923775775080722526660481862571568365291e-15
            ,-3.716509741676115597607681248818613057099225e-16
            ,5.366482373464184362690209868728159007613545e-16
            ,2.30981644289788787941730304712493565335811e-17
            ,-3.80563584777921127707022030905576525221732e-17
            ,-1.5019169864365238057633778251380945723184e-18
            ,2.779217005973289381963121045947532848022e-18
            ,1.013616876604427059783958923968945174938e-19
            ,-2.080714243170466623018503720296429725011e-19
            ,-7.0577011987439886644765373870035563284e-21
            ,1.59134829672210430115185071099233178351e-20
            ,5.046832822906558403400194919312393048e-22
            ,-1.2398157254237306318207896697863693177e-21
            ,-3.69292819414198754324245418851581713e-23
            ,9.81732678916664963774441840178628279e-23
            ,2.757132928501794394186871428724018582559368058864e-24
            ,-7.88593434892663445855262182065822929462112827603e-24
            ,-2.09530892978319292794475415724407233432261031336e-25
            ,6.415819818433061571040126269943549904812367719067e-25
            ,1.617656421209199638990888867241030108178649331311e-26
            ,-5.27974304909279650804125265776728275000693304122e-26
            ,-1.26664166057107543507584763138568240226796931858e-27
            ,4.389787510383208946659969425947524976493828718066e-27
            ,1.004478513658036808806221219351475682910401269132e-28
            ,-3.68402365984839917328041850801567942311124408227e-28
            ,-8.05795104864683113893564373654148312536013899404e-30
            ,3.11806182115730762940319268428443509041923236979e-29
            ,6.5321288579505704995572158842477318308471281315e-31
            ,-2.65957871796725401706805913133661826034197023975e-30
            ,-5.346122089889279322484472674434465600440162554e-32
            ,2.284697007454141289587948162164613354844912161e-31
            ,4.41401503099778189467559272097237769583880453e-33
            ,-1.975545204274158e-32
            ,-3.673985220125961e-34
            ,1.718584764348089e-33
            ,3.080932930073462e-35
            ,-1.503444991124448e-34
            ,-2.601539822964359e-36
            ,1.322099805214306e-35
            ,2.210902587052212e-37
            ,-1.168278254554942e-36
            ,-1.890205353734545e-38
        };
        return res[i];
    }

    //     bsh21m1_inside_coeff = Convolute[Car[L},BernoulliB][k]/(k+1)! as produced by Mathematica for k =0..50
    //  for the expansion of bsh21m1_inside (see Claude's Mathematica notebook for details)
    double bsh21m1_inside_coeff(int i){
        double res[61] = {0e0
            ,0e0
            ,0.05555555555555555555555555555555555555e0
            ,-0.04166666666666666666666666666666666667e0
            ,0.02111111111111111111111111111111111111e0
            ,-0.01134259259259259259259259259259259259e0
            ,0.00739323507180650037792894935752078609e0
            ,-0.00557622354497354497354497354497354497e0
            ,0.0046271188516558886929257299627669998e0
            ,-0.00411593364197530864197530864197530864e0
            ,0.00386294059826256795953765650735347705e0
            ,-0.00378350754291147809666328184846703365e0
            ,0.00383692432871436737940604444470948338e0
            ,-0.00400544521509982347094969921878463073e0
            ,0.00428509853072908812179829228624055197e0
            ,-0.00468163170895672859131853840848549843e0
            ,0.00520894450884518419736482996645449426e0
            ,-0.00588892214032736337256782266061697999e0
            ,0.00675222085677558979005270347976165983e0
            ,-0.00783985524185440691698570025881023921e0
            ,0.00920559839097260642645948076369668916e0
            ,-0.0109193160805888610150623659673927008e0
            ,0.01307145143184244713642707831306743478e0
            ,-0.01577897791569898089500149194951736475e0
            ,0.01919326000798685425750467950010886339e0
            ,-0.02351041535618228273234241152537828282e0
            ,0.0289849744599237780775774668569192097e0
            ,-0.03594790161587331235625197336866535179e0
            ,0.04483039773763080821524708127824947767e0
            ,-0.05619538290928166440848974708400538306e0
            ,0.07077919615385316369497980154571334018e0
            ,-0.08954690849500889592607257636718821149e0
            ,0.11376579943143369596714529802167748344e0
            ,-0.1451030998955813485736868287081959981e0
            ,0.18575619678426856983449590403023339146e0
            ,-0.23862631525569750772708854743417161154e0
            ,0.30755050306441750138054992981413281864e0
            ,-0.39761188650052154382264838479391395438e0
            ,0.51555512609759617684200377763623527295e0
            ,-0.67034341981460265331158331009443544253e0
            ,0.87390616355980603103871544224890727124e0
            ,-1.14214368489797724295212437888874165919e0
            ,1.4962789532328810275473804352692022646e0
            ,-1.96467807302034533319402088475784359455e0
            ,2.58530473614794932408116808366503279294e0
            ,-3.40903281315012497383638972221323051052e0
            ,4.5041215980597537113658301939101194455e0
            ,-5.96226768284192323289120314071164150324e0
            ,7.9067966940867543775459861615050017829e0
            ,-10.50376179135037068467037092166076121372e0
            ,13.97699393313140871740204966813643099381e0
            ,-18.62852893150884e0
            ,24.86635593168189e0
            ,-33.24214291737328e0
            ,44.50256824694052e0
            ,-59.6592207797288e0
            ,80.0838592330268e0
            ,-107.6383289103828e0
            ,144.8518753970011e0
            ,-195.1633208123604e0
            ,263.2520618632051e0
        };
        return res[i];
    }
    
    //     bsh21m1_outside_1_coeff = Convolute[Car[Convolute[Car[eta],Bar[BernoulliB]]],Bar[BernoulliB]][k]/(k+2)! as produced by Mathematica for k =0..50
    //     for the expansion of bsh21m1_outside_1 (see Claude's Mathematica notebook for details)
    double bsh21m1_outside_1_coeff(int i){
        double res[61] = {0.25e0
            ,0.07291666666666666666666666666666666667e0
            ,0.01417824074074074074074074074074074074e0
            ,0.00171440972222222222222222222222222222e0
            ,0.00007301311728395061728395061728395061728395061728e0
            ,-0.0000125041335978835978835978835978835978835978835e0
            ,-1.450098475236655508764352301767267753662311485440e-6
            ,2.2362128927574116066179558243050306542370034433526e-7
            ,3.6408877787226001511715797430083144368858654572940e-8
            ,-6.755588081542942654053765164876275987387098498209e-9
            ,-1.109970772828323351593571833489043103222414371422e-9
            ,2.920729093179508793986908465022943137421251899366e-10
            ,4.07040664729507986893565053606845255125652751942e-11
            ,-1.54232004675897065473978860416056377061861876871e-11
            ,-1.7586804691217876825258861212325737218833540501e-12
            ,9.08205825364570960972137183362414195488165817e-13
            ,8.66969407829228852133340343965747389582501868e-14
            ,-5.72693997823042031508939689225652685429186075e-14
            ,-4.722657643647692753376839132260669346681035e-15
            ,3.7961006754346316575043025796936606378810691e-15
            ,2.77257823938750085713719228626169406095171e-16
            ,-2.618185561274727099420529912925874442552533e-16
            ,-1.72389951229310029134042145312489110687666e-17
            ,1.86623221122622925298184145645356459070021e-17
            ,1.1217493834274488344169131569830710245067e-18
            ,-1.3678444862720544794089398871076698236317e-18
            ,-7.5756515622019988494441902137486118554e-20
            ,1.026798362516310598835429129742185643616e-19
            ,5.27780444854412377545177391084561763e-21
            ,-7.8689667849455907082448641721941430713e-21
            ,-3.775745032462589788957464895007771073e-22
            ,6.140384723588674603038884693244599927e-22
            ,2.7638095480009859372217068951712052e-23
            ,-4.86830965140488328582095855194144745e-23
            ,-2.06403852393105725162797358912842602551673375243e-24
            ,3.914544875722016734185580275369864471898481889177e-24
            ,1.568945242864306075290133668541159017241982855506e-25
            ,-3.18746217044925224339822041955991933581145950268e-25
            ,-1.21151253199583864898257078920642860579884917706e-26
            ,2.624881660360950866206049570667699593436409964141e-26
            ,9.487757321884177131918607162923106001622006559783e-28
            ,-2.18371877690768050829616893289950202832191081510e-27
            ,-7.52502306611488092771581412176004304821436910272e-29
            ,1.833554008456269328977582847463506471990654538906e-28
            ,6.03726988240999908603463469087821103347341708425e-30
            ,-1.55254146773965411841604406785622060642534787771e-29
            ,-4.8945474465226378082227353296153123751377171356e-31
            ,1.32474791719770610002463760569579814683029165664e-30
            ,4.006201871062892644520914908220239685492560877e-32
            ,-1.1383872450203677137446779268432892918307379484e-31
            ,-3.30795228544275656590407577478078560216736902e-33
            ,9.8462750253901e-33
            ,2.753533737449097e-34
            ,-8.56771228709784e-34
            ,-2.309189265362991e-35
            ,7.496835279005074e-35
            ,1.949976046480221e-36
            ,-6.59387311821575e-36
            ,-1.657248185332491e-37
            ,5.827730590842361e-37
            ,1.4169158195933e-38};
        return res[i];
    }
    
    double bsh21m1_outside_2_coeff(int i, int subsum){
        if (subsum==1) {
            double res[61] = {0e0
                ,0.16666666666666666666666666666666666667e0
                ,0.0625e0
                ,0.00625e0
                ,-0.00173611111111111111111111111111111111e0
                ,-0.0003720238095238095238095238095238095238095238e0
                ,0.00008680555555555555555555555555555555555555555e0
                ,0.00002531828703703703703703703703703703703703703e0
                ,-5.270337301587301587301587301587301587301587301e-6
                ,-1.855421777296777296777296777296777296777296777e-6
                ,3.5594870664315108759553203997648442092886537330e-7
                ,1.4292047169651336318002984669651336318002984669e-7
                ,-2.576042692610152927613245073562533879994197454e-8
                ,-1.141697647774036662925551814440703329592218481e-8
                ,1.9575544284125633331982538331744680951030157379e-9
                ,9.377652132955751799122480728456452079234525546e-10
                ,-1.54265762652430880678970038170508482089904782e-10
                ,-7.87378930516677589800211168446571769694391062e-11
                ,1.250431147566023893097932590272736207653384400e-11
                ,6.729838798725773123942885674738909860118837537e-12
                ,-1.03659679345023624023841276552509311901686017e-12
                ,-5.83732280713435942521425063171880270333065017e-13
                ,8.75243450378780141526629978995324028067404164e-14
                ,5.12613042150025261109974926881767196801198667e-14
                ,-7.5037517385828254416529200193827226939886356e-15
                ,-4.5492301052925288773317081500542044501364159e-15
                ,6.51676292493487646485761946725077479067199e-16
                ,4.074067333402776821589306077188521872096776e-16
                ,-5.72247981994584093064676643420415091783503e-17
                ,-3.67749637059494004367499747413198233056543e-17
                ,5.0733237513549675432802066525322949695602e-18
                ,3.3426753131313663405218780083867215612587e-18
                ,-4.535604419012368389159448673072010907877e-19
                ,-3.057098810704015299977460499947598834653e-19
                ,4.08491385126889485364061486610298956767e-20
                ,2.81131456247794519348890218538578088722e-20
                ,-3.7032111633096124007473933586098507533e-21
                ,-2.5980640881031781230925588756627899703e-21
                ,3.376923645096436745875516644676212773e-22
                ,2.411694256167375948472748428878393445e-22
                ,-3.09567815001352659100066216972712216e-23
                ,-2.24774596499909962351377422893932130063330474e-23
                ,2.851434312137208946967380799976008071071636359e-24
                ,2.102661345997803300418010124529386908178361026e-24
                ,-2.63788030055063558099450739834596558407312199e-25
                ,-1.97357187099294818117806748388968264959552358e-25
                ,2.450003914953797602211357145346712756286076962e-26
                ,1.858142696663828879342589539376359097343693842e-26
                ,-2.28378312864161800706091922568518524064930875e-27
                ,-1.75445675011862810331494999376396148044626397e-27
                ,2.135959474858800782975074228996498601145096651e-28
                ,1.660927324677313e-28
                ,-2.003869835229258e-29
                ,-1.576231413170608e-29
                ,1.885320018869902e-30
                ,1.499258317962172e-30
                ,-1.778488657974245e-31
                ,-1.429069647639787e-31
                ,1.681853375257285e-32
                ,1.364867893550398e-32
                ,-1.594133505201271e-33
            };
            return res[i];
        }
        else if (subsum == 2) {
            double res[61]={0e0
                ,0.16666666666666666666666666666666666667e0
                ,0.05208333333333333333333333333333333333e0
                ,0.003125e0
                ,-0.00147569444444444444444444444444444444e0
                ,-0.0001550099206349206349206349206349206349206349e0
                ,0.00007647156084656084656084656084656084656084656e0
                ,9.5445923353909465020576131687242798353909465020e-6
                ,-4.757943397266313932980599647266313932980599647e-6
                ,-6.515505376182459515792849126182459515792849126e-7
                ,3.2682563064507508951953396397840842285286729731e-7
                ,4.7484208861161986161986161986161986161986161986e-8
                ,-2.394398656592770349384105997862611619225375839e-8
                ,-3.625125620086075332988913235826816073729653976e-9
                ,1.8363724876060713173336000244541438796918766684e-9
                ,2.865944021286524860581798171648926765788325226e-10
                ,-1.45758459564980648288585661065517205504064445e-10
                ,-2.32838468413785793540685805150612082698324169e-11
                ,1.188275213330285863324058748066196688559502719e-11
                ,1.933503822472518429028303905487125760668582984e-12
                ,-9.89703128984630315084770283275148430299430782e-13
                ,-1.63466881634295585423700697631072893672432258e-13
                ,8.38919117457921677154971422554806627693065255e-14
                ,1.4028858625293607647507962957618922789775271e-14
                ,-7.2161079219371504663895580853063849907190713e-15
                ,-1.2193541093450470767871940015654146809184328e-15
                ,6.284684473192181434057846694200533523197916e-16
                ,1.071445713069174104023480777322252788621476e-16
                ,-5.53220031854370089970161533355943161391686e-17
                ,-9.5042159953734323082857929926737727332588e-18
                ,4.9151233333019631790273830042275244812622e-18
                ,8.500762771480414138262263524514820723884e-19
                ,-4.402456940802724998947381524525389375544e-19
                ,-7.65903580367993977392334931344651701416e-20
                ,3.97163472766227844173293394964803271413e-20
                ,6.9456639209031970621928762423928316727e-21
                ,-3.6059045636730985613884153048926249453e-21
                ,-6.335500036892307702169596451622714972e-22
                ,3.292614485266093858157976755436658203e-22
                ,5.80929840384842187451229076089266311e-23
                ,-3.02206141351930248304393910593483084e-23
                ,-5.35212354986506242999028503157253106429488924e-24
                ,2.786700753556020925469228744162599249967573739e-24
                ,4.952238709274166904785963604619273167363155055e-25
                ,-2.58059300109423288908402062151319966482304914e-25
                ,-4.60031532388009138943578959371630772679068281e-26
                ,2.399009383883991454154228990147544359416107737e-26
                ,4.288861757985356960856131542245371812569441915e-27
                ,-2.23814630591791220504907262551205441313633361e-27
                ,-4.01180434825882647985651364487700288621966957e-28
                ,2.094915547694847356164964959498134510377994794e-28
                ,3.764176029800685e-29
                ,-1.966788063967759e-29
                ,-3.541882057292559e-30
                ,1.851676260957409e-30
                ,3.341521729152979e-31
                ,-1.747844273203386e-31
                ,-3.160251303589404e-32
                ,1.653838868422199e-32
                ,2.995677564022023e-33
                ,-1.568435724652945e-33};
            return res[i];
        }
        else if (subsum == 3) {
            double res[61]={0e0
                ,0e0
                ,-0.02083333333333333333333333333333333333e0
                ,-0.01111111111111111111111111111111111111e0
                ,-0.00179398148148148148148148148148148148e0
                ,0.00028687169312169312169312169312169312169312169e0
                ,0.00011584408068783068783068783068783068783068783e0
                ,-0.0000133877174841129867584894039920494946949973e0
                ,-8.385052516376921138825900730662635424540186444e-6
                ,7.4501316905830794719683608572497461386350275239e-7
                ,6.4183911762656802339342021881704421386961069500e-7
                ,-4.576472400053260743496433732123967814203504439e-8
                ,-5.105690052170025156694571935415747688131389086e-8
                ,3.0023758536825273788340116485809710868015291399e-9
                ,4.1809760192550009724127493483358077317909372979e-9
                ,-2.06426319018391799471824074257640276640469310e-10
                ,-3.50259415229121623072591878965810352709889832e-10
                ,1.469344724927931546487304672039662495221191836e-11
                ,2.988669545365678992904570109241692175989438077e-11
                ,-1.07359378224693038306181812112937919710256311e-12
                ,-2.58901433074483585606032473323982865370717711e-12
                ,8.00156545941041806452689457392190326768742839e-14
                ,2.271399178164114895213405848776281902455207003e-13
                ,-6.0532170724446121374381236062677816708410459e-15
                ,-2.01431959644371532643466460029071988794889633e-14
                ,4.629135976782943110690327054864037531250861e-16
                ,1.802957884202160845758528755227202463027618e-15
                ,-3.56576419588677669801412997549831738079855e-17
                ,-1.626819717974281949483392173537926207037832e-16
                ,2.7571863907530375010068417470755989870398e-18
                ,1.47829444861471280152055322506537180984009e-17
                ,-2.132695411009186348116202505594154403757e-19
                ,-1.3517474280571352707296633165059683401818e-18
                ,1.64383329268649490260464288560571476757e-20
                ,1.242930399302229340876537353880584849734e-19
                ,-1.2566221655297006520478692416158441111e-21
                ,-1.14858831088312604531477081363631003668e-20
                ,9.46753759912258376860597894139681869e-23
                ,1.0661909551242729748619110084637011793e-21
                ,-6.96525296707289731799476687925463796725269937e-24
                ,-9.93745968623760522811169894597342198e-23
                ,4.928382792373506955739146759522020395868166174e-25
                ,9.296660828538463431167223952511904037804936080e-24
                ,-3.25862002708089170143506485310677173568140210e-26
                ,-8.72673292743260305949887508731407971170326747e-25
                ,1.881229628269446371782189071340383133581359339e-27
                ,8.217286161228788424228387941832336681437895452e-26
                ,-7.38731544757496084633531565673841578260034660e-29
                ,-7.75979892023397204632046427089567866631152084e-27
                ,-2.13553768361852035110099179942088715089421855e-30
                ,7.347224903745779229377634881087824028494465148e-28
                ,1.010693554339312e-30
                ,-6.973693934846783e-29
                ,-1.680455908837644e-31
                ,6.634281682599491e-30
                ,2.245009148220748e-32
                ,-6.324830655307171e-31
                ,-2.722184704086999e-33
                ,6.041809764469975e-32
                ,3.126425681094268e-34
                ,-5.782203202974365e-33};
            return res[i];
        }
        else {
            cout << "chaplin error: call for bsh21m1_outside_2_coeff(i,subsum) with subsum different from {1,2,3}"
            << "\t subsum = " << subsum << endl;
            exit(EXIT_FAILURE);
        }
        
    }
    
    
    //: -----------------------------------------------------------
    // expansions of basis functions (in default and special regions)
    
    //    expansion of dilogarithm in y = - log(1-z) with Bernoulli numbers
    //    requires  routine fbern in bernoulli.F for the  coefficients
    //    of the series  expansion
    
    complex<double> bsli2_inside(const complex<double>& z) {
    int Nmax = 21;
    complex<double> zb = -log(1.-z);
    complex<double> res(0.0,0.0);
    for (int i = 0; i<Nmax; i++) {
        res = res + pow(zb, double(i+1)) * bernoulli(i) / (double(i+1)) ;
        }
    return res;
    }
    
    //    expansion of the dilogarithm in log(z) with Zeta values
    //    - requires  routine zetaval2 in coefficients.F for the  coefficients
    //    - of the series  expansion
    //    - used for border < |z| < 1
    complex<double> bsli2_outside(const complex<double>& z) {
        //
        //    implicit none
        //    integer i, Nmax
        //    double complex elem, ris, z, zb
        //    double precision fbern
        int Nmax=61;
        complex<double> zb = log(z);
        complex<double> res(0.0,0.0);
        for (int i = 0; i<Nmax; i++) {
            complex<double> coefficient;
            if (i==1) coefficient = 1.0 - log(-zb) ;
            else coefficient = complex<double> (zetaval2(i),0.0);
            res = res + pow(zb, double(i)) * coefficient ;
        }
        return res;
    }

    
    //: cli2
    complex<double> cli2(const complex<double>& z) {
        const double border = 0.3;
        const double zabs = abs(z);
        if (z==complex<double>(1.0,0.0)) return complex<double>(consts::z2,0.0);
        else {
            if (zabs <= 1.0) {
                if (zabs < border) return bsli2_inside(z);
                else return bsli2_outside(z);
            }
            else return -chaplin::cli2(1.0/z)-consts::z2 -0.5 * pow(log(-z),2.);
        }
        
    }
    
    //    expansion of trilogarithm in y = - log(1-z) with Bernoulli numbers
    //    requires  routine fbern3 in coefficients.F for the  coefficients
    //    of the series  expansion
    complex<double> bsli3_inside(const complex<double>& z) {
        int Nmax = 21;
        complex<double> res(0.0,0.0);
        for (int i=0; i < Nmax; i++) {
            res = res + pow(-1.0*log(1.-z), 1.0+i) * fbern3(i)/(i+1.);
        }
       return res;
    }

    //     expansion of the trilogarithm in log(z) with Zeta values
    //    --requires  routine zetaval3 in coefficients.F for the  coefficients
    //        ---of the series  expansion
    //        ---- used for border < |z| < 1
    complex<double> bsli3_outside(const complex<double>& z) {
        int Nmax=61;
        complex<double> res(0.0,0.0);
        const complex<double> zb = log(z);
        for (int i=0; i < Nmax; i++) {
            if (i==2) {
                res = res + pow(zb,double(i))* (1.5-log(-zb))/2.0;
            }
            else {
                res = res + pow(zb,double(i))* zetaval3(i);
            }
        }
        return res;
    }
    
    //: cli3
    complex<double> cli3(const complex<double>& z) {
        const double border = 0.3;
        const double zabs = abs(z);
        //cout << "z = " << z << "abs(z) = " << zabs << endl;
        //if (abs(z-1.0) < 1e-16) return complex<double>(consts::z3,0.0);
        if (z==complex<double>(1.0,0.0)) return complex<double>(consts::z3,0.0);
        else {
            if (zabs <= 1.0) {
                if (zabs < border) return bsli3_inside(z);
                else return bsli3_outside(z);
            }
            else return chaplin::cli3(1.0/z)-consts::z2 * log(-z) -  pow(log(-z),3.)/6.;
        }
        
    }

//     expansion of tetralogarithm in y = - log(1-z) with Bernoulli numbers
//    --requires  routine fbern4 in coefficients.F for the  coefficients
//    ---of the series  expansion
    complex<double> bsli4_inside(const complex<double>& z) {
        int Nmax = 21;
        complex<double> res(0.0,0.0);
        for (int i=0; i < Nmax; i++) {
            res = res + pow(-1.0*log(1.-z), 1.0+i) * fbern4(i)/(i+1.);
        }
        return res;
    }
 
//     expansion of tetralogarithm in y = log(z) with Zeta values
//    --requires  routine zetaval in coefficients.F for the  coefficients
//    ---of the series  expansion
//    ---- used for 0.3 < |z| < 1
    complex<double> bsli4_outside(const complex<double>& z) {
        // expansion of tetralogarithm in y = log(z) with Zeta values
        int Nmax=61;
        complex<double> res(0.0,0.0);
        const complex<double> zb = log(z);
        for (int i=0; i < Nmax; i++) {
            if (i==3) {
                res = res + pow(zb,double(i))* (1.5 + 1./3.-log(-zb))/6.0;
            }
            else {
                res = res + pow(zb,double(i))* zetaval4(i);
            }
        }
        return res;
    }
    
//     expansion of H2m2(z) = -Li22(-1,z) in y=-log(1+z)
//     requires the routine bsh2m2_inside_coeff in li22coeff.F for the coefficients
//     Nmax is the highest order of the taylor expansion
    complex<double> bsh2m2_inside(const complex<double>& z) {
        // expansion of tetralogarithm in y = log(z) with Zeta values
        int Nmax=61;
        complex<double> res(0.0,0.0);
        for (int i=0; i < Nmax; i++) {
            res = res + pow(-log(1.+z),double(i+1.))* bsh2m2_inside_coeff(i);
        }
        return res;
    }

    //     expansion of H2m2(z) = -Li22(-1,z) in y = log(z) (and Re(z) >= 0)
    //     requires the routine bsh2m2_outside_coeff in li22coeff.F for the coefficients
    //     Nmax is the highest order of the taylor expansion
    
    complex<double> bsh2m2_outside(const complex<double>& z) {
        int Nmax=61;
        complex<double> res(0.0,0.0);
        double ll2 = log(2.0);
        const complex<double> pi(consts::Pi,0.0);
        const double zeta3 = consts::z3;
        for (int i=0; i < Nmax; i++) {
            res = res + pow(log(z),double(i+2.))* bsh2m2_outside_coeff(i);
        }
        
        res = res  -0.16666666666666666*pow(ll2,4)
            + 0.16666666666666666*pow(ll2,2)*pow(pi,2)
            + 0.03541666666666667*pow(pi,4)
            - 3.5*ll2*zeta3 + 0.08333333333333333*pow(pi,2)*cli2(z)
            - 4.*cli4(complex<double>(0.5,0.0))
            - 0.625*zeta3*log(z);
        return res;
    }
    //     expansion of H_2,1,-1(z) in y = log(1-z)
    //     requires the routine bsh21m1_inside_coeff in li22coeff.F for the coefficients
    //     Nmax is the highest order of the taylor expansion
    complex<double> bsh21m1_inside(const complex<double>& z) {
        int Nmax=61;
        complex<double> res(0.0,0.0);
        for (int i=0; i < Nmax; i++) {
            res = res + pow(-log(1.-z),double(i+1.))* bsh21m1_inside_coeff(i);
        }

        return res;
    }
    
    
    //     expansion of H_2,1,-1(z) in y = log(z) for Re(z) >= 0
    //     requires the routine bsh21m1_outside_1_coeff in li22coeff.F for the coefficients
    //     Nmax is the highest order of the taylor expansion
    
    complex<double> bsh21m1_outside_1(const complex<double>& z) {
        int Nmax=61;
        complex<double> res(0.0,0.0);
        const complex<double> ll2(log(2.0),0.0);
        const complex<double> pi(consts::Pi,0.0);
        const double zeta3 = consts::z3;
        complex<double> y = log(z);
        //cout << "starting res = "<< res << " with y = " << y << endl;
        for (int i=0; i < Nmax; i++) {
            res = res + pow(y,double(i+2.))* bsh21m1_outside_1_coeff(i);
          //  cout << "i=" << i << " res=" << res << endl;
        }
        res = res + 0.041666666666666664*pow(ll2,4)
            + 0.08333333333333333*pow(ll2,2)*pow(pi,2)
            - 0.0125*pow(pi,4)
            + y*(0.16666666666666666*pow(ll2,3)- 0.08333333333333333*ll2*pow(pi,2) + 0.875*zeta3)
            + 0.875*ll2*zeta3
            - (0.5*pow(ll2,2) - 0.08333333333333333*pow(pi,2))*(0.16666666666666666*pow(pi,2) - cli2(z))
            + cli4(complex<double>(0.5,0.0))
            + ll2*(-cli3(1. - z) + cli2(1. - z)*log(1. - z) + 0.5*y*pow(log(1. - z),2));
        return res;
    }
    
    
    //     bsh21m1_outside_2_coeff(k,1) = Convolute[Car[gam],Bar[g]][k]/(k+2)! as produced by Mathematica for k =0..50
    //     bsh21m1_outside_2_coeff(k,2) = Convolute[Car[Car[gam]],Bar[g]][k]/(k+2)! as produced by Mathematica for k =0..50
    //     bsh21m1_outside_2_coeff(k,3) = Convolute[Car[Convolute[Car[zeta0],Bar[g]]],Bar[g]][k]/(k+2)! as produced by Mathematica for k =0..50
    //     for the expansion of bsh21m1_outside_2 (see Claude's Mathematica notebook for details)
    complex<double> bsh21m1_outside_2(const complex<double>& z) {
        int Nmax=61;
        complex<double> res(0.0,0.0);
        complex<double> y = log(-z);
        complex<double> ll2 (log(2.),0.0);
        const complex<double> pi(consts::Pi,0.0);
        const double zeta3 = consts::z3;
        
        for (int i=0; i < Nmax; i++) {
            complex<double> c1 = bsh21m1_outside_2_coeff(i,1) *(log(-y) - 1.0/(i+1.) - 1.0/(i+2.))/4.0;
            complex<double> c2 = -bsh21m1_outside_2_coeff(i,2)/4.0;
            complex<double> c3 = -bsh21m1_outside_2_coeff(i,3)/4.0;
            
            res = res + pow(y,double(i+2.))* ( c1 + c2 + c3);
            //cout << "i=" << i << " res=" << res << endl;

        }
        res = res -0.08333333333333333*pow(ll2,4)
            - 0.041666666666666664*pow(ll2,2)*pow(pi,2)
            + 0.0125*pow(pi,4)
            - y*(-0.16666666666666666*pow(ll2,3) + 0.125*zeta3)
            - (-0.5*pow(ll2,2)+ 0.08333333333333333*pow(pi,2))
                *(-0.08333333333333333*pow(pi,2) - ll2*y - cli2(z)) - 2.*cli4(complex<double>(0.5,0.0));
        return res;
    }
    
    // : cli4
    complex<double> cli4(const complex<double>& z) {
        const double border = 0.3;
        const double zabs = abs(z);
        //cout << "z = " << z << "abs(z) = " << zabs << endl;
        //if (abs(z-1.0) < 1e-16) return complex<double>(consts::z3,0.0);
        if (z==complex<double>(1.0,0.0)) return complex<double>(consts::z4,0.0);
        else {
            if (zabs <= 1.0) {
                if (zabs < border) // on the mini-disc (remember those?) of |z| <= 0.3, we use the log(1-x) expansion
                    return bsli4_inside(z);
                else //on the annulus 0.3 < |z| <= 1, we use the log(x) expansion
                    return bsli4_outside(z);
            }
            else
                //outside the unit circle, the inversion mapping is needed. NOTE: this is "our" mapping, derived from the integral rep. of Li4 and absorbing all imaginary parts into log(-z).
                return  - 1.0 * chaplin::cli4(1.0/z)
                        - pow(log(-z),4.0) / 24.0
                        - 7.0 * consts::z4 / 4.0
                        - consts::z2 * pow(log(-z),2.0) / 2.0;
        }
        
    }

    //  the case Li4(1-z^2) needs some special treatment because of its branch cut structure
    //  (that's what 'sbc' stands for: special branch cut)
    complex<double> cli4_sbc(const complex<double>& z) {
        double signim = 1.0;
        if (z.imag()< 0.0) signim = -1.0;
        const complex<double> pi(consts::Pi,0.0);
        const complex<double> myi(0.0,1.0);
        
        if (abs(z) <= 1.0) {
            if (z.real() > 0.0) {
                return cli4(1.-z*z);
            }
            else if (z.real()==0.0 and signim == 1.0) {
                return cli4(1.0 - z*z - complex<double>(0.0,1e-60));
            }
            else {
                return cli4(1.0 - z*z- complex<double>(0.0,1e-60))
                     - myi*pi*signim/3.0*pow((log(1.0 - z)+log(1.0+z)),3.0);
            }
        }
        else {
            complex<double> ll1=log(1.0/z);
            complex<double> ll2=log(1.0 - 1.0/z);
            complex<double> ll3=log(1.0 + 1.0/z);
            return  -0.6666666666666666*pow(ll1,4) + 1.3333333333333333*pow(ll1,3)*ll2 - pow(ll1,2)*pow(ll2,2) + 0.3333333333333333*ll1*pow(ll2,3) - 0.041666666666666664*pow(ll2,4) + 1.3333333333333333*pow(ll1,3)*ll3 - 2.*pow(ll1,2)*ll2*ll3 + ll1*pow(ll2,2)*ll3 - 0.16666666666666666*pow(ll2,3)*ll3 - pow(ll1,2)*pow(ll3,2) + ll1*ll2*pow(ll3,2) - 0.25*pow(ll2,2)*pow(ll3,2) + 0.3333333333333333*ll1*pow(ll3,3) - 0.16666666666666666*ll2*pow(ll3,3) - 0.041666666666666664*pow(ll3,4) - 0.3333333333333333*pow(ll1,2)*pow(pi,2) + 0.3333333333333333*ll1*ll2*pow(pi,2) - 0.08333333333333333*pow(ll2,2)*pow(pi,2) + 0.3333333333333333*ll1*ll3*pow(pi,2) - 0.16666666666666666*ll2*ll3*pow(pi,2) - 0.08333333333333333*pow(ll3,2)*pow(pi,2) - 0.019444444444444445*pow(pi,4) - basis14(1./z);
        }
        
    }
    

    //  the case Li4(4z/(1+z)^2) also needs some special treatment because of its branch cut structure
    complex<double> cli4_sbc_2(const complex<double>& z) {
        double signim = 1.0;
        if (z.imag()< 0.0) signim = -1.0;
        complex<double> ll2=log(2.);
        const complex<double> pi(consts::Pi,0.0);
        const complex<double> myi(0.0,1.0);
        
        
        const double zero = 1e-15;
        if ( abs( abs(z)-1.0 ) < zero ) {
            complex<double> zzz = 4.0*z/pow(1.0+z,2.0);
            return cli4(complex<double>(zzz.real(),signim*1e-60));
            }
        else if (abs(z) < 1.0) return cli4(4.0*z/pow(1.0+z,2.0));
        else return myi*pi*signim*(2.6666666666666665*pow(ll2,3) - 8.*pow(ll2,2)*log(1. + 1./z) + 8.*ll2*pow(log(1. + 1./z),2) - 2.6666666666666665*pow(log(1. + 1./z),3) + 4.*pow(ll2,2)*log(1./z) - 8.*ll2*log(1. + 1./z)*log(1./z) + 4.*pow(log(1. + 1./z),2)*log(1./z) + 2.*ll2*pow(log(1./z),2) - 2.*log(1. + 1./z)*pow(log(1./z),2) + 0.3333333333333333*pow(log(1./z),3)) + cli4_sbc_2(1./z);
        
    }
    
    
    //C     mapping of H_2-2(z) into convergent region

    complex<double> ch2m2(const complex<double>& z) {
        double signim = 1.0;
        if (z.imag()< 0.0) signim = -1.0;
        const double border = 0.3;
        const complex<double> myi(0.0,1.0);
        const complex<double> pi(consts::Pi,0.0);
        const double zeta3 = consts::z3;
        //cout << "In ch2m2 abs(z) = " << abs(z) << endl;
        if (abs(z) <= 1.0) {
            if (abs(z) < border) return bsh2m2_inside(z);
            else {
                if (z.real() >= 0.0) return bsh2m2_outside(z);
                else return chaplin::HPL(0,-1,0,1,-z);
                }
        }
        else return 0.051388888888888894*pow(pi,4) - 0.16666666666666666*pow(pi,2)*cli2(1./z) - cli4(-1./z) - chaplin::HPL(0,1,0,0,1./z) - 0.08333333333333333*myi*pow(pi,3)*signim*log(1./z) + 1.5*zeta3*log(1./z) - 0.08333333333333333*pow(pi,2)*pow(log(1./z),2) - 0.041666666666666664*pow(log(1./z),4) + ch2m2(1./z);
    }

    
    //     mapping of H21-1(z) into convergent region 
    complex<double> ch21m1(const complex<double>& z) {
        double signim = 1.0;
        if (z.imag()< 0.0) signim = -1.0;
        const double border = 0.3;
        
        const complex<double> pi(consts::Pi,0.0);
        const complex<double> myi(0.0,1.0);
        const double zeta3 = consts::z3;
        const double ll2 = log(2.0);

        
        if (abs(z) <= 1.0) {
            if (abs(z) < border) //inside circle of |z| = 0.3, we employ the log(1-z) expansion
                return bsh21m1_inside(z);
            else {
                if (z.real() >= 0.0) // on the half annulus 0.3 < |z| < 1 ; Re(z) >= 0, we have a log(x) exp.
                    return bsh21m1_outside_1(z);
                else //for Re(z) < 0, there is a different log(x) expansion
                    return bsh21m1_outside_2(z);
            }
        }
        else // For |z| > 1, we use the inversion formula to map into the unit circle.
            return -0.08333333333333333*pow(ll2,4)
                    + 0.3333333333333333*pow(ll2,2)*pow(pi,2)
                    - 0.006944444444444444*pow(pi,4)
                    - ch2m2(1./z)
                    + 0.25*pow(pi,2)*cli2(1./z)
                    - 2.*cli4(complex<double>(0.5,0.0))
                    + cli4(-1./z)
                    + 0.75*ll2*pow(pi,2)*log(1./z)
                    - 0.875*zeta3*log(1./z)
                    + 0.125*pow(pi,2)*pow(log(1./z),2)
                    + 0.041666666666666664*pow(log(1./z),4)
                    + myi*signim*(0.16666666666666666*ll2*pow(pi,3)
                    - ll2*pi*cli2(1./z)
                    - 0.5*pow(ll2,2)*pi*log(1./z)
                    + 0.08333333333333333*pow(pi,3)*log(1./z)
                    - 0.5*ll2*pi*pow(log(1./z),2))
                    - ch21m1(1./z)
                    - HPL(0,0,1,-1,1.0/z) + HPL(0,0,1,0,1.0/z)
                    + HPL(0,1,0,0,1.0/z)
                    + HPL(0,1,1,0,1.0/z)
                ;
    }
    

    
    //: -----------------------------------------------------------
    //: auxiliary functions
    
    //: the sign of the imaginary part of x
    complex<double> mysign(const complex<double>& x){
        if ( x.imag() <0.0 ) return complex<double>(-1.0,0.0);
        else return complex<double>(1.0,0.0);
    }
    
    //: indices are allowed to be -1,0,1
    void check_index(int n1){
        if (n1>1 or -n1>1){
            cout << " chaplin error in HPL: index " << n1 << " out of range."
                 << " The allowed values are 0, -1, 1 " << endl;
            exit(EXIT_FAILURE);
        }
    }
    
    void check_index(const vector<int>& v){
        for (int i=0;i<v.size();i++) {
            
            if (v[i]>1 or v[i]<-1){
                cout << " chaplin error in HPL1: index " << v[i] << " out of range."
                << " The allowed values are 0, -1, 1 " << endl;
                exit(EXIT_FAILURE);
            }
        }
    }

    int find_index_in_base_3(const vector<int>& vint){
        int res=0;
        int N = vint.size();
        for (int i = 0; i < N; i++) {
            // reverse order here: [1,1,-1] -> (-1+1) + (1+1)*3 + (1+1)*9 = 24
            res = res + (vint[N-i-1]+1) * pow (3.0, double(i));
        }
        return res;
    }
    //: different expansions are employed depending on the region in the complex plane where z (the HPL argument) lies. The regions are defined (independently of the weight of HPLs) in the find_region function.
    int find_region(const complex<double>& x){
        const double rad0 = 0.025;
        const double rad1 = 0.01;
        const double radm1 = 0.025;
        if ( x == complex<double>(0.0,0.0) ) {
            return 0;
        }
        else if (x == complex<double>(1.0,0.0) ) {
            return 1;
        }
        else if (x == complex<double>(-1.0,0.0) ) {
            return 2;
        }
        else if (abs(x-complex<double>(1.0,0.0)) < rad1 ) {
            return 3;
        }
        else if (abs(x+complex<double>(1.0,0.0)) < radm1 ) {
            return 4;
        }
        else if (abs(x) < rad0 ) {
            return 5;
        }
        else return 6;
    }
    
}
    
