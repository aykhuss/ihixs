#include "cppchaplin.h"
#include <stdlib.h>     /* exit, EXIT_FAILURE */
#include <iostream> /* cout */
#include "src/tools/constants.h"


namespace chaplin{


    complex<double> HPL3at0(int n1);
    complex<double> HPL3at1(int n1);
    complex<double> HPL3atm1(int n1);
    complex<double> HPL3ar1(int n1,const complex<double> & xx);
    complex<double> HPL3ar0(int n1,const complex<double> & xx);
    complex<double> HPL3arm1(int n1,const complex<double> & xx);
    complex<double> HPL3else(int n1,const complex<double> & xx);

    bool imaginary_part_should_be_zero_in_hpl3(int index, const complex<double>& x) {
        double xre = x.real();
        int n1 = index / 9 -1;
        int n2 = index - 9 * (n1+1);
        int n3 = index - 9* (n1+1) - 3 * (n2+1) -1;
        
        if (n3 == 0  and xre > 0.0) {
            if (xre < 1.0) return true;
        }
        else if (n3 == 1 and xre < 1.0) {
            if (n1 != -1 and n2 != -1) return true;
            else if (xre < -1.0) return true;
        }
        else if (n3 == -1 and xre > -1.0) {
            if (n1 !=1 and n2 != 1) return true;
            else if (xre < 1.0) return true;
        }
        
        return false;
    }


    
    complex<double> HPL(int n1, int n2, int n3, const complex<double>& x){
        int region = chaplin::find_region(x);
        //vector<int> vint = {n1,n2,n3};
        //chaplin::check_index(vint);
        //int index_in_base_3 = chaplin::find_index_in_base_3(vint);
        int index_in_base_3 = n3+1 + (n2+1)*3 + (n1+1)*9;
        if ( region == 0 ) {
            return chaplin::HPL3at0(index_in_base_3);
        }
        else if ( region == 1 ) {
            return chaplin::HPL3at1(index_in_base_3);
        }
        else if ( region == 2 ) {
            return chaplin::HPL3atm1(index_in_base_3);
        }
        else if ( region == 3 ) {
            return chaplin::HPL3ar1(index_in_base_3,x);
        }
        else if ( region == 4 ) {
            return chaplin::HPL3arm1(index_in_base_3,x);
        }
        else if ( region == 5 ) {
            return chaplin::HPL3ar0(index_in_base_3,x);
        }
        else return chaplin::HPL3else(index_in_base_3,x);
    }


    complex<double> HPL3at0(int index){
        if (index == 13) {
            cout << "chaplin error: call for HPL3(0,0,0,0.0)"
            << " which is divergent! "
            << endl;
            exit(EXIT_FAILURE);
        }
        else return complex<double>(0.0,0.0);
    }
    
    complex<double> HPL3at1(int index){
        complex<double> ll2 ( log(2.0) ,  0.0);
        complex<double> ll2_cube  = ll2 * ll2 *ll2;
        complex<double> pi_sq (consts::pi_square ,0.0 );
        const complex<double> zero(0.0,0.0);
        switch (index) {
            case 0: return ll2_cube/6.0;break;
            case 1: return -(pi_sq*ll2)/12.0 + consts::z3/8.0;break;
            case 2: return -ll2_cube/6.0 + consts::z3/8.0;break;
            case 3: return (pi_sq*ll2)/12.0 - consts::z3/4.0;break;
            case 4: return (3.0*consts::z3)/4.0;break;
            case 5: return (pi_sq*ll2)/6.0 - (5.0*consts::z3)/8.0;break;
            case 6: return (pi_sq*ll2)/12.0 - ll2_cube/6.0-consts::z3/4.0;break;
            case 7: return (pi_sq*ll2)/12.0 - consts::z3;break;
            case 8: return -(pi_sq*ll2)/12.0+ll2_cube/6.0+(7.0*consts::z3)/8.0;break;
            case 9: return consts::z3/8.0;break;
            case 10: return (-3.0*consts::z3)/2.0;break;
            case 11: return -(pi_sq*ll2)/4.0 + (13.0*consts::z3)/8.0;break;
            case 12: return (3.0*consts::z3)/4.0;break;
            case 13: return 0.0;break;
            case 14: return consts::z3;break;
            case 15: return (pi_sq*ll2)/4.0 - consts::z3;break;
            case 16: return -2.0*consts::z3;break;
            case 17: return consts::z3;break;
            case 22: return consts::z3;break;
            
            default: {cout << "chaplin error: HPL3[" << index << ";1.0]"
                << " is singular! " << endl;
                exit(EXIT_FAILURE);
            }
        }
    }
    
    complex<double> HPL3atm1(int index){
        complex<double> ll2 ( log(2.0) ,  0.0);
        complex<double> ll2_sq  = ll2 * ll2;
        complex<double> ll2_cube  = ll2 * ll2 *ll2;
        complex<double> pi_sq (consts::pi_square ,0.0 );
        complex<double> pi_cube = pow(consts::Pi ,3.0 );
        const complex<double> zero(0.0,0.0);
        const complex<double> myi(0.0,1.0);
        
        if (index<9) return zero;
        
        switch (index) {
            case 9:return  consts::z3;break;
            case 10:return  2*consts::z3 - myi*consts::Pi*consts::z2;break;
            case 11:return  pi_sq*ll2/4.0 - consts::z3;break;
            case 12:return  -consts::z3;break;
            case 13:return  -myi*consts::Pi*consts::z2;break;
            case 14:return  3*consts::z3/4.0;break;
            case 15:return  -pi_sq*ll2/4.0 + 13.0*consts::z3/8.0;break;
            case 16:return  3*consts::z3/2.0 - myi*pi_cube/12.0;break;
            case 17:return  consts::z3/8.0;break;
            case 18:return  0.5*consts::z2*ll2 - ll2_cube/6.0- 7.0*consts::z3/8.0;break;
            case 19:return  0.5*consts::z2*ll2 + myi*consts::Pi*(0.5*consts::z2- 0.5*ll2_sq) - consts::z3;break;
            case 20:return  -0.5*consts::z2*ll2 + ll2_cube/6.0+ consts::z3/4.0;break;
            case 21:return  consts::z2*ll2 - 5.0*consts::z3/8.0;break;
            case 22:return  0.5*myi*consts::Pi*consts::z2 + pi_sq*ll2/2.0- 3*consts::z3/4.0;break;
            case 23:return  0.5*consts::z2*ll2 - consts::z3/4.0;break;
            case 24:return  ll2_cube/6.0 - consts::z3/8.0;break;
            case 25:return  -0.5*consts::z2*ll2 + consts::z3/8.0 + 0.5*myi*consts::Pi*ll2_sq;break;
            case 26:return  -1.0/6.0*ll2_cube;break;
            default: {cout << "chaplin error: HPL3[" << index << "; -1.0]"
                << " is singular! " << endl;
                exit(EXIT_FAILURE);}
        }
    }
    
    complex<double> HPL3ar1(int index,const complex<double>& xx){
        complex<double> ll2 ( log(2.0) ,  0.0);
        complex<double> pi_sq (consts::pi_square ,0.0 );
        const double pi = consts::Pi;
        const double zeta3=consts::z3;
        complex<double> res(0.0,0.0);
        complex<double> x=xx;
        
        // adding i*epsilon
        bool imaginary_part_was_modified = false;
        if ( x.imag() == 0.0 ) {
            x = x + complex<double> (0.0, 1e-60);
            imaginary_part_was_modified = true;
        }

        const complex<double> zp = 1.0 - x;
        const complex<double> llzp = log(zp);
        
        switch(index) {
            case 0:  res = 0.16666666666666666*pow(ll2,3.0) - 0.25*pow(ll2,2.0)*zp + (0.125*ll2 - 0.0625*pow(ll2,2.0))*pow(zp,2.0) + (-0.020833333333333332 + 0.0625*ll2 - 0.020833333333333332*pow(ll2,2.0))*pow(zp,3.0) + (-0.015625 + 0.028645833333333332*ll2 - 0.0078125*pow(ll2,2.0))*pow(zp,4.0) + (-0.009114583333333332 + 0.013020833333333332*ll2 - 0.003125*pow(ll2,2.0))*pow(zp,5.0) + (-0.0048828125 + 0.005946180555555556*ll2 - 0.0013020833333333333*pow(ll2,2.0))*pow(zp,6.0);
                break;
            case 1:  res = -0.08333333333333333*ll2*pow(pi,2.0) + 0.125*zeta3 + 0.041666666666666664*pow(pi,2.0)*zp + 0.010416666666666666*pow(pi,2.0)*pow(zp,2.0) + (-0.041666666666666664 + 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (-0.03645833333333333 + 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (-0.025 + 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.015972222222222224 + 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 2:  res = -0.16666666666666666*pow(ll2,3.0) + 0.125*zeta3 + (0.25*pow(ll2,2.0) - 0.041666666666666664*pow(pi,2.0))*zp + (0.1875 + 0.0625*pow(ll2,2.0) - 0.125*llzp - 0.010416666666666666*pow(pi,2.0))*pow(zp,2.0) + (0.07291666666666666 + 0.020833333333333332*pow(ll2,2.0) - 0.0625*llzp - 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (0.028428819444444444 + 0.0078125*pow(ll2,2.0) - 0.028645833333333332*llzp - 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (0.01150173611111111 + 0.003125*pow(ll2,2.0) - 0.013020833333333332*llzp - 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (0.004802517361111111 + 0.0013020833333333333*pow(ll2,2.0) - 0.005946180555555556*llzp - 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 3:  res = 0.08333333333333333*ll2*pow(pi,2.0) - 0.25*zeta3 - 0.041666666666666664*pow(pi,2.0)*zp + (0.25*ll2 - 0.010416666666666666*pow(pi,2.0))*pow(zp,2.0) + (-0.041666666666666664 + 0.16666666666666666*ll2 - 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (-0.041666666666666664 + 0.10416666666666666*ll2 - 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (-0.03333333333333333 + 0.06666666666666667*ll2 - 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.025260416666666667 + 0.044444444444444446*ll2 - 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 4:  res = 0.75*zeta3 - 0.08333333333333333*pow(zp,3.0) - 0.09375*pow(zp,4.0) - 0.08333333333333333*pow(zp,5.0) - 0.06944444444444445*pow(zp,6.0);
                break;
            case 5:  res = 0.16666666666666666*ll2*pow(pi,2.0) - 0.625*zeta3 - 0.08333333333333333*pow(pi,2.0)*zp + (0.375 - 0.25*llzp - 0.020833333333333332*pow(pi,2.0))*pow(zp,2.0) + (0.18055555555555555 - 0.16666666666666666*llzp - 0.006944444444444444*pow(pi,2.0))*pow(zp,3.0) + (0.08680555555555555 - 0.10416666666666666*llzp - 0.0026041666666666665*pow(pi,2.0))*pow(zp,4.0) + (0.04388888888888889 - 0.06666666666666667*llzp - 0.0010416666666666667*pow(pi,2.0))*pow(zp,5.0) + (0.02347222222222222 - 0.044444444444444446*llzp - 0.00043402777777777775*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 6:  res = -0.16666666666666666*pow(ll2,3.0) + 0.08333333333333333*ll2*pow(pi,2.0) - 0.25*zeta3 + (-0.5*ll2 - 0.25*pow(ll2,2.0) + 0.5*ll2*llzp + 0.041666666666666664*pow(pi,2.0))*zp + (-0.125 - 0.0625*ll2 - 0.0625*pow(ll2,2.0) + 0.125*ll2*llzp + 0.010416666666666666*pow(pi,2.0))*pow(zp,2.0) + (-0.05208333333333333 - 0.013888888888888888*ll2 - 0.020833333333333332*pow(ll2,2.0) + 0.041666666666666664*ll2*llzp + 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (-0.02126736111111111 - 0.00390625*ll2 - 0.0078125*pow(ll2,2.0) + 0.015625*ll2*llzp + 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (-0.008897569444444444 - 0.00125*ll2 - 0.003125*pow(ll2,2.0) + 0.00625*ll2*llzp + 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.0038114872685185183 - 0.00043402777777777775*ll2 - 0.0013020833333333333*pow(ll2,2.0) + 0.0026041666666666665*ll2*llzp + 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 7:  res = 0.08333333333333333*ll2*pow(pi,2.0) - 1.*zeta3 + 0.08333333333333333*pow(pi,2.0)*zp + (-0.25 + 0.020833333333333332*pow(pi,2.0))*pow(zp,2.0) + (-0.125 + 0.006944444444444444*pow(pi,2.0))*pow(zp,3.0) + (-0.06076388888888889 + 0.0026041666666666665*pow(pi,2.0))*pow(zp,4.0) + (-0.030555555555555558 + 0.0010416666666666667*pow(pi,2.0))*pow(zp,5.0) + (-0.016064814814814813 + 0.00043402777777777775*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 8:  res = 0.16666666666666666*pow(ll2,3.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.875*zeta3 + (-0.5 + 0.5*llzp - 0.25*pow(llzp,2.0))*zp + (-0.03125 + 0.0625*llzp - 0.0625*pow(llzp,2.0))*pow(zp,2.0) + (-0.004629629629629629 + 0.013888888888888888*llzp - 0.020833333333333332*pow(llzp,2.0))*pow(zp,3.0) + (-0.0009765625 + 0.00390625*llzp - 0.0078125*pow(llzp,2.0))*pow(zp,4.0) + (-0.00025 + 0.00125*llzp - 0.003125*pow(llzp,2.0))*pow(zp,5.0) + (-0.00007233796296296296 + 0.00043402777777777775*llzp - 0.0013020833333333333*pow(llzp,2.0))*pow(zp,6.0);
                break;
            case 9:  res = 0.125*zeta3 - 0.5*pow(ll2,2.0)*zp + (0.25*ll2 - 0.25*pow(ll2,2.0))*pow(zp,2.0) + (-0.041666666666666664 + 0.20833333333333331*ll2 - 0.16666666666666666*pow(ll2,2.0))*pow(zp,3.0) + (-0.046875 + 0.16666666666666666*ll2 - 0.125*pow(ll2,2.0))*pow(zp,4.0) + (-0.043229166666666666 + 0.13645833333333332*ll2 - 0.1*pow(ll2,2.0))*pow(zp,5.0) + (-0.03819444444444444 + 0.11475694444444445*ll2 - 0.08333333333333333*pow(ll2,2.0))*pow(zp,6.0);
                break;
            case 10:  res = -1.5*zeta3 + 0.08333333333333333*pow(pi,2.0)*zp + 0.041666666666666664*pow(pi,2.0)*pow(zp,2.0) + (-0.08333333333333333 + 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (-0.10416666666666666 + 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (-0.10416666666666666 + 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (-0.09791666666666667 + 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 11:  res = -0.25*ll2*pow(pi,2.0) + 1.625*zeta3 + (0.5*pow(ll2,2.0) - 0.08333333333333333*pow(pi,2.0))*zp + (0.375 + 0.25*pow(ll2,2.0) - 0.25*llzp - 0.041666666666666664*pow(pi,2.0))*pow(zp,2.0) + (0.2569444444444444 + 0.16666666666666666*pow(ll2,2.0) - 0.20833333333333331*llzp - 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (0.18576388888888887 + 0.125*pow(ll2,2.0) - 0.16666666666666666*llzp - 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (0.14335069444444445 + 0.1*pow(ll2,2.0) - 0.13645833333333332*llzp - 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (0.11605034722222222 + 0.08333333333333333*pow(ll2,2.0) - 0.11475694444444445*llzp - 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 12:  res = 0.75*zeta3 - 0.08333333333333333*pow(pi,2.0)*zp + (0.5*ll2 - 0.041666666666666664*pow(pi,2.0))*pow(zp,2.0) + (-0.08333333333333333 + 0.5*ll2 - 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (-0.11458333333333333 + 0.4583333333333333*ll2 - 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (-0.125 + 0.41666666666666663*ll2 - 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (-0.12690972222222222 + 0.3805555555555556*ll2 - 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 13:  res = -0.16666666666666666*pow(zp,3.0) - 0.25*pow(zp,4.0) - 0.29166666666666663*pow(zp,5.0) - 0.3125*pow(zp,6.0);
                break;
            case 14:  res = zeta3 - 0.16666666666666666*pow(pi,2.0)*zp + (0.75 - 0.5*llzp - 0.08333333333333333*pow(pi,2.0))*pow(zp,2.0) + (0.5833333333333333 - 0.5*llzp - 0.05555555555555555*pow(pi,2.0))*pow(zp,3.0) + (0.4548611111111111 - 0.4583333333333333*llzp - 0.041666666666666664*pow(pi,2.0))*pow(zp,4.0) + (0.3680555555555555 - 0.41666666666666663*llzp - 0.03333333333333333*pow(pi,2.0))*pow(zp,5.0) + (0.3073611111111111 - 0.3805555555555556*llzp - 0.027777777777777776*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 15:  res = 0.25*ll2*pow(pi,2.0) - 1.*zeta3 + (-1.*ll2 - 0.5*pow(ll2,2.0) + ll2*llzp + 0.08333333333333333*pow(pi,2.0))*zp + (-0.25 - 0.25*ll2 - 0.25*pow(ll2,2.0) + 0.5*ll2*llzp + 0.041666666666666664*pow(pi,2.0))*pow(zp,2.0) + (-0.1875 - 0.1111111111111111*ll2 - 0.16666666666666666*pow(ll2,2.0) + 0.3333333333333333*ll2*llzp + 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (-0.1440972222222222 - 0.0625*ll2 - 0.125*pow(ll2,2.0) + 0.25*ll2*llzp + 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (-0.11605902777777778 - 0.04*ll2 - 0.1*pow(ll2,2.0) + 0.2*ll2*llzp + 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (-0.0969241898148148 - 0.027777777777777776*ll2 - 0.08333333333333333*pow(ll2,2.0) + 0.16666666666666666*ll2*llzp + 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 16:  res = -2.*zeta3 + 0.16666666666666666*pow(pi,2.0)*zp + (-0.5 + 0.08333333333333333*pow(pi,2.0))*pow(zp,2.0) + (-0.41666666666666663 + 0.05555555555555555*pow(pi,2.0))*pow(zp,3.0) + (-0.34027777777777773 + 0.041666666666666664*pow(pi,2.0))*pow(zp,4.0) + (-0.2847222222222222 + 0.03333333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.24393518518518517 + 0.027777777777777776*pow(pi,2.0))*pow(zp,6.0);
                break;
            case 17:  res = zeta3 + (-1. + llzp - 0.5*pow(llzp,2.0))*zp + (-0.125 + 0.25*llzp - 0.25*pow(llzp,2.0))*pow(zp,2.0) + (-0.037037037037037035 + 0.1111111111111111*llzp - 0.16666666666666666*pow(llzp,2.0))*pow(zp,3.0) + (-0.015625 + 0.0625*llzp - 0.125*pow(llzp,2.0))*pow(zp,4.0) + (-0.008 + 0.04*llzp - 0.1*pow(llzp,2.0))*pow(zp,5.0) + (-0.004629629629629629 + 0.027777777777777776*llzp - 0.08333333333333333*pow(llzp,2.0))*pow(zp,6.0);
                break;
            case 18:  res = 0.3333333333333333*pow(ll2,3.0) - 0.5*pow(ll2,2.0)*llzp - 0.08333333333333333*ll2*pow(pi,2.0) + 0.125*zeta3 + 0.5*ll2*zp + (-0.0625 + 0.0625*ll2)*pow(zp,2.0) + (-0.020833333333333332 + 0.013888888888888888*ll2)*pow(zp,3.0) + (-0.007161458333333333 + 0.00390625*ll2)*pow(zp,4.0) + (-0.0026041666666666665 + 0.00125*ll2)*pow(zp,5.0) + (-0.0009910300925925926 + 0.00043402777777777775*ll2)*pow(zp,6.0);
                break;
            case 19:  res = -0.25*ll2*pow(pi,2.0) + 0.08333333333333333*llzp*pow(pi,2.0) + 1.625*zeta3 - 0.125*pow(zp,2.0) - 0.05555555555555555*pow(zp,3.0) - 0.026041666666666664*pow(zp,4.0) - 0.013333333333333334*pow(zp,5.0) - 0.007407407407407408*pow(zp,6.0);
                break;
            case 20:  res = -0.3333333333333333*pow(ll2,3.0) + 0.5*pow(ll2,2.0)*llzp + 0.16666666666666666*ll2*pow(pi,2.0) - 0.08333333333333333*llzp*pow(pi,2.0) - 1.75*zeta3 + (1. - 0.5*llzp)*zp + (0.0625 - 0.0625*llzp)*pow(zp,2.0) + (0.009259259259259259 - 0.013888888888888888*llzp)*pow(zp,3.0) + (0.001953125 - 0.00390625*llzp)*pow(zp,4.0) + (0.0005 - 0.00125*llzp)*pow(zp,5.0) + (0.00014467592592592592 - 0.00043402777777777775*llzp)*pow(zp,6.0);
                break;
            case 21:  res = -0.08333333333333333*llzp*pow(pi,2.0) - 0.625*zeta3 + ll2*zp + (-0.125 + 0.25*ll2)*pow(zp,2.0) + (-0.06944444444444445 + 0.1111111111111111*ll2)*pow(zp,3.0) + (-0.041666666666666664 + 0.0625*ll2)*pow(zp,4.0) + (-0.02729166666666667 + 0.04*ll2)*pow(zp,5.0) + (-0.019126157407407408 + 0.027777777777777776*ll2)*pow(zp,6.0);
                break;
            case 22:  res = zeta3 - 0.25*pow(zp,2.0) - 0.16666666666666666*pow(zp,3.0) - 0.11458333333333333*pow(zp,4.0) - 0.08333333333333333*pow(zp,5.0) - 0.06342592592592593*pow(zp,6.0);
                break;
            case 23:  res = -0.16666666666666666*llzp*pow(pi,2.0) - 2.*zeta3 + (2. - 1.*llzp)*zp + (0.25 - 0.25*llzp)*pow(zp,2.0) + (0.07407407407407407 - 0.1111111111111111*llzp)*pow(zp,3.0) + (0.03125 - 0.0625*llzp)*pow(zp,4.0) + (0.016 - 0.04*llzp)*pow(zp,5.0) + (0.009259259259259259 - 0.027777777777777776*llzp)*pow(zp,6.0);
                break;
            case 24:  res = 0.16666666666666666*pow(ll2,3.0) - 0.5*pow(ll2,2.0)*llzp + 0.5*ll2*pow(llzp,2.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.08333333333333333*llzp*pow(pi,2.0) + 0.875*zeta3 - 0.5*zp - 0.03125*pow(zp,2.0) - 0.004629629629629629*pow(zp,3.0) - 0.0009765625*pow(zp,4.0) - 0.00025*pow(zp,5.0) - 0.00007233796296296296*pow(zp,6.0);
                break;
            case 25:  res = 0.16666666666666666*llzp*pow(pi,2.0) + zeta3 - 1.*zp - 0.125*pow(zp,2.0) - 0.037037037037037035*pow(zp,3.0) - 0.015625*pow(zp,4.0) - 0.008*pow(zp,5.0) - 0.004629629629629629*pow(zp,6.0);
                break;
            case 26:  res = -0.16666666666666666*pow(llzp,3.0);
                break;
            default: {cout << "chaplin error: index in HPL3 out of bounds"
                << " : should be 0-26 and it is " << index << endl;
                exit(EXIT_FAILURE);}

        }

        if (imaginary_part_was_modified and imaginary_part_should_be_zero_in_hpl3(index,x)) {
            res = complex<double> (res.real() , 0.0);
        }
        return res;

    }
    
    
    complex<double> HPL3ar0(int index,const complex<double>& xx){
        complex<double> ll2 ( log(2.0) ,  0.0);
        complex<double> pi_sq (consts::pi_square ,0.0 );
        complex<double> res(0.0,0.0);
        complex<double> x=xx;
        
        // adding i*epsilon
        bool imaginary_part_was_modified = false;
        if ( x.imag() == 0.0 ) {
            x = x + complex<double> (0.0, 1e-60);
            imaginary_part_was_modified = true;
        }
        const complex<double> llx = log(x);
        switch(index) {
            case 0:  res = 0.16666666666666666*pow(x,3.0) - 0.25*pow(x,4.0) + 0.29166666666666663*pow(x,5.0) - 0.3125*pow(x,6.0) + 0.32222222222222224*pow(x,7.0) - 0.32569444444444445*pow(x,8.0) + 0.32551807760141094*pow(x,9.0) - 0.3231646825396825*pow(x,10.0);
                break;
            case 1:  res = -0.75*pow(x,2.0) + 0.5*llx*pow(x,2.0) + 0.5833333333333333*pow(x,3.0) - 0.5*llx*pow(x,3.0) - 0.4548611111111111*pow(x,4.0) + 0.4583333333333333*llx*pow(x,4.0) + 0.3680555555555555*pow(x,5.0) - 0.41666666666666663*llx*pow(x,5.0) - 0.3073611111111111*pow(x,6.0) + 0.3805555555555556*llx*pow(x,6.0) + 0.26305555555555554*pow(x,7.0) - 0.35000000000000003*llx*pow(x,7.0) - 0.22948802437641724*pow(x,8.0) + 0.32410714285714287*llx*pow(x,8.0) + 0.20326735323759135*pow(x,9.0) - 0.30198412698412697*llx*pow(x,9.0) - 0.18226645565633662*pow(x,10.0) + 0.2828968253968254*llx*pow(x,10.0);
                break;
            case 2:  res = 0.16666666666666666*pow(x,3.0) - 0.16666666666666666*pow(x,4.0) + 0.17500000000000002*pow(x,5.0) - 0.16527777777777777*pow(x,6.0) + 0.16031746031746033*pow(x,7.0) - 0.15128968253968253*pow(x,8.0) + 0.14502865961199296*pow(x,9.0) - 0.1375760582010582*pow(x,10.0);
                break;
            case 3:  res = 0.5*pow(x,2.0) - 0.41666666666666663*pow(x,3.0) + 0.34027777777777773*pow(x,4.0) - 0.2847222222222222*pow(x,5.0) + 0.24393518518518517*pow(x,6.0) - 0.21305555555555555*pow(x,7.0) + 0.18897463151927438*pow(x,8.0) - 0.1697135613504661*pow(x,9.0) + 0.1539767731166541*pow(x,10.0);
                break;
            case 4:  res = x - 1.*llx*x + 0.5*pow(llx,2.0)*x - 0.125*pow(x,2.0) + 0.25*llx*pow(x,2.0) - 0.25*pow(llx,2.0)*pow(x,2.0) + 0.037037037037037035*pow(x,3.0) - 0.1111111111111111*llx*pow(x,3.0) + 0.16666666666666666*pow(llx,2.0)*pow(x,3.0) - 0.015625*pow(x,4.0) + 0.0625*llx*pow(x,4.0) - 0.125*pow(llx,2.0)*pow(x,4.0) + 0.008*pow(x,5.0) - 0.04*llx*pow(x,5.0) + 0.1*pow(llx,2.0)*pow(x,5.0) - 0.004629629629629629*pow(x,6.0) + 0.027777777777777776*llx*pow(x,6.0) - 0.08333333333333333*pow(llx,2.0)*pow(x,6.0) + 0.0029154518950437317*pow(x,7.0) - 0.02040816326530612*llx*pow(x,7.0) + 0.07142857142857142*pow(llx,2.0)*pow(x,7.0) - 0.001953125*pow(x,8.0) + 0.015625*llx*pow(x,8.0) - 0.0625*pow(llx,2.0)*pow(x,8.0) + 0.0013717421124828531*pow(x,9.0) - 0.012345679012345678*llx*pow(x,9.0) + 0.05555555555555555*pow(llx,2.0)*pow(x,9.0) - 0.001*pow(x,10.0) + 0.01*llx*pow(x,10.0) - 0.05*pow(llx,2.0)*pow(x,10.0);
                break;
            case 5:  res = 0.5*pow(x,2.0) - 0.25*pow(x,3.0) + 0.21527777777777776*pow(x,4.0) - 0.1597222222222222*pow(x,5.0) + 0.13976851851851851*pow(x,6.0) - 0.11583333333333334*pow(x,7.0) + 0.10390518707482993*pow(x,8.0) - 0.0906240551776266*pow(x,9.0) + 0.08279621756109852*pow(x,10.0);
                break;
            case 6:  res = 0.16666666666666666*pow(x,3.0) - 0.08333333333333333*pow(x,4.0) + 0.10833333333333334*pow(x,5.0) - 0.07083333333333333*pow(x,6.0) + 0.07936507936507936*pow(x,7.0) - 0.05843253968253968*pow(x,8.0) + 0.06248897707231041*pow(x,9.0) - 0.04918981481481481*pow(x,10.0);
                break;
            case 7:  res = -0.75*pow(x,2.0) + 0.5*llx*pow(x,2.0) + 0.3055555555555555*pow(x,3.0) - 0.16666666666666666*llx*pow(x,3.0) - 0.2673611111111111*pow(x,4.0) + 0.20833333333333331*llx*pow(x,4.0) + 0.18305555555555555*pow(x,5.0) - 0.11666666666666667*llx*pow(x,5.0) - 0.16152777777777777*pow(x,6.0) + 0.13055555555555556*llx*pow(x,6.0) + 0.1284183673469388*pow(x,7.0) - 0.0880952380952381*llx*pow(x,7.0) - 0.11577274659863945*pow(x,8.0) + 0.0949404761904762*llx*pow(x,8.0) + 0.09845768245569833*pow(x,9.0) - 0.07050264550264551*llx*pow(x,9.0) - 0.09025256676744772*pow(x,10.0) + 0.07456349206349207*llx*pow(x,10.0);
                break;
            case 8:  res = 0.16666666666666666*pow(x,3.0) + 0.09166666666666666*pow(x,5.0) - 0.006944444444444444*pow(x,6.0) + 0.06031746031746032*pow(x,7.0) - 0.009027777777777779*pow(x,8.0) + 0.04403659611992945*pow(x,9.0) - 0.00943452380952381*pow(x,10.0);
                break;
            case 9:  res = 0.25*pow(x,2.0) - 0.16666666666666666*pow(x,3.0) + 0.11458333333333333*pow(x,4.0) - 0.08333333333333333*pow(x,5.0) + 0.06342592592592593*pow(x,6.0) - 0.05*pow(x,7.0) + 0.04051339285714286*pow(x,8.0) - 0.03355379188712522*pow(x,9.0) + 0.028289682539682538*pow(x,10.0);
                break;
            case 10:  res = -2.*x + llx*x + 0.25*pow(x,2.0) - 0.25*llx*pow(x,2.0) - 0.07407407407407407*pow(x,3.0) + 0.1111111111111111*llx*pow(x,3.0) + 0.03125*pow(x,4.0) - 0.0625*llx*pow(x,4.0) - 0.016*pow(x,5.0) + 0.04*llx*pow(x,5.0) + 0.009259259259259259*pow(x,6.0) - 0.027777777777777776*llx*pow(x,6.0) - 0.0058309037900874635*pow(x,7.0) + 0.02040816326530612*llx*pow(x,7.0) + 0.00390625*pow(x,8.0) - 0.015625*llx*pow(x,8.0) - 0.0027434842249657062*pow(x,9.0) + 0.012345679012345678*llx*pow(x,9.0) + 0.002*pow(x,10.0) - 0.01*llx*pow(x,10.0);
                break;
            case 11:  res = 0.25*pow(x,2.0) - 0.05555555555555555*pow(x,3.0) + 0.05208333333333333*pow(x,4.0) - 0.023333333333333334*pow(x,5.0) + 0.02175925925925926*pow(x,6.0) - 0.012585034013605442*pow(x,7.0) + 0.011867559523809525*pow(x,8.0) - 0.007833627278071723*pow(x,9.0) + 0.007456349206349206*pow(x,10.0);
                break;
            case 12:  res = x - 0.125*pow(x,2.0) + 0.037037037037037035*pow(x,3.0) - 0.015625*pow(x,4.0) + 0.008*pow(x,5.0) - 0.004629629629629629*pow(x,6.0) + 0.0029154518950437317*pow(x,7.0) - 0.001953125*pow(x,8.0) + 0.0013717421124828531*pow(x,9.0) - 0.001*pow(x,10.0);
                break;
            case 13:  res = 0.16666666666666666*pow(llx,3.0);
                break;
            case 14:  res = x + 0.125*pow(x,2.0) + 0.037037037037037035*pow(x,3.0) + 0.015625*pow(x,4.0) + 0.008*pow(x,5.0) + 0.004629629629629629*pow(x,6.0) + 0.0029154518950437317*pow(x,7.0) + 0.001953125*pow(x,8.0) + 0.0013717421124828531*pow(x,9.0) + 0.001*pow(x,10.0);
                break;
            case 15:  res = 0.25*pow(x,2.0) + 0.05555555555555555*pow(x,3.0) + 0.05208333333333333*pow(x,4.0) + 0.023333333333333334*pow(x,5.0) + 0.02175925925925926*pow(x,6.0) + 0.012585034013605442*pow(x,7.0) + 0.011867559523809525*pow(x,8.0) + 0.007833627278071723*pow(x,9.0) + 0.007456349206349206*pow(x,10.0);
                break;
            case 16:  res = -2.*x + llx*x - 0.25*pow(x,2.0) + 0.25*llx*pow(x,2.0) - 0.07407407407407407*pow(x,3.0) + 0.1111111111111111*llx*pow(x,3.0) - 0.03125*pow(x,4.0) + 0.0625*llx*pow(x,4.0) - 0.016*pow(x,5.0) + 0.04*llx*pow(x,5.0) - 0.009259259259259259*pow(x,6.0) + 0.027777777777777776*llx*pow(x,6.0) - 0.0058309037900874635*pow(x,7.0) + 0.02040816326530612*llx*pow(x,7.0) - 0.00390625*pow(x,8.0) + 0.015625*llx*pow(x,8.0) - 0.0027434842249657062*pow(x,9.0) + 0.012345679012345678*llx*pow(x,9.0) - 0.002*pow(x,10.0) + 0.01*llx*pow(x,10.0);
                break;
            case 17:  res = 0.25*pow(x,2.0) + 0.16666666666666666*pow(x,3.0) + 0.11458333333333333*pow(x,4.0) + 0.08333333333333333*pow(x,5.0) + 0.06342592592592593*pow(x,6.0) + 0.05*pow(x,7.0) + 0.04051339285714286*pow(x,8.0) + 0.03355379188712522*pow(x,9.0) + 0.028289682539682538*pow(x,10.0);
                break;
            case 18:  res = 0.16666666666666666*pow(x,3.0) + 0.09166666666666666*pow(x,5.0) + 0.006944444444444444*pow(x,6.0) + 0.06031746031746032*pow(x,7.0) + 0.009027777777777779*pow(x,8.0) + 0.04403659611992945*pow(x,9.0) + 0.00943452380952381*pow(x,10.0);
                break;
            case 19:  res = -0.75*pow(x,2.0) + 0.5*llx*pow(x,2.0) - 0.3055555555555555*pow(x,3.0) + 0.16666666666666666*llx*pow(x,3.0) - 0.2673611111111111*pow(x,4.0) + 0.20833333333333331*llx*pow(x,4.0) - 0.18305555555555555*pow(x,5.0) + 0.11666666666666667*llx*pow(x,5.0) - 0.16152777777777777*pow(x,6.0) + 0.13055555555555556*llx*pow(x,6.0) - 0.1284183673469388*pow(x,7.0) + 0.0880952380952381*llx*pow(x,7.0) - 0.11577274659863945*pow(x,8.0) + 0.0949404761904762*llx*pow(x,8.0) - 0.09845768245569833*pow(x,9.0) + 0.07050264550264551*llx*pow(x,9.0) - 0.09025256676744772*pow(x,10.0) + 0.07456349206349207*llx*pow(x,10.0);
                break;
            case 20:  res = 0.16666666666666666*pow(x,3.0) + 0.08333333333333333*pow(x,4.0) + 0.10833333333333334*pow(x,5.0) + 0.07083333333333333*pow(x,6.0) + 0.07936507936507936*pow(x,7.0) + 0.05843253968253968*pow(x,8.0) + 0.06248897707231041*pow(x,9.0) + 0.04918981481481481*pow(x,10.0);
                break;
            case 21:  res = 0.5*pow(x,2.0) + 0.25*pow(x,3.0) + 0.21527777777777776*pow(x,4.0) + 0.1597222222222222*pow(x,5.0) + 0.13976851851851851*pow(x,6.0) + 0.11583333333333334*pow(x,7.0) + 0.10390518707482993*pow(x,8.0) + 0.0906240551776266*pow(x,9.0) + 0.08279621756109852*pow(x,10.0);
                break;
            case 22:  res = x - 1.*llx*x + 0.5*pow(llx,2.0)*x + 0.125*pow(x,2.0) - 0.25*llx*pow(x,2.0) + 0.25*pow(llx,2.0)*pow(x,2.0) + 0.037037037037037035*pow(x,3.0) - 0.1111111111111111*llx*pow(x,3.0) + 0.16666666666666666*pow(llx,2.0)*pow(x,3.0) + 0.015625*pow(x,4.0) - 0.0625*llx*pow(x,4.0) + 0.125*pow(llx,2.0)*pow(x,4.0) + 0.008*pow(x,5.0) - 0.04*llx*pow(x,5.0) + 0.1*pow(llx,2.0)*pow(x,5.0) + 0.004629629629629629*pow(x,6.0) - 0.027777777777777776*llx*pow(x,6.0) + 0.08333333333333333*pow(llx,2.0)*pow(x,6.0) + 0.0029154518950437317*pow(x,7.0) - 0.02040816326530612*llx*pow(x,7.0) + 0.07142857142857142*pow(llx,2.0)*pow(x,7.0) + 0.001953125*pow(x,8.0) - 0.015625*llx*pow(x,8.0) + 0.0625*pow(llx,2.0)*pow(x,8.0) + 0.0013717421124828531*pow(x,9.0) - 0.012345679012345678*llx*pow(x,9.0) + 0.05555555555555555*pow(llx,2.0)*pow(x,9.0) + 0.001*pow(x,10.0) - 0.01*llx*pow(x,10.0) + 0.05*pow(llx,2.0)*pow(x,10.0);
                break;
            case 23:  res = 0.5*pow(x,2.0) + 0.41666666666666663*pow(x,3.0) + 0.34027777777777773*pow(x,4.0) + 0.2847222222222222*pow(x,5.0) + 0.24393518518518517*pow(x,6.0) + 0.21305555555555555*pow(x,7.0) + 0.18897463151927438*pow(x,8.0) + 0.1697135613504661*pow(x,9.0) + 0.1539767731166541*pow(x,10.0);
                break;
            case 24:  res = 0.16666666666666666*pow(x,3.0) + 0.16666666666666666*pow(x,4.0) + 0.17500000000000002*pow(x,5.0) + 0.16527777777777777*pow(x,6.0) + 0.16031746031746033*pow(x,7.0) + 0.15128968253968253*pow(x,8.0) + 0.14502865961199296*pow(x,9.0) + 0.1375760582010582*pow(x,10.0);
                break;
            case 25:  res = -0.75*pow(x,2.0) + 0.5*llx*pow(x,2.0) - 0.5833333333333333*pow(x,3.0) + 0.5*llx*pow(x,3.0) - 0.4548611111111111*pow(x,4.0) + 0.4583333333333333*llx*pow(x,4.0) - 0.3680555555555555*pow(x,5.0) + 0.41666666666666663*llx*pow(x,5.0) - 0.3073611111111111*pow(x,6.0) + 0.3805555555555556*llx*pow(x,6.0) - 0.26305555555555554*pow(x,7.0) + 0.35000000000000003*llx*pow(x,7.0) - 0.22948802437641724*pow(x,8.0) + 0.32410714285714287*llx*pow(x,8.0) - 0.20326735323759135*pow(x,9.0) + 0.30198412698412697*llx*pow(x,9.0) - 0.18226645565633662*pow(x,10.0) + 0.2828968253968254*llx*pow(x,10.0);
                break;
            case 26:  res = 0.16666666666666666*pow(x,3.0) + 0.25*pow(x,4.0) + 0.29166666666666663*pow(x,5.0) + 0.3125*pow(x,6.0) + 0.32222222222222224*pow(x,7.0) + 0.32569444444444445*pow(x,8.0) + 0.32551807760141094*pow(x,9.0) + 0.3231646825396825*pow(x,10.0);
                break;
    
            default: {cout << "chaplin error: index in HPL3 out of bounds"
                << " : should be 0-26 and it is " << index << endl;
                exit(EXIT_FAILURE);}
        }
        
        if (imaginary_part_was_modified and imaginary_part_should_be_zero_in_hpl3(index,x)) {
            res = complex<double> (res.real() , 0.0);
        }
        return res;
        
    }

    complex<double> HPL3arm1(int index,const complex<double>& xx){
        complex<double> ll2 ( log(2.0) ,  0.0);
        complex<double> pi_sq (consts::pi_square ,0.0 );
        complex<double> res(0.0,0.0);
        complex<double> x=xx;
        const complex<double> myi(0.0,1.0);
        const double pi = consts::Pi;
        const double zeta3=consts::z3;
        // adding i*epsilon
        bool imaginary_part_was_modified = false;
        if ( x.imag() == 0.0 ) {
            x = x + complex<double> (0.0, 1e-60);
            imaginary_part_was_modified = true;
        }
        //const complex<double> llx = log(x);
        
        const complex<double> zp = 1.0 + x;
        const complex<double> llzp = log(zp);
        const complex<double> szp = mysign(zp);
        switch(index) {
            case 0:  res = 0.16666666666666666*pow(llzp,3.0);
                break;
            case 1:  res = 0.16666666666666666*llzp*pow(pi,2.0) + 0.5*pow(llzp,2.0)*myi*pi*szp + zeta3 - 1.*zp - 0.125*pow(zp,2.0) - 0.037037037037037035*pow(zp,3.0) - 0.015625*pow(zp,4.0) - 0.008*pow(zp,5.0) - 0.004629629629629629*pow(zp,6.0) - 0.0029154518950437317*pow(zp,7.0) - 0.001953125*pow(zp,8.0) - 0.0013717421124828531*pow(zp,9.0);
                break;
            case 2:  res = -0.16666666666666666*pow(ll2,3.0) + 0.5*pow(ll2,2.0)*llzp - 0.5*ll2*pow(llzp,2.0) + 0.08333333333333333*ll2*pow(pi,2.0) - 0.08333333333333333*llzp*pow(pi,2.0) - 0.875*zeta3 + 0.5*zp + 0.03125*pow(zp,2.0) + 0.004629629629629629*pow(zp,3.0) + 0.0009765625*pow(zp,4.0) + 0.00025*pow(zp,5.0) + 0.00007233796296296296*pow(zp,6.0) + 0.000022776967930029154*pow(zp,7.0) + 7.62939453125e-6*pow(zp,8.0) + 2.6791838134430725e-6*pow(zp,9.0);
                break;
            case 3:  res = -0.16666666666666666*llzp*pow(pi,2.0) - 2.*zeta3 + (2. - 1.*llzp)*zp + (0.25 - 0.25*llzp)*pow(zp,2.0) + (0.07407407407407407 - 0.1111111111111111*llzp)*pow(zp,3.0) + (0.03125 - 0.0625*llzp)*pow(zp,4.0) + (0.016 - 0.04*llzp)*pow(zp,5.0) + (0.009259259259259259 - 0.027777777777777776*llzp)*pow(zp,6.0) + (0.0058309037900874635 - 0.02040816326530612*llzp)*pow(zp,7.0) + (0.00390625 - 0.015625*llzp)*pow(zp,8.0) + (0.0027434842249657062 - 0.012345679012345678*llzp)*pow(zp,9.0);
                break;
            case 4:  res = -0.5*llzp*pow(pi,2.0) + 0.16666666666666666*myi*pow(pi,3.0)*szp - 1.*zeta3 - 1.*myi*pi*szp*zp + (0.25 - 0.25*myi*pi*szp)*pow(zp,2.0) + (0.16666666666666666 - 0.1111111111111111*myi*pi*szp)*pow(zp,3.0) + (0.11458333333333333 - 0.0625*myi*pi*szp)*pow(zp,4.0) + (0.08333333333333333 - 0.04*myi*pi*szp)*pow(zp,5.0) + (0.06342592592592593 - 0.027777777777777776*myi*pi*szp)*pow(zp,6.0) + (0.05 - 0.02040816326530612*myi*pi*szp)*pow(zp,7.0) + (0.04051339285714286 - 0.015625*myi*pi*szp)*pow(zp,8.0) + (0.03355379188712522 - 0.012345679012345678*myi*pi*szp)*pow(zp,9.0);
                break;
            case 5:  res = -0.08333333333333333*llzp*pow(pi,2.0) - 0.625*zeta3 + ll2*zp + (-0.125 + 0.25*ll2)*pow(zp,2.0) + (-0.06944444444444445 + 0.1111111111111111*ll2)*pow(zp,3.0) + (-0.041666666666666664 + 0.0625*ll2)*pow(zp,4.0) + (-0.02729166666666667 + 0.04*ll2)*pow(zp,5.0) + (-0.019126157407407408 + 0.027777777777777776*ll2)*pow(zp,6.0) + (-0.01410501700680272 + 0.02040816326530612*ll2)*pow(zp,7.0) + (-0.010816592261904763 + 0.015625*ll2)*pow(zp,8.0) + (-0.008552471432245738 + 0.012345679012345678*ll2)*pow(zp,9.0);
                break;
            case 6:  res = 0.3333333333333333*pow(ll2,3.0) - 0.5*pow(ll2,2.0)*llzp - 0.16666666666666666*ll2*pow(pi,2.0) + 0.08333333333333333*llzp*pow(pi,2.0) + 1.75*zeta3 + (-1. + 0.5*llzp)*zp + (-0.0625 + 0.0625*llzp)*pow(zp,2.0) + (-0.009259259259259259 + 0.013888888888888888*llzp)*pow(zp,3.0) + (-0.001953125 + 0.00390625*llzp)*pow(zp,4.0) + (-0.0005 + 0.00125*llzp)*pow(zp,5.0) + (-0.00014467592592592592 + 0.00043402777777777775*llzp)*pow(zp,6.0) + (-0.00004555393586005831 + 0.00015943877551020407*llzp)*pow(zp,7.0) + (-0.0000152587890625 + 0.00006103515625*llzp)*pow(zp,8.0) + (-5.358367626886145e-6 + 0.000024112654320987653*llzp)*pow(zp,9.0);
                break;
            case 7:  res = -0.25*ll2*pow(pi,2.0) + 0.08333333333333333*llzp*pow(pi,2.0) + 0.5*pow(ll2,2.0)*myi*pi*szp - 1.*ll2*llzp*myi*pi*szp - 0.08333333333333333*myi*pow(pi,3.0)*szp + 1.625*zeta3 + 0.5*myi*pi*szp*zp + (-0.125 + 0.0625*myi*pi*szp)*pow(zp,2.0) + (-0.05555555555555555 + 0.013888888888888888*myi*pi*szp)*pow(zp,3.0) + (-0.026041666666666664 + 0.00390625*myi*pi*szp)*pow(zp,4.0) + (-0.013333333333333334 + 0.00125*myi*pi*szp)*pow(zp,5.0) + (-0.007407407407407408 + 0.00043402777777777775*myi*pi*szp)*pow(zp,6.0) + (-0.004421768707482993 + 0.00015943877551020407*myi*pi*szp)*pow(zp,7.0) + (-0.0028087797619047623 + 0.00006103515625*myi*pi*szp)*pow(zp,8.0) + (-0.0018812463256907702 + 0.000024112654320987653*myi*pi*szp)*pow(zp,9.0);
                break;
            case 8:  res = -0.3333333333333333*pow(ll2,3.0) + 0.5*pow(ll2,2.0)*llzp + 0.08333333333333333*ll2*pow(pi,2.0) - 0.125*zeta3 - 0.5*ll2*zp + (0.0625 - 0.0625*ll2)*pow(zp,2.0) + (0.020833333333333332 - 0.013888888888888888*ll2)*pow(zp,3.0) + (0.007161458333333333 - 0.00390625*ll2)*pow(zp,4.0) + (0.0026041666666666665 - 0.00125*ll2)*pow(zp,5.0) + (0.0009910300925925926 - 0.00043402777777777775*ll2)*pow(zp,6.0) + (0.000390625 - 0.00015943877551020407*ll2)*pow(zp,7.0) + (0.0001582554408482143 - 0.00006103515625*ll2)*pow(zp,8.0) + (0.00006553474977954145 - 0.000024112654320987653*ll2)*pow(zp,9.0);
                break;
            case 9:  res = zeta3 + (-1. + llzp - 0.5*pow(llzp,2.0))*zp + (-0.125 + 0.25*llzp - 0.25*pow(llzp,2.0))*pow(zp,2.0) + (-0.037037037037037035 + 0.1111111111111111*llzp - 0.16666666666666666*pow(llzp,2.0))*pow(zp,3.0) + (-0.015625 + 0.0625*llzp - 0.125*pow(llzp,2.0))*pow(zp,4.0) + (-0.008 + 0.04*llzp - 0.1*pow(llzp,2.0))*pow(zp,5.0) + (-0.004629629629629629 + 0.027777777777777776*llzp - 0.08333333333333333*pow(llzp,2.0))*pow(zp,6.0) + (-0.0029154518950437317 + 0.02040816326530612*llzp - 0.07142857142857142*pow(llzp,2.0))*pow(zp,7.0) + (-0.001953125 + 0.015625*llzp - 0.0625*pow(llzp,2.0))*pow(zp,8.0) + (-0.0013717421124828531 + 0.012345679012345678*llzp - 0.05555555555555555*pow(llzp,2.0))*pow(zp,9.0);
                break;
            case 10:  res = -0.16666666666666666*myi*pow(pi,3.0)*szp + 2.*zeta3 + (-0.16666666666666666*pow(pi,2.0) + myi*pi*szp - 1.*llzp*myi*pi*szp)*zp + (0.5 - 0.08333333333333333*pow(pi,2.0) + 0.25*myi*pi*szp - 0.5*llzp*myi*pi*szp)*pow(zp,2.0) + (0.41666666666666663 - 0.05555555555555555*pow(pi,2.0) + 0.1111111111111111*myi*pi*szp - 0.3333333333333333*llzp*myi*pi*szp)*pow(zp,3.0) + (0.34027777777777773 - 0.041666666666666664*pow(pi,2.0) + 0.0625*myi*pi*szp - 0.25*llzp*myi*pi*szp)*pow(zp,4.0) + (0.2847222222222222 - 0.03333333333333333*pow(pi,2.0) + 0.04*myi*pi*szp - 0.2*llzp*myi*pi*szp)*pow(zp,5.0) + (0.24393518518518517 - 0.027777777777777776*pow(pi,2.0) + 0.027777777777777776*myi*pi*szp - 0.16666666666666666*llzp*myi*pi*szp)*pow(zp,6.0) + (0.21305555555555555 - 0.023809523809523808*pow(pi,2.0) + 0.02040816326530612*myi*pi*szp - 0.14285714285714285*llzp*myi*pi*szp)*pow(zp,7.0) + (0.18897463151927438 - 0.020833333333333332*pow(pi,2.0) + 0.015625*myi*pi*szp - 0.125*llzp*myi*pi*szp)*pow(zp,8.0) + (0.1697135613504661 - 0.018518518518518517*pow(pi,2.0) + 0.012345679012345678*myi*pi*szp - 0.1111111111111111*llzp*myi*pi*szp)*pow(zp,9.0);
                break;
            case 11:  res = 0.25*ll2*pow(pi,2.0) - 1.*zeta3 + (-1.*ll2 - 0.5*pow(ll2,2.0) + ll2*llzp + 0.08333333333333333*pow(pi,2.0))*zp + (-0.25 - 0.25*ll2 - 0.25*pow(ll2,2.0) + 0.5*ll2*llzp + 0.041666666666666664*pow(pi,2.0))*pow(zp,2.0) + (-0.1875 - 0.1111111111111111*ll2 - 0.16666666666666666*pow(ll2,2.0) + 0.3333333333333333*ll2*llzp + 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (-0.1440972222222222 - 0.0625*ll2 - 0.125*pow(ll2,2.0) + 0.25*ll2*llzp + 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (-0.11605902777777778 - 0.04*ll2 - 0.1*pow(ll2,2.0) + 0.2*ll2*llzp + 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (-0.0969241898148148 - 0.027777777777777776*ll2 - 0.08333333333333333*pow(ll2,2.0) + 0.16666666666666666*ll2*llzp + 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0) + (-0.08313988095238095 - 0.02040816326530612*ll2 - 0.07142857142857142*pow(ll2,2.0) + 0.14285714285714285*ll2*llzp + 0.011904761904761904*pow(pi,2.0))*pow(zp,7.0) + (-0.07276732568027211 - 0.015625*ll2 - 0.0625*pow(ll2,2.0) + 0.125*ll2*llzp + 0.010416666666666666*pow(pi,2.0))*pow(zp,8.0) + (-0.06468884895538075 - 0.012345679012345678*ll2 - 0.05555555555555555*pow(ll2,2.0) + 0.1111111111111111*ll2*llzp + 0.009259259259259259*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 12:  res = -1.*zeta3 + 0.16666666666666666*pow(pi,2.0)*zp + (-0.75 + 0.5*llzp + 0.08333333333333333*pow(pi,2.0))*pow(zp,2.0) + (-0.5833333333333333 + 0.5*llzp + 0.05555555555555555*pow(pi,2.0))*pow(zp,3.0) + (-0.4548611111111111 + 0.4583333333333333*llzp + 0.041666666666666664*pow(pi,2.0))*pow(zp,4.0) + (-0.3680555555555555 + 0.41666666666666663*llzp + 0.03333333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.3073611111111111 + 0.3805555555555556*llzp + 0.027777777777777776*pow(pi,2.0))*pow(zp,6.0) + (-0.26305555555555554 + 0.35000000000000003*llzp + 0.023809523809523808*pow(pi,2.0))*pow(zp,7.0) + (-0.22948802437641724 + 0.32410714285714287*llzp + 0.020833333333333332*pow(pi,2.0))*pow(zp,8.0) + (-0.20326735323759135 + 0.30198412698412697*llzp + 0.018518518518518517*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 13:  res = -0.16666666666666666*myi*pow(pi,3.0)*szp + 0.5*pow(pi,2.0)*zp + (0.25*pow(pi,2.0) + 0.5*myi*pi*szp)*pow(zp,2.0) + (-0.16666666666666666 + 0.16666666666666666*pow(pi,2.0) + 0.5*myi*pi*szp)*pow(zp,3.0) + (-0.25 + 0.125*pow(pi,2.0) + 0.4583333333333333*myi*pi*szp)*pow(zp,4.0) + (-0.29166666666666663 + 0.1*pow(pi,2.0) + 0.41666666666666663*myi*pi*szp)*pow(zp,5.0) + (-0.3125 + 0.08333333333333333*pow(pi,2.0) + 0.3805555555555556*myi*pi*szp)*pow(zp,6.0) + (-0.32222222222222224 + 0.07142857142857142*pow(pi,2.0) + 0.35000000000000003*myi*pi*szp)*pow(zp,7.0) + (-0.32569444444444445 + 0.0625*pow(pi,2.0) + 0.32410714285714287*myi*pi*szp)*pow(zp,8.0) + (-0.32551807760141094 + 0.05555555555555555*pow(pi,2.0) + 0.30198412698412697*myi*pi*szp)*pow(zp,9.0);
                break;
            case 14:  res = -0.75*zeta3 + 0.08333333333333333*pow(pi,2.0)*zp + (-0.5*ll2 + 0.041666666666666664*pow(pi,2.0))*pow(zp,2.0) + (0.08333333333333333 - 0.5*ll2 + 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (0.11458333333333333 - 0.4583333333333333*ll2 + 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (0.125 - 0.41666666666666663*ll2 + 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (0.12690972222222222 - 0.3805555555555556*ll2 + 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0) + (0.1251736111111111 - 0.35000000000000003*ll2 + 0.011904761904761904*pow(pi,2.0))*pow(zp,7.0) + (0.1218687996031746 - 0.32410714285714287*ll2 + 0.010416666666666666*pow(pi,2.0))*pow(zp,8.0) + (0.11794257054673722 - 0.30198412698412697*ll2 + 0.009259259259259259*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 15:  res = -0.25*ll2*pow(pi,2.0) + 1.625*zeta3 + (0.5*pow(ll2,2.0) - 0.08333333333333333*pow(pi,2.0))*zp + (0.375 + 0.25*pow(ll2,2.0) - 0.25*llzp - 0.041666666666666664*pow(pi,2.0))*pow(zp,2.0) + (0.2569444444444444 + 0.16666666666666666*pow(ll2,2.0) - 0.20833333333333331*llzp - 0.027777777777777776*pow(pi,2.0))*pow(zp,3.0) + (0.18576388888888887 + 0.125*pow(ll2,2.0) - 0.16666666666666666*llzp - 0.020833333333333332*pow(pi,2.0))*pow(zp,4.0) + (0.14335069444444445 + 0.1*pow(ll2,2.0) - 0.13645833333333332*llzp - 0.016666666666666666*pow(pi,2.0))*pow(zp,5.0) + (0.11605034722222222 + 0.08333333333333333*pow(ll2,2.0) - 0.11475694444444445*llzp - 0.013888888888888888*pow(pi,2.0))*pow(zp,6.0) + (0.09724489795918367 + 0.07142857142857142*pow(ll2,2.0) - 0.09873511904761906*llzp - 0.011904761904761904*pow(pi,2.0))*pow(zp,7.0) + (0.08358391794217687 + 0.0625*pow(ll2,2.0) - 0.08653273809523811*llzp - 0.010416666666666666*pow(pi,2.0))*pow(zp,8.0) + (0.0732413203876265 + 0.05555555555555555*pow(ll2,2.0) - 0.07697224289021165*llzp - 0.009259259259259259*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 16:  res = -0.08333333333333333*myi*pow(pi,3.0)*szp + 1.5*zeta3 + (-0.08333333333333333*pow(pi,2.0) + ll2*myi*pi*szp)*zp + (-0.041666666666666664*pow(pi,2.0) - 0.25*myi*pi*szp + 0.5*ll2*myi*pi*szp)*pow(zp,2.0) + (0.08333333333333333 - 0.027777777777777776*pow(pi,2.0) - 0.20833333333333331*myi*pi*szp + 0.3333333333333333*ll2*myi*pi*szp)*pow(zp,3.0) + (0.10416666666666666 - 0.020833333333333332*pow(pi,2.0) - 0.16666666666666666*myi*pi*szp + 0.25*ll2*myi*pi*szp)*pow(zp,4.0) + (0.10416666666666666 - 0.016666666666666666*pow(pi,2.0) - 0.13645833333333332*myi*pi*szp + 0.2*ll2*myi*pi*szp)*pow(zp,5.0) + (0.09791666666666667 - 0.013888888888888888*pow(pi,2.0) - 0.11475694444444445*myi*pi*szp + 0.16666666666666666*ll2*myi*pi*szp)*pow(zp,6.0) + (0.09027777777777778 - 0.011904761904761904*pow(pi,2.0) - 0.09873511904761906*myi*pi*szp + 0.14285714285714285*ll2*myi*pi*szp)*pow(zp,7.0) + (0.08286210317460317 - 0.010416666666666666*pow(pi,2.0) - 0.08653273809523811*myi*pi*szp + 0.125*ll2*myi*pi*szp)*pow(zp,8.0) + (0.07615189594356261 - 0.009259259259259259*pow(pi,2.0) - 0.07697224289021165*myi*pi*szp + 0.1111111111111111*ll2*myi*pi*szp)*pow(zp,9.0);
                break;
            case 17:  res = 0.125*zeta3 - 0.5*pow(ll2,2.0)*zp + (0.25*ll2 - 0.25*pow(ll2,2.0))*pow(zp,2.0) + (-0.041666666666666664 + 0.20833333333333331*ll2 - 0.16666666666666666*pow(ll2,2.0))*pow(zp,3.0) + (-0.046875 + 0.16666666666666666*ll2 - 0.125*pow(ll2,2.0))*pow(zp,4.0) + (-0.043229166666666666 + 0.13645833333333332*ll2 - 0.1*pow(ll2,2.0))*pow(zp,5.0) + (-0.03819444444444444 + 0.11475694444444445*ll2 - 0.08333333333333333*pow(ll2,2.0))*pow(zp,6.0) + (-0.0335875496031746 + 0.09873511904761906*ll2 - 0.07142857142857142*pow(ll2,2.0))*pow(zp,7.0) + (-0.029730902777777776 + 0.08653273809523811*ll2 - 0.0625*pow(ll2,2.0))*pow(zp,8.0) + (-0.026568140638778662 + 0.07697224289021165*ll2 - 0.05555555555555555*pow(ll2,2.0))*pow(zp,9.0);
                break;
            case 18:  res = -0.16666666666666666*pow(ll2,3.0) + 0.08333333333333333*ll2*pow(pi,2.0) - 0.875*zeta3 + (0.5 - 0.5*llzp + 0.25*pow(llzp,2.0))*zp + (0.03125 - 0.0625*llzp + 0.0625*pow(llzp,2.0))*pow(zp,2.0) + (0.004629629629629629 - 0.013888888888888888*llzp + 0.020833333333333332*pow(llzp,2.0))*pow(zp,3.0) + (0.0009765625 - 0.00390625*llzp + 0.0078125*pow(llzp,2.0))*pow(zp,4.0) + (0.00025 - 0.00125*llzp + 0.003125*pow(llzp,2.0))*pow(zp,5.0) + (0.00007233796296296296 - 0.00043402777777777775*llzp + 0.0013020833333333333*pow(llzp,2.0))*pow(zp,6.0) + (0.000022776967930029154 - 0.00015943877551020407*llzp + 0.0005580357142857143*pow(llzp,2.0))*pow(zp,7.0) + (7.62939453125e-6 - 0.00006103515625*llzp + 0.000244140625*pow(llzp,2.0))*pow(zp,8.0) + (2.6791838134430725e-6 - 0.000024112654320987653*llzp + 0.00010850694444444444*pow(llzp,2.0))*pow(zp,9.0);
                break;
            case 19:  res = 0.08333333333333333*ll2*pow(pi,2.0) - 0.5*pow(ll2,2.0)*myi*pi*szp + 0.08333333333333333*myi*pow(pi,3.0)*szp - 1.*zeta3 + (0.08333333333333333*pow(pi,2.0) - 0.5*myi*pi*szp + 0.5*llzp*myi*pi*szp)*zp + (-0.25 + 0.020833333333333332*pow(pi,2.0) - 0.0625*myi*pi*szp + 0.125*llzp*myi*pi*szp)*pow(zp,2.0) + (-0.125 + 0.006944444444444444*pow(pi,2.0) - 0.013888888888888888*myi*pi*szp + 0.041666666666666664*llzp*myi*pi*szp)*pow(zp,3.0) + (-0.06076388888888889 + 0.0026041666666666665*pow(pi,2.0) - 0.00390625*myi*pi*szp + 0.015625*llzp*myi*pi*szp)*pow(zp,4.0) + (-0.030555555555555558 + 0.0010416666666666667*pow(pi,2.0) - 0.00125*myi*pi*szp + 0.00625*llzp*myi*pi*szp)*pow(zp,5.0) + (-0.016064814814814813 + 0.00043402777777777775*pow(pi,2.0) - 0.00043402777777777775*myi*pi*szp + 0.0026041666666666665*llzp*myi*pi*szp)*pow(zp,6.0) + (-0.008869047619047618 + 0.00018601190476190475*pow(pi,2.0) - 0.00015943877551020407*myi*pi*szp + 0.0011160714285714285*llzp*myi*pi*szp)*pow(zp,7.0) + (-0.005155718537414966 + 0.00008138020833333333*pow(pi,2.0) - 0.00006103515625*myi*pi*szp + 0.00048828125*llzp*myi*pi*szp)*pow(zp,8.0) + (-0.0031594860166288736 + 0.00003616898148148148*pow(pi,2.0) - 0.000024112654320987653*myi*pi*szp + 0.00021701388888888888*llzp*myi*pi*szp)*pow(zp,9.0);
                break;
            case 20:  res = 0.16666666666666666*pow(ll2,3.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.25*zeta3 + (0.5*ll2 + 0.25*pow(ll2,2.0) - 0.5*ll2*llzp - 0.041666666666666664*pow(pi,2.0))*zp + (0.125 + 0.0625*ll2 + 0.0625*pow(ll2,2.0) - 0.125*ll2*llzp - 0.010416666666666666*pow(pi,2.0))*pow(zp,2.0) + (0.05208333333333333 + 0.013888888888888888*ll2 + 0.020833333333333332*pow(ll2,2.0) - 0.041666666666666664*ll2*llzp - 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (0.02126736111111111 + 0.00390625*ll2 + 0.0078125*pow(ll2,2.0) - 0.015625*ll2*llzp - 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (0.008897569444444444 + 0.00125*ll2 + 0.003125*pow(ll2,2.0) - 0.00625*ll2*llzp - 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (0.0038114872685185183 + 0.00043402777777777775*ll2 + 0.0013020833333333333*pow(ll2,2.0) - 0.0026041666666666665*ll2*llzp - 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0) + (0.0016644965277777778 + 0.00015943877551020407*ll2 + 0.0005580357142857143*pow(ll2,2.0) - 0.0011160714285714285*ll2*llzp - 0.00009300595238095238*pow(pi,2.0))*pow(zp,7.0) + (0.0007381821543721655 + 0.00006103515625*ll2 + 0.000244140625*pow(ll2,2.0) - 0.00048828125*ll2*llzp - 0.000040690104166666664*pow(pi,2.0))*pow(zp,8.0) + (0.00033147179951262913 + 0.000024112654320987653*ll2 + 0.00010850694444444444*pow(ll2,2.0) - 0.00021701388888888888*ll2*llzp - 0.00001808449074074074*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 21:  res = 0.16666666666666666*ll2*pow(pi,2.0) - 0.625*zeta3 - 0.08333333333333333*pow(pi,2.0)*zp + (0.375 - 0.25*llzp - 0.020833333333333332*pow(pi,2.0))*pow(zp,2.0) + (0.18055555555555555 - 0.16666666666666666*llzp - 0.006944444444444444*pow(pi,2.0))*pow(zp,3.0) + (0.08680555555555555 - 0.10416666666666666*llzp - 0.0026041666666666665*pow(pi,2.0))*pow(zp,4.0) + (0.04388888888888889 - 0.06666666666666667*llzp - 0.0010416666666666667*pow(pi,2.0))*pow(zp,5.0) + (0.02347222222222222 - 0.044444444444444446*llzp - 0.00043402777777777775*pow(pi,2.0))*pow(zp,6.0) + (0.013290816326530612 - 0.030952380952380953*llzp - 0.00018601190476190475*pow(pi,2.0))*pow(zp,7.0) + (0.007964498299319727 - 0.0224702380952381*llzp - 0.00008138020833333333*pow(pi,2.0))*pow(zp,8.0) + (0.005040732342319644 - 0.016931216931216932*llzp - 0.00003616898148148148*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 22:  res = 0.5*ll2*pow(pi,2.0) + 0.08333333333333333*myi*pow(pi,3.0)*szp - 0.75*zeta3 - 0.25*pow(pi,2.0)*zp + (-0.0625*pow(pi,2.0) - 0.25*myi*pi*szp)*pow(zp,2.0) + (0.08333333333333333 - 0.020833333333333332*pow(pi,2.0) - 0.16666666666666666*myi*pi*szp)*pow(zp,3.0) + (0.09375 - 0.0078125*pow(pi,2.0) - 0.10416666666666666*myi*pi*szp)*pow(zp,4.0) + (0.08333333333333333 - 0.003125*pow(pi,2.0) - 0.06666666666666667*myi*pi*szp)*pow(zp,5.0) + (0.06944444444444445 - 0.0013020833333333333*pow(pi,2.0) - 0.044444444444444446*myi*pi*szp)*pow(zp,6.0) + (0.05694444444444444 - 0.0005580357142857143*pow(pi,2.0) - 0.030952380952380953*myi*pi*szp)*pow(zp,7.0) + (0.046788194444444445 - 0.000244140625*pow(pi,2.0) - 0.0224702380952381*myi*pi*szp)*pow(zp,8.0) + (0.03880070546737213 - 0.00010850694444444444*pow(pi,2.0) - 0.016931216931216932*myi*pi*szp)*pow(zp,9.0);
                break;
            case 23:  res = 0.08333333333333333*ll2*pow(pi,2.0) - 0.25*zeta3 - 0.041666666666666664*pow(pi,2.0)*zp + (0.25*ll2 - 0.010416666666666666*pow(pi,2.0))*pow(zp,2.0) + (-0.041666666666666664 + 0.16666666666666666*ll2 - 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (-0.041666666666666664 + 0.10416666666666666*ll2 - 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (-0.03333333333333333 + 0.06666666666666667*ll2 - 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.025260416666666667 + 0.044444444444444446*ll2 - 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0) + (-0.01902281746031746 + 0.030952380952380953*ll2 - 0.00009300595238095238*pow(pi,2.0))*pow(zp,7.0) + (-0.014493427579365078 + 0.0224702380952381*ll2 - 0.000040690104166666664*pow(pi,2.0))*pow(zp,8.0) + (-0.011248897707231042 + 0.016931216931216932*ll2 - 0.00001808449074074074*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 24:  res = 0.16666666666666666*pow(ll2,3.0) - 0.125*zeta3 + (-0.25*pow(ll2,2.0) + 0.041666666666666664*pow(pi,2.0))*zp + (-0.1875 - 0.0625*pow(ll2,2.0) + 0.125*llzp + 0.010416666666666666*pow(pi,2.0))*pow(zp,2.0) + (-0.07291666666666666 - 0.020833333333333332*pow(ll2,2.0) + 0.0625*llzp + 0.003472222222222222*pow(pi,2.0))*pow(zp,3.0) + (-0.028428819444444444 - 0.0078125*pow(ll2,2.0) + 0.028645833333333332*llzp + 0.0013020833333333333*pow(pi,2.0))*pow(zp,4.0) + (-0.01150173611111111 - 0.003125*pow(ll2,2.0) + 0.013020833333333332*llzp + 0.0005208333333333333*pow(pi,2.0))*pow(zp,5.0) + (-0.004802517361111111 - 0.0013020833333333333*pow(ll2,2.0) + 0.005946180555555556*llzp + 0.00021701388888888888*pow(pi,2.0))*pow(zp,6.0) + (-0.0020551215277777777 - 0.0005580357142857143*pow(ll2,2.0) + 0.0027343750000000003*llzp + 0.00009300595238095238*pow(pi,2.0))*pow(zp,7.0) + (-0.0008964375952203799 - 0.000244140625*pow(ll2,2.0) + 0.0012660435267857143*llzp + 0.000040690104166666664*pow(pi,2.0))*pow(zp,8.0) + (-0.0003970065492921706 - 0.00010850694444444444*pow(ll2,2.0) + 0.000589812748015873*llzp + 0.00001808449074074074*pow(pi,2.0))*pow(zp,9.0);
                break;
            case 25:  res = -0.08333333333333333*ll2*pow(pi,2.0) + 0.5*pow(ll2,2.0)*myi*pi*szp + 0.125*zeta3 + (0.041666666666666664*pow(pi,2.0) - 0.5*ll2*myi*pi*szp)*zp + (0.010416666666666666*pow(pi,2.0) + 0.125*myi*pi*szp - 0.125*ll2*myi*pi*szp)*pow(zp,2.0) + (-0.041666666666666664 + 0.003472222222222222*pow(pi,2.0) + 0.0625*myi*pi*szp - 0.041666666666666664*ll2*myi*pi*szp)*pow(zp,3.0) + (-0.03645833333333333 + 0.0013020833333333333*pow(pi,2.0) + 0.028645833333333332*myi*pi*szp - 0.015625*ll2*myi*pi*szp)*pow(zp,4.0) + (-0.025 + 0.0005208333333333333*pow(pi,2.0) + 0.013020833333333332*myi*pi*szp - 0.00625*ll2*myi*pi*szp)*pow(zp,5.0) + (-0.015972222222222224 + 0.00021701388888888888*pow(pi,2.0) + 0.005946180555555556*myi*pi*szp - 0.0026041666666666665*ll2*myi*pi*szp)*pow(zp,6.0) + (-0.01001984126984127 + 0.00009300595238095238*pow(pi,2.0) + 0.0027343750000000003*myi*pi*szp - 0.0011160714285714285*ll2*myi*pi*szp)*pow(zp,7.0) + (-0.006318204365079365 + 0.000040690104166666664*pow(pi,2.0) + 0.0012660435267857143*myi*pi*szp - 0.00048828125*ll2*myi*pi*szp)*pow(zp,8.0) + (-0.004056437389770723 + 0.00001808449074074074*pow(pi,2.0) + 0.000589812748015873*myi*pi*szp - 0.00021701388888888888*ll2*myi*pi*szp)*pow(zp,9.0);
                break;
            case 26:  res = -0.16666666666666666*pow(ll2,3.0) + 0.25*pow(ll2,2.0)*zp + (-0.125*ll2 + 0.0625*pow(ll2,2.0))*pow(zp,2.0) + (0.020833333333333332 - 0.0625*ll2 + 0.020833333333333332*pow(ll2,2.0))*pow(zp,3.0) + (0.015625 - 0.028645833333333332*ll2 + 0.0078125*pow(ll2,2.0))*pow(zp,4.0) + (0.009114583333333332 - 0.013020833333333332*ll2 + 0.003125*pow(ll2,2.0))*pow(zp,5.0) + (0.0048828125 - 0.005946180555555556*ll2 + 0.0013020833333333333*pow(ll2,2.0))*pow(zp,6.0) + (0.0025173611111111113 - 0.0027343750000000003*ll2 + 0.0005580357142857143*pow(ll2,2.0))*pow(zp,7.0) + (0.0012722439236111111 - 0.0012660435267857143*ll2 + 0.000244140625*pow(ll2,2.0))*pow(zp,8.0) + (0.0006357774953152557 - 0.000589812748015873*ll2 + 0.00010850694444444444*pow(ll2,2.0))*pow(zp,9.0);
                break;

                
            default: {cout << "chaplin error: index in HPL3 out of bounds"
                << " : should be 0-26 and it is " << index << endl;
                exit(EXIT_FAILURE);}
        }
        
        if (imaginary_part_was_modified and imaginary_part_should_be_zero_in_hpl3(index,x)) {
            res = complex<double> (res.real() , 0.0);
        }
        return res;
        
    }
    
    
    complex<double> HPL3else(int index,const complex<double>& xx){
        complex<double> ll2 ( log(2.0) ,  0.0);
        complex<double> pi_sq (consts::pi_square ,0.0 );
        complex<double> res(0.0,0.0);
        complex<double> x=xx;
        const complex<double> myi(0.0,1.0);
        const double pi = consts::Pi;
        const double zeta3=consts::z3;
        // adding i*epsilon
        bool imaginary_part_was_modified = false;
        if ( x.imag() == 0.0 ) {
            x = x + complex<double> (0.0, 1e-60);
            imaginary_part_was_modified = true;
        }

        const complex<double> llx = log(x);
        const complex<double> ll1px = log(1.0+x);
        const complex<double> ll1mx = log(1.0-x);
        switch(index) {
            case 0:  res = 0.16666666666666666*pow(ll1px,3.0);
                break;
            case 1:  res = 0.16666666666666666*pow(ll1px,3.0) - 0.16666666666666666*ll1px*pow(pi,2.0) + zeta3 - 1.*basis3x4(x);
                break;
            case 2:  res = -0.5*pow(ll1px,2.0)*ll2 + 0.5*ll1px*pow(ll2,2.0) - 0.16666666666666666*pow(ll2,3.0) - 0.08333333333333333*ll1px*pow(pi,2.0) + 0.08333333333333333*ll2*pow(pi,2.0) - 0.875*zeta3 + basis3x5(x);
                break;
            case 3:  res = -0.3333333333333333*pow(ll1px,3.0) + pow(ll1px,2.0)*llx + 0.3333333333333333*ll1px*pow(pi,2.0) - 2.*zeta3 + ll1px*basis2x2(x) + 2.*basis3x4(x);
                break;
            case 4:  res = 0.5*ll1px*pow(llx,2.0) + llx*basis2x2(x) - 1.*basis3x2(x);
                break;
            case 5: res = 0.5*ll1mx*pow(ll1px,2.0) - 1.*ll1mx*ll1px*ll2 + 0.5*ll1mx*pow(ll2,2.0) + 0.5*ll1px*pow(ll2,2.0) - 0.3333333333333333*pow(ll2,3.0) - 1.*ll1mx*ll1px*llx - 0.08333333333333333*ll1mx*pow(pi,2.0) - 0.08333333333333333*ll1px*pow(pi,2.0) + 0.16666666666666666*ll2*pow(pi,2.0) - 0.75*zeta3 - 1.*ll1mx*basis2x2(x) - 1.*basis3x3(x) - 1.*basis3x4(x) + basis3x5(x) + basis3x6(x) + basis3x7(x);
                break;
            case 6:  res = -1.*ll1mx*pow(ll1px,2.0) + ll1mx*ll1px*ll2 + pow(ll1px,2.0)*ll2 - 1.5*ll1px*pow(ll2,2.0) + 0.3333333333333333*pow(ll2,3.0) + 0.25*ll1px*pow(pi,2.0) - 0.16666666666666666*ll2*pow(pi,2.0) + 1.75*zeta3 - 1.*ll1px*basis2x3(x) - 2.*basis3x5(x);
                break;
            case 7:  res = 0.16666666666666666*pow(ll1mx,3.0) - 0.5*ll1mx*pow(ll1px,2.0) - 0.5*pow(ll1mx,2.0)*ll2 + ll1mx*ll1px*ll2 - 0.5*ll1px*pow(ll2,2.0) + 0.16666666666666666*pow(ll2,3.0) - 0.5*pow(ll1mx,2.0)*llx + ll1mx*ll2*llx - 0.5*pow(ll2,2.0)*llx + 0.16666666666666666*ll1mx*pow(pi,2.0) + 0.08333333333333333*ll1px*pow(pi,2.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.08333333333333333*llx*pow(pi,2.0) + 0.875*zeta3 - 1.*llx*basis2x3(x) - 1.*basis3x1(x) + basis3x2(x) + basis3x4(x) - 1.*basis3x5(x) - 1.*basis3x7(x) - 1.*basis3x8(x);
                break;
            case 8:  res = 0.5*pow(ll1mx,2.0)*ll1px - 0.5*pow(ll1mx,2.0)*ll2 + 0.16666666666666666*pow(ll2,3.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.875*zeta3 + ll1mx*basis2x3(x) - 1.*basis3x6(x);
                break;
            case 9:  res = 0.16666666666666666*pow(ll1px,3.0) - 0.5*pow(ll1px,2.0)*llx - 0.16666666666666666*ll1px*pow(pi,2.0) + zeta3 - 1.*ll1px*basis2x2(x) - 1.*basis3x4(x);
                break;
            case 10:  res = -1.*llx*basis2x2(x) + 2.*basis3x2(x);
                break;
            case 11:  res = -0.16666666666666666*pow(ll1mx,3.0) + 0.5*pow(ll1mx,2.0)*ll2 - 0.5*ll1mx*pow(ll2,2.0) + 0.16666666666666666*pow(ll2,3.0) + 0.5*pow(ll1mx,2.0)*llx - 0.08333333333333333*ll1mx*pow(pi,2.0) - 0.08333333333333333*ll2*pow(pi,2.0) - 0.125*zeta3 + ll1mx*basis2x2(x) + basis3x1(x) - 1.*basis3x2(x) + basis3x3(x) - 1.*basis3x6(x) + basis3x8(x);
                break;
            case 12:  res = -1.*basis3x2(x);
                break;
            case 13:  res = 0.16666666666666666*pow(llx,3.0);
                break;
            case 14:  res = basis3x1(x);
                break;
            case 15:  res = 0.16666666666666666*pow(ll1mx,3.0) - 0.5*ll1mx*pow(ll1px,2.0) - 0.5*pow(ll1mx,2.0)*ll2 + ll1mx*ll1px*ll2 - 0.5*ll1px*pow(ll2,2.0) + 0.16666666666666666*pow(ll2,3.0) - 0.5*pow(ll1mx,2.0)*llx + ll1mx*ll1px*llx + 0.16666666666666666*ll1mx*pow(pi,2.0) + 0.08333333333333333*ll1px*pow(pi,2.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.875*zeta3 + ll1px*basis2x1(x) - 1.*basis3x1(x) + basis3x2(x) + basis3x4(x) - 1.*basis3x5(x) - 1.*basis3x7(x) - 1.*basis3x8(x);
                break;
            case 16:  res = llx*basis2x1(x) - 2.*basis3x1(x);
                break;
            case 17:  res = -0.5*pow(ll1mx,2.0)*llx + 0.16666666666666666*ll1mx*pow(pi,2.0) + zeta3 - 1.*ll1mx*basis2x1(x) - 1.*basis3x3(x);
                break;
            case 18:  res = 0.5*ll1mx*pow(ll1px,2.0) - 1.*ll1mx*ll1px*ll2 - 0.5*pow(ll1px,2.0)*ll2 + ll1px*pow(ll2,2.0) - 0.16666666666666666*pow(ll2,3.0) - 0.16666666666666666*ll1px*pow(pi,2.0) + 0.08333333333333333*ll2*pow(pi,2.0) - 0.875*zeta3 + ll1px*basis2x3(x) + basis3x5(x);
                break;
            case 19:  res = -0.16666666666666666*pow(ll1mx,3.0) + 0.5*pow(ll1mx,2.0)*ll2 - 0.5*ll1mx*pow(ll2,2.0) + 0.16666666666666666*pow(ll2,3.0) + 0.5*pow(ll1mx,2.0)*llx - 1.*ll1mx*ll2*llx + 0.5*pow(ll2,2.0)*llx - 0.08333333333333333*ll1mx*pow(pi,2.0) - 0.08333333333333333*ll2*pow(pi,2.0) - 0.08333333333333333*llx*pow(pi,2.0) - 0.125*zeta3 + llx*basis2x3(x) + basis3x1(x) - 1.*basis3x2(x) + basis3x3(x) - 1.*basis3x6(x) + basis3x8(x);
                break;
            case 20:  res = 0.5*ll1mx*pow(ll2,2.0) - 0.3333333333333333*pow(ll2,3.0) - 0.08333333333333333*ll1mx*pow(pi,2.0) + 0.16666666666666666*ll2*pow(pi,2.0) - 1.75*zeta3 - 1.*ll1mx*basis2x3(x) + 2.*basis3x6(x);
                break;
            case 21:  res = 0.5*ll1mx*pow(ll1px,2.0) - 1.*ll1mx*ll1px*ll2 + 0.5*ll1mx*pow(ll2,2.0) + 0.5*ll1px*pow(ll2,2.0) - 0.3333333333333333*pow(ll2,3.0) - 1.*ll1mx*ll1px*llx - 0.08333333333333333*ll1mx*pow(pi,2.0) - 0.08333333333333333*ll1px*pow(pi,2.0) + 0.16666666666666666*ll2*pow(pi,2.0) - 0.75*zeta3 - 1.*ll1px*basis2x1(x) - 1.*basis3x3(x) - 1.*basis3x4(x) + basis3x5(x) + basis3x6(x) + basis3x7(x);
                break;
            case 22:  res = -0.5*ll1mx*pow(llx,2.0) - 1.*llx*basis2x1(x) + basis3x1(x);
                break;
            case 23:  res = pow(ll1mx,2.0)*llx - 0.3333333333333333*ll1mx*pow(pi,2.0) - 2.*zeta3 + ll1mx*basis2x1(x) + 2.*basis3x3(x);
                break;
            case 24:  res = 0.5*pow(ll1mx,2.0)*ll2 - 0.5*ll1mx*pow(ll2,2.0) + 0.16666666666666666*pow(ll2,3.0) + 0.08333333333333333*ll1mx*pow(pi,2.0) - 0.08333333333333333*ll2*pow(pi,2.0) + 0.875*zeta3 - 1.*basis3x6(x);
                break;
            case 25:  res = 0.16666666666666666*ll1mx*pow(pi,2.0) + zeta3 - 1.*basis3x3(x);
                break;
            case 26:  res = -0.16666666666666666*pow(ll1mx,3.0);
                break;

    
            default: {cout << "chaplin error: index in HPL3 out of bounds"
                << " : should be 0-26 and it is " << index << endl;
                exit(EXIT_FAILURE);}
        }
        
        if (imaginary_part_was_modified and imaginary_part_should_be_zero_in_hpl3(index,x)) {
            res = complex<double> (res.real() , 0.0);
        }
        return res;
        
    }
    


  

    

}